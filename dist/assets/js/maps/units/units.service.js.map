{"version":3,"sources":["units/units.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uBAA2B,eAAe,CAAC,CAAA;AAC3C,uBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA2B,SAAS,CAAC,CAAA;AAKrC;IAKC,YAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAC7B,IAAI,CAAC,QAAQ,GAAG,0BAA0B,CAAC;IAC5C,CAAC;IAED,QAAQ;QACP,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;aACxB,GAAG,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;aAChC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,SAAS,CAAC,OAAe,EAAE,SAAiB;QAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;aACxB,GAAG,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;aAClC,GAAG,CAAC,CAAC,KAAkB;YACzB,IAAI,MAAa,CAAC;YAClB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI;oBAClB,EAAE,CAAA,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC;wBACxB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM;4BAC3B,EAAE,CAAA,CAAC,MAAM,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC;gCAC5B,MAAM,GAAG,MAAM,CAAC;4BACjB,CAAC;wBACF,CAAC,CAAC,CAAC;oBACJ,CAAC;gBACF,CAAC,CAAC,CAAC;YACL,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC;aACC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/B,CAAC;IAEO,WAAW,CAAC,KAAU;QAC7B,oDAAoD;QACpD,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,MAAM,KAAK,CAAC,UAAU,EAAE,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;AACL,CAAC;AA5CD;IAAC,iBAAU,EAAE;;gBAAA;AACA,oBAAY,eA2CxB,CAAA","file":"units/units.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport { Unit } from '../data_structure/unit'\nimport { Lesson } from '../data_structure/lesson'\n\n@Injectable()\nexport class UnitsService {\n\n\tprivate units: Unit[];\n\tprivate unitsUrl:string;\n\t\n\tconstructor(private http: Http) {\n\t\tthis.unitsUrl = '/dist/content/units.json';\n\t}\n\n\tgetUnits(): Observable<Unit[]> {\n\t\treturn this.http.get(this.unitsUrl)\n          \t\t.map(response => response.json())\n          \t\t.catch(this.handleError);  \n    }\n\n    getLesson(id_unit: number, id_lesson: number): Observable<Lesson> {\n\t\treturn this.http.get(this.unitsUrl)\n          \t\t.map(response => response.json()) \n\t\t        .map((units: Array<Unit>) => {\n\t\t\t      let result:Lesson;\n\t\t\t      if (units) {\n\t\t\t        units.forEach((unit) => {\n\t\t\t        \tif(unit.id === id_unit) {\n\t\t\t        \t\tunit.lessons.forEach((lesson) => {\n\t\t\t        \t\t\tif(lesson.id === id_lesson) {\n\t\t\t        \t\t\t\tresult = lesson;\n\t\t\t        \t\t\t}\n\t\t\t        \t\t});\n\t\t\t        \t}\t          \n\t\t\t        });\n\t\t\t      }\n\t\t\t      return result;\n\t\t\t     })\n\t\t        .catch(this.handleError); \n    }\n\n    private handleError(error: any){\n    \t// Dig deeper into the error to get a better message\n\t    let errMsg = (error.message) ? error.message :\n\t      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n\t    console.error(errMsg); // log to console instead\n\t    return Observable.throw(errMsg);\n    }\n}"],"sourceRoot":"/source/"}