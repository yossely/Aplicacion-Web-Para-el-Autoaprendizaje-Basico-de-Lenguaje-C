{"_id":1,"title":"Unidad I. Estructura básica de lenguaje C","lessons":[{"_id":1,"title":"Nuestro primer programa en C","content":"Estructura básica de un programa en C, librerías en C, función principal main, sentencias, directiva #include y comentarios.","explanation":"Vamos a hacer el típico programa para empezar a conocer nuestro lenguaje, este es el ejemplo del \"¡Hola Mundo!\"\n```c\n#include <stdio.h> \n\nint main()\n{ \n    /*Comentario: Imprimir en pantalla ¡Hola Mundo!*/\n    printf(\"¡Hola Mundo!\"); \n    return 0;\n}\n```\nEstudiemos el significado de las instrucciones presentes en nuestro programa: \n\n - En la línea 1 estamos incluyendo información de la _librería_ `stdio` (standard input and output), esta librería nos proporciona funciones para imprimir en pantalla (salida) información y para solicitar (entrada) información del usuario.\n - Luego, tenemos nuestra **función principal** llamada `main`, todo el código que queremos que se ejecute debe ir dentro de esta función.\n - Por ahora, nuestro main muestra el mensaje \"¡Hola Mundo!\" usando la función `printf`, esta función pertenece a la librería `stdio.h` que hemos incluido en la primera línea y con ella podemos imprimir en pantalla lo que necesitemos de manera sencilla. La función printf ahora solo imprime una cadena de caracteres, que están encerrados con los signos `\" \"`\n - En lenguaje C es posible escribir comentarios que faciliten la comprensión y legibilidad de un programa, en la línea 5 se observa que un comentario se tiene la forma `/* Comentario ... */`\n - La línea 7 de nuestro main indica que el programa retorna 0 al sistema operativo cuando termina la ejecución. \n - Observemos 3 características importantes aquí: la directiva `#include <stdio.h>` no termina en ningún caracter especial, nuestro `main` agrupa las dos instrucciones que queremos ejecutar con los signos `{ }` y cada una de las instrucciones termina en `;` \n\n### ¡Vamos a poner esto en acción con el ejemplo!","example":{"statement":"Aquí encontraremos el enunciado del problema que necesitamos resolver, es decir, se describen en detalle los datos que se conocen del problema y lo que debemos obtener como resultado. Basándonos en los requerimientos descritos construimos nuestro programa. En este primer ejemplo necesitamos un programa en C que imprima en pantalla la oración \"¡Hola Mundo!\".","code":"/* Incluir librería stdio.h */\n#include <stdio.h> \n\n/* Función principal main */\nint main()\n{ \n    /*Imprimir en pantalla la oración ¡Hola Mundo!*/\n    printf(\"¡Hola Mundo!\"); \n    return 0;\n}","solutionSteps":["Incluimos la librería stdio.h que contiene la función printf para imprimir en pantalla cadenas de caracteres.","Declaramos la función principal (main), recordemos que esta función debe estar presente en todo programa.","Imprimimos en pantalla la oración \"¡Hola Mundo!” con la función printf.","Ahora vamos a compilar y ejecutar nuestro programa haciendo click en el botón RUN que se encuentra en la esquina superior derecha del editor de código y visualizamos la salida del programa en la consola que está debajo del editor."]},"exercises":[{"statement":"Complete el siguiente programa en C con la instrucción necesaria para imprimir en pantalla la oración: \"¡Hola SU_NOMBRE! Bienvenid@ a AprendaC\"","code":"#include <stdio.h> \n\nint main()\n{ \n    /* Hacer: \n        - Imprimir en pantalla: ¡Hola SU_NOMBRE! Bienvenid@ a AprendaC */ \n    return 0;\n}","expectedOutput":"> ¡Hola SU_NOMBRE! Bienvenid@ a AprendaC"},{"statement":"Incluya la librería necesaria para utilizar la función printf en el siguiente programa en C.","code":"/* Hacer: \n        - Incluir la librería stdio.h */ \n\nint main()\n{ \n    printf(\"¡Librería incluida con éxito!\"); \n    return 0;\n}","expectedOutput":"> ¡Librería incluida con éxito!"},{"statement":"Retorne el valor 0 al final de la función principal para indicar que ha terminado con éxito la ejecución del siguiente programa en C.","code":"#include <stdio.h> \n\nint main()\n{\n    printf(\"¡Programa finalizado con éxito!\"); \n    /* Hacer: \n        - Retornar el valor 0 */ \n}","expectedOutput":"> ¡Programa finalizado con éxito!"}]},{"_id":2,"title":"Variables","content":"Declaración de una variable, identificadores, asignación de valores en una variable, tipos de datos y operadores matemáticos básicos.","explanation":"Para usar una variable en C, primero ésta debe ser **declarada**, es decir, debemos describir a la variable **ANTES** de usarla. Lenguaje C tiene varios tipos de datos, pero los más básicos son:\n\nTipo | Descripción\n------------ | -------------\nint | Números enteros (ya sea positivo o negativo)\nfloat | Números decimales (ya sea positivo o negativo)\nchar | Caracter (un solo caracter: a, b, c, etc...)\n\nPara declarar una variable primero especificamos el tipo de data que guardaremos en ella y el nombre o **identificador**. Al escoger el identificador se debe tomar en cuenta que puede contener letras, números y guión bajo `_`, debe empezar con letra o guión bajo y C distingue entre mayúsculas y minúsculas:\n```c\nint precio;\nfloat descuento;\nchar caracter;\n```\nA través de la **asignación** guardamos valores en las variables variables, la asignación de un valor se puede hacer después de haber declarado la variable o en la misma instrucción de declaración, de esta manera: \n```c\nint precio;\nprecio = 40;\n```\n```c\nfloat descuento = 0.3f;\nchar = 'c';\n```\nAl escribir valores decimales en lenguaje C debemos especificar el `.` decimal y la `f`, es decir, si queremos guardar el valor 30 en una variable de tipo decimal debe ser `float variable = 30.0f;`\n\nAhora podemos hacer operaciones con estos valores y guardar el resultado en otra variable, vamos a calcular cuál es el precio final después de haber aplicado el descuento y guardar el valor en una variable de tipo `float`, esto con los operadores matemáticos básicos, + (suma), - (resta), * (multiplicación), / (división) y %(resto de la división):\n```c\nint precio;\nfloat descuento, precio_final;\nprecio = 40;\ndescuento = 0.3f;\nprecio_final = precio - (precio*descuento);\n```\nEn lenguaje C los operadores matemáticos tienen **reglas de precedencia**, las cuales indican que la multiplicación y división se resuelven primero y la suma y la resta después. La expresión que calcula el precio final también puede expresarse sin `( )` que agrupen `precio*descuento`, el resultado sería el mismo, pero para expresiones como `12 * 3 / 4` tal vez sea necesario usar `( )` para que la expresión se resuelva según nuestros requerimientos.","example":{"statement":"La empresa de envío de paquetes Rapidash requiere calcular y mostrar el volumen y peso volumétrico de un paquete cuyas dimensiones son 14.4 cm de alto x 20.1 cm de largo x 15.7 cm de ancho. \n\nNota:\n- El volumen de un paquete se calcula multiplicando el alto por largo y por ancho del cuerpo. \n- El peso volumétrico refleja la densidad de un paquete y se calcula con la fórmula: alto*largo*ancho/5000.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias */\n    float alto = 14.4f, largo = 20.1f, ancho = 15.7f, volumen, peso_volumetrico; \n    /* Cálculo del volumen */\n    volumen = alto*largo*ancho;\n    /* Cálculo del peso volumétrico */\n    peso_volumetrico = alto*largo*ancho/5000;\n    /*Imprimir en pantalla el volumen del paquete*/\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    /*Imprimir en pantalla el peso volumétrico del paquete*/\n    printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n    return 0;\n}","solutionSteps":["Declaramos las variables que vamos a utilizar: tres para guardar las dimensiones del paquete (alto, largo y ancho respectivamente), una para guardar el volumen y otra para guardar el peso volumétrico del paquete.","Calculamos el volumen del paquete multiplicando las dimensiones del mismo y guardamos el valor en la variable creada en el paso anterior.","Calculamos el peso volumétrico del paquete aplicando la fórmula especificada en el enunciado y guardamos en valor en la respectiva variable creada en el primer paso.","Para imprimir en pantalla el valor de una variable de tipo float, insertamos un %f en el lugar donde queremos que se muestre el valor dentro de la oración y al final de la oración indicamos cuál variable es la que contiene dicho valor. Con esto imprimimos el volumen y peso volumétrico del paquete. (Línea 12)","Notemos que al final de la primera oración que imprimimos en pantalla tenemos un \\n, este caracter indica que se desea imprimir un salto de línea al final de la oración, por esta razón la segunda oración (\"Peso volumétrico del paquete: 0.908842\") es impresa en la siguiente línea"]},"exercises":[{"statement":"Juan necesita hacer un programa en C para calcular la nota promedio de sus tres parciales, sabiendo que cada nota es 45.7, 70.3, y 85.2 respectivamente, calcular y mostrar el promedio de sus notas.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 3 variables de tipo float y asignarle los valores de cada nota\n        - 1 variable de tipo float para guardar el valor del promedio \n    */ \n    \n    /* Calcular el promedio de las notas y guardar el resultado en la respectiva variable */\n    \n    /*Imprimir en pantalla la nota promedio de los 3 parciales*/\n    \n    return 0;\n}","expectedOutput":"> La nota promedio de los tres parciales es: 67.066667 puntos"},{"statement":"En una tienda de mascotas hay un descuento del 30% en toda la mercancía, un cliente ha escogido tres productos de 23.4, 34 y 12.5 unidades monetarias cada uno, se requiere calcular y mostrar el precio total de la compra y el precio final después de haber aplicado el descuento.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 3 variables y asignarles el precio de cada producto \n        - 1 variable para guardar el valor del descuento\n        - 2 variables para guardar el precio total y el precio con descuento\n    */ \n\n    /* Calcular y guardar el precio total y el precio con descuento */\n    \n    /*Imprimir en pantalla el precio total*/\n\n    /*Imprimir en pantalla el precio con descuento*/\n    \n    return 0;\n}","expectedOutput":"> El precio total de la compra es: 69.900000 unidades monetarias\n> Aplicando el descuento, el precio final es: 48.929999 unidades monetarias"},{"statement":"Escriba un programa en C que calcule el volumen de una esfera de 10 metros de radio con la fórmula v = 4/3*π*r^3. \n\nTips: \n- Escriba la fracción 4/3 de la forma 4.0f/3.0f, es decir, de tipo float\n- En lenguaje C no existe operador exponencial, por lo que la expresión r^3 se calcula multiplicando r tres veces por sí mismo.\n- Utilice paréntesis ( ) si necesita agrupar operaciones matemáticas al aplicar la fórmula","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 1 variable y asignarle el radio de la esfera\n        - 1 variable para guardar el valor del volumen de la esfera\n    */ \n    \n    /* Calcular y guardar el volumen aplicando la formula */\n    \n    /*Imprimir en pantalla el volumen*/\n    \n    return 0;\n}","expectedOutput":"> El volumen de la esfera es: 4188.666791"}]},{"_id":3,"title":"Imprimir y leer información con printf  y scanf","content":"Imprimir valores enteros y decimales en la consola con printf. Solicitar y guardar valores enteros y decimales en variables con scanf.","explanation":"Ya vimos cómo imprimir valores de tipo `float`, ahora, para imprimir un valor de tipo `int`, debemos reemplazar el `%f` por `%d` de la siguiente manera:\n```c\nprintf(\"mitad de 6 es %d\\n\", 6/2);\n```\nEn la función printf es posible escribir expresiones directamente y de ser necesario varias expresiones en la misma instrucción, por ejemplo:\n```c\nint mitad = 2; \nprintf(\"mitad de 6 es %d y 6/4 equivale a %.2f\\n\", 6/mitad, 6.0f/4.0f);\n```\nVamos a notar algo muy importante en este tipo de instrucciones, en la posición del `%d` se mostrará el valor de la expresión `6/mitad` ya que es la **primera** expresión que se encuentra, en la posición del `%.2f` se mostrará el valor de la expresión 6.0f/4.0f ya que es la **segunda** expresión. Esto implica que la cantidad de variables o expresiones debe ser igual a la cantidad de %d o %f que se tengan.\nEl `.2` en `%.2f` indica la cantidad de decimales que deseamos imprimir en pantalla del valor obtenido de la expresión `6.0f/4.0f`\n\nPara permitir que el usuario ingrese información y usarla en nuestro programa usaremos la función `scanf` también perteneciente a la librería `stdio.h`, veamos:\n```c\nscanf(\"%d\",&variable_entera);\nscanf(\"%f\",&variable_decimal);\n```\n - Al igual que especificamos qué tipo de dato vamos a imprimir en pantalla con printf, debemos especificar qué tipo de dato queremos guardar con la función scanf `%d` - *int* o `%f` - *float*\n - Vemos un nuevo operador `&` en esta instrucción, con este operador obtenemos la dirección de la variable que precede, esto con el fin de indicar a la función `scanf` **dónde** debe guardar el valor que acaba de leer.","example":{"statement":"Vamos a mejorar el ejemplo anterior, permitiendo que el usuario ingrese una por una las dimensiones del paquete a enviar para luego calcular con ellas el volumen y el peso volumétrico del paquete.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias SIN ASIGNACION de valores*/\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Solicitud de cada dimensión */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Cálculo del volumen */\n    volumen = alto*largo*ancho;\n    /* Cálculo del peso volumetrico */\n    peso_volumetrico = alto*largo*ancho/5000;\n    /*Imprimir en pantalla el volumen del paquete*/\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    /*Imprimir en pantalla el peso volumétrico del paquete*/\n    printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n    return 0;\n}","solutionSteps":["Ya no es necesario asignar los valores de las dimensiones cuando estamos declarando las variables.","Mostramos un mensaje solicitando el alto del paquete y luego guardamos el valor en la variable correspondiente. De igual forma solicitamos las dos dimensiones restantes.","El volumen y peso volumétrico del paquete se calcula de la misma manera que en el ejemplo anterior.","Por último imprimimos en pantalla los valores calculados."]},"exercises":[{"statement":"Escribir un programa que solicite al usuario ingresar una cantidad de dinero, luego mostrar esta cantidad con un impuesto de 12% añadido. Por ejemplo, si el usuario ingresa 345.23 la salida será 386.658. \n\nNota: Se requiere que los valores decimales sean mostrados con 3 decimales.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables para guardar el monto y el porcentaje del impuesto */\n   \n    /* Solicitar el monto al usuario */\n\n    /* Calcular el monto con el impuesto añadido */\n\n    /* Mostrar en pantalla el monto con el impuesto añadido */\n    \n    return 0;\n}","expectedOutput":"> Ingrese el monto: 345.23\n> Con el impuesto añadido:  386.658"},{"statement":"Escriba un programa que solicite un valor para 'x' y lo evalúe en la siguiente función polinómica: 5x^3 - x^2 +7x - 6. \n\nNota: \n- El valor de 'x' siempre será un número entero.\n- Recuerde que C no tiene operador exponencial, así que es necesario multiplicar 'x' por sí misma tantas veces como lo indique el exponente, por ejemplo, x*x representa 'x' al cuadrado.\n- Utilice los ( ) para agrupar cuando lo considere necesario.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables enteras para guardar el valor de x y el resultado de la función */\n   \n    /* Solicitar el monto al usuario */\n\n    /* Evaluar la funcion polinómica */\n\n    /* Mostrar en pantalla el resultado de la forma: \n            Al evaluar la función con x = VALOR_DE_X el resultado es: VALOR_DE_RESULTADO\n    */\n    \n    return 0;\n}","expectedOutput":"> Ingrese el valor de x: 4\n> Al evaluar la función con x = 4 el resultado es: 326"},{"statement":"Escriba un programa que solicite una temperatura en grados Fahrenheit y luego imprima en pantalla la temperatura equivalente en grados Celsius. \n\nNota: para convertir grados Fahrenheit a Celsius se emplea la fórmula °C = (°F  -  32)*5/9. ","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables para guardar las temperaturas en Fahrenheit \n        y Celsius\n    */ \n    \n    /* Solicitar la temperatura en grados Fahrenheit */\n\n    /* Transformar la temperatura de Fahrenheit a Celsius */\n\n    /* Imprimir en pantalla la temperatura equivalente en Celsius */\n\n    return 0;\n}","expectedOutput":"> Ingrese la temperatura en Fahrenheit: 325.13\n> Temperatura equivalente en Celsius: 162.85"}]}]}
{"_id":2,"title":"Unidad II. Toma de decisiones","lessons":[{"_id":1,"title":"Sentencia de selección: If","content":"Estructura de la condición if. Evaluar condiciones con los operadores relacionales, de igualdad y lógicos. Reglas de precedencia de los operadores.","explanation":"Se les llama sentencias de selección porque permiten seleccionar y ejecutar cierta porción de código dependiendo de alguna condición (evaluando una expresión). La primera sentencia que veremos se denomina `if` y su forma más simple es:\n```c\nif (/* condicion */)\n{\n    /* Bloque de instrucciones a ejecutar \n        SI se cumple la condicion */\n}\n```\nSi la *condición* que se encuentra dentro del paréntesis se cumple, se ejecuta el bloque de *instrucciones* ubicado dentro de las `{ }`. Para formular condiciones, lenguaje C posee operadores de tres tipos:\n\n - Operadores Relacionales \n\nSímbolo | Descripción\n------------ | -------------\n`<` | Menor que\n`\\>` | Mayor que\n`<=` | Menor o igual que\n`\\>=` | Mayor o igual que\n\n\n- Operadores de Igualdad\n \nSímbolo | Descripción\n------------ | -------------\n`==` | Igual que\n`!=` | Diferente que\n\n\n - Operadores Lógicos \n\nSímbolo | Descripción\n------------ | -------------\n`!` | Negación\n`&&` | AND lógico\n<code>&#124;&#124;</code> | OR lógico\n\nAl evaluar una expresión se produce como resultado un **0** (falso) o **1** (verdadero). Estos operadores también tienen *reglas de precedencia* las cuales indican que primero se resuelven los operadores relacionales, luego los de igualdad y por último los lógicos.\nPor ejemplo, en la expresión `x < y && y == z` primero se evalúa si *x* es menor que *y*, luego si *y* es igual que *z* y por último se verifica que las dos condiciones anteriores tienen como resultado verdadero. Algunos programadores utilizan *paréntesis* para agrupar las condiciones y que sean más legibles: `(x < y) && (y == z)`","example":{"statement":"Continuando con el ejemplo de la empresa de envío de paquetes Rapidash, se requiere mostrar el tipo de paquete de acuerdo a su peso volumétrico, para esto la empresa establece tres categorías: \n- Grande (peso volumétrico mayor o igual que 10)\n- Mediano (peso volumétrico mayor que 5 y menor que 10) \n- Pequeño (peso volumétrico menor o igual que 5)\n\nVamos a escribir las instrucciones necesarias para evaluar y clasificar un paquete con base en las dimensiones ingresadas por el usuario.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias SIN ASIGNACION de valores*/\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Solicitud de cada dimensión */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Cálculo del volumen  y peso volumétrico*/\n    volumen = alto*largo*ancho;\n    peso_volumetrico = alto*largo*ancho/5000;\n\n    /* Imprimir en pantalla el volumen y peso volumétrico del paquete */\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n\n    /* Clasificación del paquete según su peso volumétrico */\n    if ( peso_volumetrico >= 10.0f )\n    {\n        printf(\"El paquete es grande\\n\");\n    }\n    if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n    {\n        printf(\"El paquete es mediano\\n\");\n    }\n    if ( peso_volumetrico <= 5 )\n    {\n        printf(\"El paquete es pequeño\\n\");\n    }\n\n    return 0;\n}","solutionSteps":["Ya con las dimensiones solicitadas y el peso volumétrico calculado en la lección anterior, nos enfocamos en construir las condiciones necesarias que clasifican un paquete.","La primera condición evalúa si el peso volumétrico es mayor o igual (>=) que 10.0, de ser así se imprime en pantalla un mensaje que indique al usuario que el paquete entra en la categoría Grande.","En la segunda condición evaluamos un rango (entre 5.0 y 10.0) e imprimimos el mensaje correspondiente. Seguidamente se construye la última condición de la misma manera que las anteriores.","Notemos que cada condición toma en cuenta si se incluye o no en el rango el valor especificado por cada clasificación, por ejemplo, en la primera condición se usa >= en lugar de >"]},"exercises":[{"statement":"En el banco Golduck es posible realizar transferencias de dinero, según el monto de la transferencia se aplica una comisión de tasa fija más una tasa porcentual de la siguiente manera:\n- Si el monto es menor que 5000 la comisión será de 30 + 1.7%\n- Si el monto es mayor o igual que 5000 y menor que 30000 la comisión será de 56 + 0.66%\n- Si el monto es mayor o igual que 30000 y menor que 100000 la comisión será de 100 + 0.34%\n- Si el monto es mayor o igual que 100000 la comisión será de 155 + 0.09%\n\nSe requiere escribir un programa que solicite al usuario el monto de la transferencia que desea realizar, luego evaluar y calcular la comisión que le corresponde según el monto e imprimir en pantalla el monto total con la comisión añadida.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias*/\n    \n    /* Solicitar el monto a transferir */\n\n    /* Calcular la comisión segun el monto a transferir*/\n    \n    /* Imprimir el monto final con la comisión previamente calculada */\n\n    return 0;\n}","expectedOutput":"> Ingrese el monto de la transferencia: 6500\n> El monto total por la transferencia de 6500.00 es de 6598.90"},{"statement":"Escriba un programa para permitir que un usuario ingrese un número entero e indicar si ese número es par o impar.\n\nTip: recuerde la función del operador %","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias*/\n    \n    /* Solicitar el número entero */\n\n    /* Clasificacion de número: PAR o IMPAR */\n    /* Tip: utilice el operador % */\n\n    return 0;\n}","expectedOutput":"> Ingrese un número entero: 5\n> El número es impar"},{"statement":"Complete el siguiente programa para que solicite la edad del usuario e indique en qué etapa de su edad biológica se encuentra según la siguiente clasificación:\n- Niño: de 5 a 12 años\n- Adolescente: de 13 a 19 años\n- Adulto Joven: de 20 a 24 años\n- Adulto: de 25 a 55 años\n- Adulto mayor: de 56 años en adelante","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias*/\n    int edad; \n    \n    /* Solicitud de la edad del usuario */\n    printf(\"Ingrese su edad: \");\n    scanf(\"%d\",&edad);\n\n    /* Clasificar el usuario según su edad */\n\n    return 0;\n}","expectedOutput":"> Ingrese su edad: 25\n> Usted es un Adulto"}]},{"_id":2,"title":"Cláusula else","content":"Definición, estructura y casos de uso de la cláusula else en conjunto con la sentencia if","explanation":"En algunas oportunidades es útil ejecutar ciertas instrucciones si *NO* se cumple una condición `if`, para estos casos existe la cláusula `else`:\n```c\nif (/* condicion */)\n{\n    /* Bloque de instrucciones a ejecutar \n        SI se cumple la condicion */\n}else{\n    /* Bloque de instrucciones a ejecutar \n        si NO se cumple la condicion */\n}\n```\nLa sentencia `else` siempre va ligada con una sentencia `if`, ya que es la **contraparte** de la sentencia `if`, es decir, las instrucciones dentro de la cláusula `else` se ejecutan cuando al evaluar la expresión de la sentencia `if`, resulta **0** (falso)","example":{"statement":"Vamos a optimizar el programa del ejemplo visto en la lección anterior con el uso de la cláusula else. Recordemos las tres categorías establecidas por la empresa Rapidash: \n- Grande (peso volumétrico mayor o igual que 10), \n- Mediano (peso volumétrico mayor que 5 y menor que 10) \n- Pequeño (peso volumétrico menor o igual que 5)","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias SIN ASIGNACION de valores*/\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Solicitud de cada dimensión */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Cálculo del volumen  y peso volumétrico*/\n    volumen = alto*largo*ancho;\n    peso_volumetrico = alto*largo*ancho/5000;\n\n    /* Imprimir en pantalla el volumen y peso volumétrico del paquete */\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n    /* Clasificación del paquete según su peso volumétrico con IF-ELSE*/\n    if ( peso_volumetrico >= 10.0f )\n    {\n        printf(\"El paquete es grande\\n\");\n    }\n    else{\n        if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n        {\n            printf(\"El paquete es mediano\\n\");\n        }\n        else{\n            printf(\"El paquete es pequeño\\n\");\n        }  \n    }\n    \n    return 0;\n}","solutionSteps":["Haremos uso de instrucciones if-else anidados, es decir, evaluamos si el peso volumétrico es mayor o igual que 10, si resulta verdadero se imprime el mensaje correspondiente y NO se evalúan las demás condiciones.","En caso de no cumplir con la primera condición, se evalúa si el peso volumétrico se encuentra entre 5 y 10, si el resultado es verdadero se imprime el mensaje correspondiente; en caso contrario el paquete se ubica en la tercera categoría (por descarte).","De esta manera ahorramos tiempo de ejecución al evitar evaluar condiciones que son excluyentes entre sí cuando se ha cumplido alguna de ellas."]},"exercises":[{"statement":"Un estudiante desea saber el equivalente de su calificación en literal (A, B, C, D y F) conociendo los puntos obtenidos en una asignatura, por lo tanto se requiere escribir un programa en C que solicite la nota (siempre será un número entero) e indique la calificación equivalente según las siguientes condiciones:\n- A: 90-100\n- B: 80-89\n- C: 70-79\n- D: 60-69\n- F: 0-59","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar una variable para guardar la nota de la asignatura*/\n    \n    /* Solicitar la nota */\n\n    /* Condiciones IF-ELSE para evaluar e indicar el literal correspondiente */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese la nota de la asignatura: 96\n> Calificación obtenida: A"},{"statement":"Escriba un programa que solicite tres números enteros e indique cuál es el mayor y el menor número entre ellos. \nNota: Intente utilizar la menor cantidad de condiciones (if-else) posibles","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 3 variables para guardar cada número\n        - 1 variable para guardar el número menor\n        - 1 variable para guardar el número mayor */\n    \n    /* Solicitar los tres números a evaluar */\n\n    /* Condiciones IF-ELSE para hallar el menor y mayor número de los tres valores ingresados */\n    \n    /* Imprimir en pantalla el menor y mayor número */\n\n    return 0;\n}","expectedOutput":"> Ingrese los 3 números a evaluar:\n> 45\n> 21\n> 68\n> El número mayor es 68\n> El número menor es 45"},{"statement":"Imprimir en pantalla la ciudad correspondiente a un código de área ingresado por el usuario sabiendo que:\n- 229 es Buenos Aires\n- 404 es Cartagena\n- 470 es Cartagena\n- 706 es Quito\n- 762 es Quito\n- 770 es Cartagena\n- 912 es Buenos Aires\nSi el usuario ingresa un código de área que no está en la lista se debe imprimir un mensaje de error.\n\nNota: Con 3 condiciones if es suficiente.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar una variable para manejar el código de área */\n    \n    /* Solicitar el código de área */\n\n    /* Condiciones IF-ELSE para indicar la ciudad correspondiente */\n\n    return 0;\n}","expectedOutput":"> Ingrese el código de área: 912\n> Buenos Aires"}]},{"_id":3,"title":"Sentencia de selección: switch","content":"Estructura de la sentencia switch. Elementos que componen la sentencia: case, break y default. Algunas condiciones del switch.","explanation":"A menudo necesitaremos comparar una expresión contra una serie de valores para ver con cuál coincide y con base en esa coincidencia ejecutar un bloque de instrucciones u otro. Para estas situaciones tenemos la sentencia `switch`\nVeamos un ejemplo práctico: si queremos mostrar un indicador (Excelente, bueno, regular o malo) basados en el valor introducido por el usuario (4, 3, 2 o 1 respectivamente), la sentencia `switch` es:\n```c\nswitch(valor){\n    case 4:\n        printf(\"Excelente\\n\");\n        break;\n    case 3:\n        printf(\"Bueno\\n\");\n        break;\n    case 2:\n        printf(\"Regular\\n\");\n        break;\n    case 1:\n        printf(\"Malo\\n\");\n        break;\n    default:\n        printf(\"Valor fuera del rango\\n\");\n        break;\n}\n```\nDe aquí que:\n\n - La expresión a comparar en la sentencia `switch` puede ser **ÚNICAMENTE** de tipo `int`.\n - Cada caso `case` evalúa si *valor* coincide con un valor constante, el cual puede ser una expresión pero no puede contener variables, es decir, puede ser `5` ó `5+10` pero **no** `5+n`\n - Después de definir cada caso, vienen las instrucciones a ejecutar si coincide con el mismo, no se requiere `{ }` para agrupar estas instrucciones. Por lo general, la última instrucción de cada caso es `break;` que indica detener el proceso de evaluar si el valor dentro de `switch` coincide con los casos restantes y se continúa con la siguiente instrucción o sentencia que esté después del `switch`\n - No está permitido definir el mismo caso dos veces.\n - Si *valor* no coincide con ninguna de los casos listados, entonces las instrucciones dentro del caso `default` son ejecutadas.\n - El orden para definir los casos no importa, esto implica por ejemplo que el caso *default* no necesariamente va al final.","example":{"statement":"Sigamos con el ejemplo de la empresa Rapidash, esta vez la empresa define la tarifa correspondiente a cada plazo del tiempo de entrega de un paquete de la siguiente manera:\n- Entrega en 1 día, el costo será 1250 \n- Entrega en 2 días, el costo será 1000 \n- Entrega en 3 días, el costo será 300\n\nVamos a codificar las instrucciones necesarias para solicitar el tiempo de entrega que desea el usuario para un paquete. Luego evaluar, clasificar e informar la tarifa aplicada al plazo ingresado por el usuario.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Declaración de la variable entera que guardara el TIEMPO DE ENTREGA del paquete */\n    int tiempo_entrega_dias;\n\n    /* Solicitud de cada dimensión */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Cálculo del volumen  y peso volumétrico*/\n    volumen = alto*largo*ancho;\n    peso_volumetrico = alto*largo*ancho/5000;\n\n    /* Imprimir en pantalla el volumen y peso volumétrico del paquete */\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n\n    /* Clasificación del paquete segun su peso volumétrico con IF-ELSE*/\n    if ( peso_volumetrico >= 10.0f )\n    {\n        printf(\"El paquete es grande\\n\");\n    }\n    else{\n        if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n        {\n            printf(\"El paquete es mediano\\n\");\n        }\n        else{\n            printf(\"El paquete es pequeño\\n\");\n        }  \n    }\n\n    /* Solicitud del tiempo de entrega */\n    printf(\"\\nIngrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n    scanf(\"%d\",&tiempo_entrega_dias);\n\n    /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n        elegido por el usuario\n     */\n    switch(tiempo_entrega_dias){\n        case 1:\n            printf(\"La tarifa es 1250\\n\");\n            break;\n        case 2:\n            printf(\"La tarifa es 1000\\n\");\n            break;\n        case 3:\n            printf(\"La tarifa es 300\\n\");\n            break;\n    }\n    \n    return 0;\n}","solutionSteps":["Declaramos una variable de tipo entero para guardar el tiempo de entrega ingresado por el usuario. (Línea 9)","Luego, en las líneas 44 y 45 solicitamos el tiempo de entrega y guardamos el valor en la variable creada en el paso anterior.","A partir de la línea 50 encontramos la sentencia switch, la cual evalúa el tiempo de entrega (especificado en días), lo compara con los valores definidos en cada case (1 2 y 3) y cuando coincida con alguno de ellos se imprime el mensaje con la tarifa correspondiente."]},"exercises":[{"statement":"Un Boy Scout quiere aprender el código morse y decide empezar por los dígitos. Se requiere hacer un programa en C que dado un dígito muestre su correspondiente código morse. A continuación se muestran los dígitos del 0 al 9 en código morse:\n- 0    _ _ _ _ _ \n- 1    . _ _ _ _ \n- 2    . . _ _ _\n- 3    . . . _ _\n- 4    . . . . _ \n- 5    . . . . . \n- 6    _ . . . .\n- 7    _ _ . . .\n- 8    _ _ _ . . \n- 9    _ _ _ _ .\nSi un usuario introduce un dígito fuera del rango especificado (0-9) se debe mostrar el mensaje “El digito ingresado no se encuentra entre 0 y 9”","code":"#include <stdio.h> \n\nint main()\n{    \n    /* Declarar la variable entera para guardar el dígito */\n\n    /* Solicitar el dígito */\n\n    /* Evaluar, clasificar y mostrar el código morse correspondiente al dígito \n        Nota: Recuerde mostrar el mensaje de error si el dígito no se encuentra entre 0 y 9\n    */\n    \n    return 0;\n}","expectedOutput":"> Ingrese un dígito del 0 al 9: 3\n> . . . _ _"},{"statement":"Se necesita un programa en C que solicite al usuario dos números decimales y permita sumar, restar, multiplicar o dividir esos valores según una opción ingresada por el usuario. Las opciones se pueden mostrar de la siguiente manera:\n- 1: Sumar\n- 2: Restar\n- 3: Multiplicar\n- 4: Dividir\n\nEl flujo del programa sería: solicitar dos valores decimales, mostrar opciones disponibles, guardar opción ingresada, evaluar la opción y aplicar la operación correspondiente mostrando el resultado de la misma. \n\nEn caso de que el usuario ingrese una opción que no está disponible se debe mostrar el mensaje \"La opción OPCION no esta disponible\"","code":"#include <stdio.h> \n\nint main()\n{    \n    /* Declarar las variables para guardar los dos números decimales \n        y la variable para guardar la opción del cliente*/\n    \n\n    /* Solicitar los números decimales */\n\n\n    /* Imprimir las opciones disponibles en forma de menú */\n\n    \n    /* Solicitar la opción deseada */\n\n\n    /* Evaluar la opción ingresada y sumar, restar, multiplicar o dividir según sea\n        el caso, mostrando el resultado de la operación aplicada \n\n        Nota: Recuerde mostrar el mensaje de error si la opción ingresada no está disponible */\n\n    return 0;\n}","expectedOutput":"> Ingrese dos numeros decimales:\n> Número 1: 6.4\n> Número 2: 2\n> Las opciones disponibles son:\n> 1: Sumar\n> 2: Restar\n> 3: Multiplicar\n> 4: Dividir\n> Ingrese la opción deseada: 4\n> La división de los dos valores es 3.20"},{"statement":"Escriba un programa en C que solicite la fecha en formato 31-3-17, es decir, solicitar el dia, luego el mes y por último el año. Después de recolectar esta información mostrar la misma fecha pero de la forma “31 de marzo del año 2017”\n\nTip: Imprima la fecha final por partes, es decir, primero “31 de”, luego convierte 03 a “marzo” y por último “del año 2017”.\n\nNota: En lenguaje C el nombre o identificador de una variable no puede contener el caracter ñ","code":"#include <stdio.h> \n\nint main()\n{    \n    /* Declarar las variables de tipo entero para día, mes y año */\n\n    /* Solicitar y guardar día, mes y año */\n\n    /* Imprimir la primera parte de la fecha final \"DIA de \" */\n\n    /* Evaluar, clasificar e imprimir el nombre del mes correspondiente \n        al número de mes ingresado */\n    \n\n    /* Imprimir la última parte de la fecha final \" del año 20ANO\" */\n    \n    return 0;\n}","expectedOutput":"> Ingrese la fecha:\n> Dia: 31\n> Mes: 3\n> Ano: 17\n> 31 de marzo del año 2017"}]}]}
{"_id":3,"title":"Unidad III. Ciclos: while, do-while y for.  Contadores y acumuladores.","lessons":[{"_id":1,"title":"Ciclos: while","content":"Definición de ciclos. Estructura y uso del ciclo while en lenguaje C.","explanation":"Un ciclo es una sentencia que se encarga de ejecutar repetidamente las instrucciones que se encuentran dentro del cuerpo del ciclo. En C, cada ciclo tiene una expresión de control. Dicha expresión de control es evaluada **ANTES** de cada ejecución del cuerpo del ciclo (a esto se le llama *iteración*) y si el resultado es verdadero, el ciclo continúa su ejecución.\n\nEl primer ciclo que veremos se denomina `while` y tiene la siguiente estructura:\n```c\nwhile(/* expresion */){\n    // Instrucciones\n}\n```\nLa expresión dentro de los paréntesis `( )` de la sentencia `while` es la **expresión de control**, es aquella que se evalúa y si resulta verdadero se ejecutan las instrucciones que están dentro del cuerpo del ciclo (iteración). Si queremos hacer un ciclo que imprima los números del 1 al 10:\n```c\nint numero = 1;\nwhile(numero <= 10){\n    printf(\"%d\\n\", numero);\n    numero = numero+1;\n}\n```\n - Declaramos la variable *numero* y la inicializamos en 1\n - Se evalúa la condición *numero* < 10 ? → Verdadero (1)\n - Se imprime el numero 1 y luego se incrementa el valor de *numero* a 2\n - Se evalúa nuevamente la condición *numero* < 10 ? → Verdadero (1)\n - Se imprime el numero 2 y luego se incrementa el valor de *numero* a 3\n - Así sucesivamente hasta que *numero* es igual a 11 \n - Se evalúa la condición *numero* < 11 ? → Falso (0)\n - Se sale del ciclo, es decir, se detienen las iteraciones y se continúa con la siguiente instrucción que esté después del `while`\n\n> **Nota:** El cuerpo del ciclo puede que no sea ejecutado ni una vez, ya que la expresión de control es evaluada **ANTES** de cada iteración (incluída la primera)","example":{"statement":"La empresa de envíos Rapidash utiliza camionetas para transportar sus paquetes; el peso volumétrico disponible en la última camioneta que saldrá hoy es de 28.3, por esta razón la empresa necesita que su programa acepte nuevos paquetes mientras haya espacio disponible. ","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Declaración e inicialización del peso disponible en la camioneta*/\n    float peso_disponible = 28.3f;\n\n    /* Declaración de la variable entera que guardará el TIEMPO DE ENTREGA del paquete */\n    int tiempo_entrega_dias;\n\n    /* Mientras el peso disponible sea mayor que 0.0 se solicitan los datos de un nuevo paquete */\n    while(peso_disponible > 0.0f){\n\n        /* Solicitud de cada dimensión */\n        printf(\"\\nIngrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Calculo del volumen  y peso volumétrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Actualizar el peso volumétrico disponible en la camioneta, es decir, restar el peso \n            volumétrico del paquete actual al peso disponible */\n        peso_disponible = peso_disponible - peso_volumetrico;\n\n        /* Imprimir en pantalla el volumen y peso volumétrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificación del paquete según su peso volumétrico con IF-ELSE*/\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"\\nIngrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                break;\n        }\n    }\n\n    /* Indicar que el espacio se ha agotado y el programa ha terminado*/\n    printf(\"***Espacio de la camioneta agotado\\n\");\n    \n    return 0;\n}","solutionSteps":["Declaramos e inicializamos una variable de tipo float para manejar el peso volumétrico disponible en la camioneta.","Vamos a utilizar el ciclo while para evaluar si existe espacio disponible en la camioneta, es decir, si el peso volumétrico disponible es mayor que 0.0. Línea 15.","Luego ubicamos todas las instrucciones creadas en las lecciones anteriores dentro del cuerpo del ciclo, es decir, la solicitud y cálculo del volumen, peso volumétrico y tarifa del paquete a enviar se ubican dentro de las { } del while.","Ahora actualizamos la variable que se evalúa en la expresión de control (peso_disponible) restándole el peso volumétrico del paquete actual, de esta manera vamos disminuyendo el peso disponible de la camioneta. Este paso es muy importante porque si no se actualiza la variable evaluada en la expresión de control creamos un ciclo while infinito. (Línea 32)","Por último mostramos el mensaje \"***Espacio de la camioneta agotado\" fuera del ciclo while para indicar que hemos terminado. (Línea 74)"]},"exercises":[{"statement":"Complete el siguiente programa para imprimir una tabla de números enteros junto a sus cuadrados. El programa primero debe solicitar al usuario un número entero (n), luego se imprimen n cantidad de líneas, donde cada una tendrá un número entre 1 y n junto a su cuadrado.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar \n        - 1 variable entera para guardar el NUMERO \n        - 1 variable que ira contando desde 1 hasta NUMERO */\n    int n, numero_actual = 1;\n\n    /* Solicitar el número */\n\n    /* Crear el ciclo while que vaya desde 1 hasta NUMERO (incluyendo NUMERO) */\n    while(){\n\n        /* Imprimir el número actual y su cuadrado\n            Ej.  2  4 \n        */\n        \n        /* Actualizar el número actual al siguiente */\n    }\n\n    return 0;\n}","expectedOutput":"> Ingrese el número: 5\n> 1  1\n> 2  4\n> 3  9\n> 4  16\n> 5  25"},{"statement":"Escriba un programa que solicite un número par entero (n) al usuario e imprima los números pares desde n hasta 0, es decir, de manera descendiente. \nSi el usuario ingresa un número impar se debe mostrar el mensaje error “Lo siento, el número ingresado es impar”.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar una variable entera para guardar el NUMERO */\n\n\n    /* Solicitar el número */\n\n\n    /* Hacer:\n        - Verificar que el número sea par \n        - Si el número es par imprimir los números pares desde NUMERO hasta 0\n            Nota: Recuerde actualizar la variable que evalúe en la condición del ciclo while \n                  dentro del ciclo\n        - Si el número es impar imprimir el mensaje \"Lo siento, el número ingresado es impar\" \n    */\n   \n\n    return 0;\n}","expectedOutput":"> Ingrese un número par: 8\n> 8\n> 6\n> 4\n> 2\n> 0"},{"statement":"Desarrollar un programa para llevar y mantener el saldo de una cuenta bancaria. El programa debe ofrecer al usuario un menú de opciones: vaciar la cuenta, crédito para la cuenta(+), débito desde la cuenta(-), mostrar el saldo actual y salir del programa. Las opciones son representadas por los números enteros 0, 1, 2, 3 y 4 respectivamente. Al comenzar el programa se debe mostrar el saldo inicial de la cuenta (0.0)","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias para guardar el saldo de la cuenta, el monto de las\n        transacciones (crédito o débito) y la opción del usuario */\n\n    /* Mostrar el menu de opciones */\n\n    /* Hacer:\n        - Solicitar la opción del usuario mientras no escoja \"Salir\" (4)\n        - Evaluar la opción del usuario y aplicar las instrucciones correspondientes según la opción \n    */\n   \n    \n    /* Imprimir el mensaje de \"Programa finalizado\" */ \n\n\n    return 0;\n}","expectedOutput":"> Opciones del programa\n> 0: Vaciar cuenta\n> 1: Crédito\n> 2: Débito\n> 3: Saldo actual\n> 4: Salir\n> El saldo actual es: 0.00\n> Opción: 1\n> Ingrese el monto del crédito: 32.2\n> Opción: 2\n> Ingrese el monto del débito: 2.3\n> Opción: 3\n> El saldo actual es: 29.90\n> Opción: 4\n> Programa finalizado"}]},{"_id":2,"title":"Ciclos: do-while","content":"Estructura y uso del ciclo do-while. Diferencia entre el ciclo while y do-while.","explanation":"El ciclo `do-while` es básicamente una sentencia `while` cuya expresión de control es evaluada **DESPUÉS** de cada ejecución del cuerpo del ciclo. La sentencia `do-while` tiene la forma:\n```c\ndo{\n    // Instrucciones\n}while(/* expresion */);\n```\nAl encontrar un ciclo `do-while` lo que ocurre es: el cuerpo del ciclo es ejecutado primero, luego la expresión de control es evaluada, si el resultado es verdadero (1) el cuerpo del ciclo es ejecutado otra vez y así sucesivamente. El ciclo termina cuando el resultado de la expresión de control es falso (0).\nLa **diferencia** entre el *while* y el *do-while* es que el `do-while` **SIEMPRE SE EJECUTA AL MENOS UNA VEZ**, mientras que el `while` podría no ejecutarse ni una vez si al evaluar la expresión se obtiene como resultado falso (0). Con esta característica en mente podemos distinguir cuándo necesitamos un ciclo u otro.\nSi queremos determinar la cantidad de dígitos que posee un número entero positivo podemos hacer lo siguiente:\n```c\nint valor, digitos=0;\nprintf(\"Introduzca un numero entero positivo: \\n\");\nscanf(\"%d\",&valor);\n\ndo{\n    valor/=10;\n    digitos=digitos+1;\n}while(valor>0);\n\nprintf(\"El numero tiene %d digito(s)\\n\", digitos);\n```\nSi usamos un ciclo `while` en lugar del `do-while`, no estaremos tomando en cuenta el caso en que el numero ingresado sea 0, donde al evaluar la expresión resulta falso (0) **ANTES** de ejecutar el cuerpo de ciclo por lo que no incrementamos el valor de digitos y el resultado final será *“El numero tiene 0 digito(s)”* cuando en realidad tiene 1 dígito.\n```c\nwhile(valor>0){\n    valor/=10;\n    digitos=digitos+1;\n}\n```","example":{"statement":"La empresa de envíos esta vez desea asegurar el registro de al menos un paquete y luego, basándose en la misma condición del ejemplo en la lección anterior continuar con el registro de los demás paquetes. Recordemos que la condición es registrar paquetes mientras haya espacio en la camioneta que saldrá hoy, teniendo como peso volumétrico disponible 28.3","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Declaración e inicialización del peso disponible en la camioneta*/\n    float peso_disponible = 28.3f;\n\n    /* Declaración de la variable entera que guardara el TIEMPO DE ENTREGA del paquete */\n    int tiempo_entrega_dias;\n\n    /* Asegurar el registro de al menos un paquete con el ciclo do-while */\n    do{\n\n        /* Solicitud de cada dimensión */\n        printf(\"Ingrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo del volumen  y peso volumétrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Actualizar el peso volumétrico disponible en la camioneta, es decir, restar el peso \n            volumétrico del paquete actual al peso disponible */\n        peso_disponible = peso_disponible - peso_volumetrico;\n\n        /* Imprimir en pantalla el volumen y peso volumétrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificación del paquete según su peso volumétrico con IF-ELSE*/\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"\\nIngrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                break;\n        }\n    /* Condición para repetir el ciclo: mientras el peso disponible sea mayor que 0.0 */\n    }while(peso_disponible > 0.0f);\n\n    /* Indicar que el espacio se ha agotado y el programa ha terminado*/\n    printf(\"***Espacio de la camioneta agotado\\n\");\n    \n    return 0;\n}","solutionSteps":["Para aplicar las nuevas condiciones de la empresa usamos el ciclo do-while, de esta manera nos aseguramos que al menos un paquete sea registrado.","El la línea 15 cambiamos la sentencia while por el do, todas las instrucciones que están ubicadas dentro del ciclo seguirán estando dentro del mismo.","Luego al final del ciclo, en la línea 72, ubicamos la condición que indica cuándo repetir el ciclo, en este caso es mientras el peso_disponible sea mayor que 0.0","Recordemos siempre actualizar la variable que está siendo evaluada en la condición del ciclo (línea 32)."]},"exercises":[{"statement":"Escriba un programa que permita ingresar una serie de números hasta que el usuario ingrese 0, luego calcular y mostrar el promedio de dichos números.\n\nNota: los números pueden ser enteros o decimales.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias */\n    \n\n    /* Hacer:\n        - Solicitar número por número \n        - Sumar cada número y guardar el resultado en una variable\n        - Contar la cantidad de números\n    */\n    \n    \n    /* Calcular el promedio*/\n    \n\n    /* Imprimir el promedio de los números ingresados */\n    \n\n    return 0;\n}","expectedOutput":"> Introduzca un número: 32\n> Introduzca un número: 43.2\n> Introduzca un número: 45\n> Introduzca un número: 15.7          \n> Introduzca un número: 0\n> El promedio de los números ingresados es 27.18"},{"statement":"Escriba un programa que solicite al usuario ingresar un número entero, luego imprimir dicho número con sus dígitos invertidos.\n\nTip: Recuerde que la función del operador % es retornar el residuo de una división.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias */\n\n    /* Solicitar el número entero*/\n\n    /* Imprimir el número introducido con sus dígitos invertidos \n        Tip: Puede utilizar el operador %\n    */\n   \n    \n    return 0;\n}","expectedOutput":"> Introduzca un número entero: 23456\n> 65432"},{"statement":"Escriba un programa que encuentre el número más grande en una serie de números ingresada por el usuario. El programa debe solicitar los números uno por uno. La serie culmina cuando el usuario ingresa 0 o un número negativo. Al finalizar, el programa debe imprimir el número positivo más grande de la serie introducida.\n\nNota: Los números no son necesariamente enteros.\n\nTip: Declare e inicialice una variable con un número muy pequeño (cero por ejemplo) para empezar a comparar con los números introducidos y encontrar el mayor.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar \n        - Una variable para guardar cada número introducido  \n        - Una variable con un valor muy pequeño para comparar con los números introducidos \n          y encontrar el mayor */\n\n\n    /* Hacer:\n        - Un ciclo que solicite número por número \n        - Comparar si el número ingresado es el mayor\n        - Detener el ciclo cuando el número ingresado sea 0 o negativo\n    */\n\n    \n    /* Imprimir el número mas grande de la serie ingresada */\n\n\n    return 0;\n}","expectedOutput":"> Introduzca un número: 53.4\n> Introduzca un número: 23\n> Introduzca un número: 17.2\n> Introduzca un número: 60.5\n> Introduzca un número: 58.1\n> Introduzca un número: 43\n> Introduzca un número: 0\n> El número mas grande es 60.50"}]},{"_id":3,"title":"Ciclos: for","content":"Estructura del ciclo for. Significado de cada una de sus sentencias. ¿Cuándo y cómo utilizarlo?","explanation":"El último ciclo de lenguaje C se denomina `for` y su estructura es la siguiente:\n```c\nfor ( /*expresion1*/ ; /*expresion2*/ ; /*expresion3*/)\n{\n    /* Instrucciones */\n}\n```\n - La *expresion1* representa el paso de **inicialización**, el cual se ejecuta *una sola vez* **ANTES** de que el ciclo se empiece a ejecutar\n - La *expresion2* es la **expresión de control**, es decir, se evalúa expresion2 y si resulta verdadero (1) se ejecuta la iteración, de lo contrario se detiene el ciclo\n - La *expresion3* es la operación que se ejecuta al **FINAL** de cada iteración.\n\nEl ciclo `for` se emplea cuando se tiene la certeza de la **cantidad de iteraciones** que se desea tener. Con esto en mente, vamos a crear un ciclo for para imprimir una cuenta regresiva desde 10 hasta 1:\n```c\nint i;\nfor (i = 10; i > 0; i--)\n{\n    printf(\"%d\\n\",i);\n}\n```\nEn la primera línea declaramos la variable que vamos a usar en el ciclo, luego las expresiones del ciclo nos indican:\n\n - Inicializar la variable con un valor de 10 **ANTES** de empezar las iteraciones\n - **Repetir** la instrucción `printf(\"%d\\n\",i);` **mientras** *i* sea mayor que 0  \n - Al **finalizar** cada iteración decrementar el valor de *i* en 1 ","example":{"statement":"Volviendo a nuestro ejemplo de la empresa de envíos, supongamos esta vez que la empresa desea registrar sólo 3 paquetes en lo que resta del día. Vamos a modificar el programa en C para solicitar, calcular y mostrar el volumen, peso volumétrico y costo de envío de solo 3 paquetes. \nAl finalizar el registro de los paquetes se requiere imprimir el mensaje \"Registro de los 3 paquetes completado con éxito\". ","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n\n    /* Declaración de la variable entera que guardará el TIEMPO DE ENTREGA del paquete */\n    int i, tiempo_entrega_dias;\n\n    /* Registrar exactamente 3 paquetes \n        - Iteraciones:\n              i = 0\n              i = 1\n              i = 2\n\n        - Recuerde que al final de cada iteración se aplica la operación ++i, la cual \n        incrementa la i en 1, es decir, equivale a escribir i = i+1\n        - Cuando i = 3 no cumple la condición de i < 3 entonces termina el ciclo.\n    */\n    for (i = 0; i < 3; ++i)\n    {\n        /* Solicitud de cada dimensión */\n        printf(\"Ingrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo del volumen  y peso volumétrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Imprimir en pantalla el volumen y peso volumétrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificación del paquete según su peso volumétrico con IF-ELSE*/\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"\\nIngrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                break;\n        }\n    }\n\n    /* Imprimir mensaje de registro completado */\n    printf(\"\\nRegistro de los 3 paquetes completado con éxito\\n\");\n    \n    return 0;\n}","solutionSteps":["En este caso conocemos exactamente la cantidad de paquetes a registrar (3) por lo que un ciclo for se ajusta a las condiciones del problema.","Creamos la variable entera que manejaremos en el ciclo for, en este caso la llamaremos i. (Línea 9)","En la línea 21 declaramos el ciclo for, sus expresiones indican: primero inicializamos la variable i en 0, segundo repetir el ciclo mientras i sea menor que 3 y por último incrementar el valor de i en 1 al finalizar cada iteración.","Después del ciclo for, fuera del mismo, imprimimos el mensaje que indica haber registrado los 3 paquetes de manera exitosa. (Línea 76)"]},"exercises":[{"statement":"Escriba un programa que imprima la tabla de multiplicar de un número entero ingresado por el usuario. La tabla de multiplicar debe ir desde 1 hasta 10.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias*/\n\n\n    /* Solicitar el número entero */\n\n\n    /* Imprimir la tabla de multiplicar del número ingresado desde 1 a 10 */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese un número entero: 5\n> 1 x 5 = 5\n> 2 x 5 = 10\n> 3 x 5 = 15\n> 4 x 5 = 20\n> 5 x 5 = 25\n> 6 x 5 = 30\n> 7 x 5 = 35\n> 8 x 5 = 40\n> 9 x 5 = 45\n> 10 x 5 = 50"},{"statement":"Se necesita un programa que calcule el factorial de un número entero ingresado por el usuario. \nRecuerde que para calcular el factorial de número, por ejemplo 5, es 5! = 5 * 4 * 3 * 2 * 1 = 120","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias*/\n\n\n    /* Solicitar el número entero */\n    \n\n    /* Calcular el factorial del número ingresado */\n    \n    \n    /* Imprimir el resultado de la forma \"NUMERO! = RESULTADO\" */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese un número entero: 5\n> 5! = 120"},{"statement":"Complete el siguiente programa para imprimir un mes como en un calendario. El usuario ingresa la cantidad de días del mes y el día de la semana en el cual empieza dicho mes.\n\nTip: \n- El programa no es tan difícil como parece. La parte más importante es un ciclo for con la variable i que vaya desde 1 hasta la cantidad de días del mes, imprimiendo cada valor de i. Dentro del ciclo, habrá una sentencia if que evalúe si i es el último día de la semana, de ser así se imprime un salto de línea \\n.\n- Al igual que salto de línea (\\n) existe la opción de imprimir con la función printf una tabulación (\\t)","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias para controlar las iteraciones del ciclo, \n        guardar la cantidad de días que tiene el mes y el primer día de la semana de ese mes */\n\n\n    /* Solicitar la cantidad de días del mes y el primer día (1=Lun, 7=Dom) */\n    \n\n    /* Mostrar la inicial de los días de la semana:\n        Nota: Observe el uso de \\t para imprimir un espacio (tabulación) entre cada inicial, \n                con este \\t todas las letras quedan separadas por el mismo espacio.\n    */\n    printf(\"\\nL\\tM\\tX\\tJ\\tV\\tS\\tD\\n\");\n    \n    /* Imprimir la cantidad de espacios en blanco según el primer día de la semana que ha \n        indicado el usuario */\n    \n\n    /* Imprimir los días de la semana \n        Nota: Recuerde imprimir un salto de linea (\\n) al final de la semana, es decir, cada\n                7 días \n    */\n   \n    \n    return 0;\n}","expectedOutput":"> Ingrese el número de días del mes: 31\n> Ingrese el primer día de la semana (1=Lun, 7=Dom): 6\n>\n> L   M   X   J   V   S   D\n                    1   2   \n> 3   4   5   6   7   8   9   \n> 10  11  12  13  14  15  16  \n> 17  18  19  20  21  22  23  \n> 24  25  26  27  28  29  30  \n> 31"}]},{"_id":4,"title":"Contadores y Acumuladores","content":"Aumentar o disminuir valores progresivamente dentro de los ciclos. Acumular valores y guardarlos en una variable. Operadores abreviados para incrementar, disminuir y acumular valores.","explanation":"Muchas veces, en el cuerpo de los ciclos necesitemos aumentar o disminuir progresivamente algún valor (**contador**) o tal vez sumar valores en alguna variable y mostrar el total al final (**acumulador**), para estos casos existen operadores que nos ayudan a simplificar expresiones. Si tenemos:\n```c\nint i=0;\n```\n - `i++;`    → se usa el valor viejo (0) en la instrucción actual y al finalizar, el operador ++ incrementa en 1 el valor guardado en *i*:\n  - `printf(\"%d\\n\", i++);` → imprime 0\n - `++i;`     → se incrementa en 1 el valor guardado en *i* **ANTES** de ser usado en la instrucción actual:\n  - `printf(\"%d\\n\", ++i);` → imprime 1\n - `i--;`    → se usa el valor viejo (0) en la instrucción actual y al finalizar, el operador `--` decrementa en 1 el valor guardado en *i*\n - `--i;`     → se decrementa en 1 el valor guardado en *i* **ANTES** de ser usado en la instrucción actual\n - `i+=6;`     → el operador `+=` equivale a tomar el valor que hay en *i*, sumarle 6 y guardar el resultado nuevamente en *i*. Con esto podemos crear acumuladores de la forma: `acumulador += nuevoValor;` donde se toma el valor que hay en *acumulador*, se suma el *nuevoValor* y se guarda el resultado nuevamente en la variable *acumulador*.\n - El operador `+=` se aplica de la misma manera con los demás operadores matemáticos `-=`, `*=`, `/=`, `%=`","example":{"statement":"La empresa de envíos Rapidash decide que el precio de un paquete se calcule de acuerdo a su categoría (pequeño, mediano, grande) y al tiempo de entrega elegido por el cliente (1, 2 o 3 días) como se muestra a continuación:\n- Paquete grande: 2196.43\n- Paquete mediano: 1523.86\n- Paquete pequeño: 1018.73\n\n- Tiempo de entrega 1 día: 1250\n- Tiempo de entrega 2 días: 1000\n- Tiempo de entrega 3 días: 300\n\nAsí pues, enviar un paquete mediano en 2 días tendrá un costo de 1523.86 + 1000 = 2523.86. La empresa desea visualizar el costo del envío de cada paquete registrado. También se requiere contar y mostrar la cantidad de paquetes enviados en un día, sumar y mostrar el costo de todos los paquetes enviados.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables necesarias para las dimensiones del paquete, guardar el\n        calculo del costo del paquete actual y del costo total por el envío de los paquetes del día\n    */\n    float alto, largo, ancho, volumen, peso_volumetrico, \n          costo_paquete_actual,\n          costo_total_todos_paquetes = 0.0f; \n\n    /* Declaración de variables enteras \n        - Una para guardar el tiempo de entrega que escoja el cliente\n        - Una para guardar la respuesta a la pregunta ¿Otro paquetes? (1:Si, 0:No)\n        - Una para contar la cantidad de paquetes registrados en el día\n    */\n    int tiempo_entrega_dias, respuesta, cantidad_paquetes = 0;\n\n    /* Registro de paquetes hasta que la respuesta sea 0 (No más paquetes)\n        - Contar cada paquete registrado\n        - Sumar cada costo de un paquete y guardar el resultado en costo_total_todos_paquetes\n    */\n    do{\n        /* Solicitud de cada dimensión */\n        printf(\"Ingrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Calculo del volumen  y peso volumétrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Imprimir en pantalla el volumen y peso volumétrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumétrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificación del paquete según su peso volumétrico con IF-ELSE \n           Cálculo del precio del paquete actual según su categoría\n        */\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n            costo_paquete_actual=2196.43f;\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n                costo_paquete_actual=1523.86f;\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n                costo_paquete_actual=1018.73f;\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario y sumar el costo al costo_paquete_actual\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                costo_paquete_actual+=1250.0f;\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                costo_paquete_actual+=1000.0f;\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                costo_paquete_actual+=300.0f;\n                break;\n        }\n\n        /* Actualizar el contador de paquetes */\n        cantidad_paquetes++;\n\n        /* Actualizar la suma (acumulador) del costo de todos los paquetes registrados */\n        costo_total_todos_paquetes+=costo_paquete_actual;\n\n        /* Mostrar el costo del paquete acutal */\n        printf(\"El envío del paquete #%d es %.2f\\n\", cantidad_paquetes, costo_paquete_actual);\n\n        /* Preguntar si hay otro paquete*/\n        printf(\"\\n¿Hay otro paquete por registrar (1:Si, 0:No)? \\n\");\n        scanf(\"%d\",&respuesta);\n    }while(respuesta == 1);\n\n    /* Imprimir la cantidad de paquetes registrados en el día y costo total por el \n        envío de los mismos */\n    printf(\"\\nHoy se registraron %d paquetes con un costo total de %.2f\\n\",cantidad_paquetes, costo_total_todos_paquetes);\n    \n    return 0;\n}","solutionSteps":["Empezamos por definir el ciclo que manejará las iteraciones del programa, en este caso un ciclo do-while se adapta a los requerimientos.","Declaramos una variable para guardar el costo del envío del paquete que se esté registrando (línea 9), al clasificar el paquete según su peso volumétrico asignamos el costo correspondiente. Luego al definir el tiempo de entrega sumamos el monto al costo del paquete actual.","Declaramos una variable para contar la cantidad de paquetes registrados en un día (línea 17) e incrementamos su valor dentro del ciclo do-while (línea 84).","Declaramos e inicializamos una variable para sumar el costo total de todos los envíos del día (línea 10) y vamos acumulando el costo de cada paquete (línea 87).","Se imprime el costo del paquete actual en cada iteración (línea 90).","Para repetir el proceso de registro de un paquete, preguntamos si hay otro paquete pendiente, guardamos la respuesta (1:Si, 0:No) en una variable entera (declarada en la línea 17) y evaluamos en la condición while: sí la respuesta es igual a 1, entonces se repite el ciclo do-while.","Al finalizar el ciclo do-while (cuando no hay más paquetes) se imprime la cantidad de paquetes registrados en el día y el costo total del envío de los mismo."]},"exercises":[{"statement":"Una ONG se encarga de realizar jornadas de vacunación en las escuelas primarias. Cada día empiezan con 1000 vacunas. Necesitan un programa que controle las entregas realizadas en cada escuela y avise si el inventario baja a menos de 200 unidades para regresar al centro principal y tomar más vacunas. Cuando el inventario se está agotando (menos de 200 vacunas) se debe mostrar cuántas escuelas fueron visitadas y la cantidad de vacunas restantes.\n\nNota: Las escuelas visitadas no van a tener más de 200 alumnos.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n    \n\n    /* Hacer:\n        - Visitar escuelas mientras hayan mas de 200 vacunas el inventario\n        - Contar cada escuela visitada\n        - Actualizar la cantidad de vacunas (disminuir)\n    */\n    \n\n    /* Imprimir la cantidad de vacunas restantes cuando el inventario está bajo */\n    \n\n    /* Imprimir la cantidad de de escuelas visitadas */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese la cantidad de alumnos en la escuela: 200\n> Ingrese la cantidad de alumnos en la escuela: 134\n> Ingrese la cantidad de alumnos en la escuela: 168\n> Ingrese la cantidad de alumnos en la escuela: 200\n> Ingrese la cantidad de alumnos en la escuela: 198\n> Inventario bajo, quedan 100 vacunas\n> En total se visitaron 5 escuelas"},{"statement":"Escriba un programa que permita contar los números pares existentes dentro de un rango ingresado por el usuario. El flujo del programa sería: solicitar al usuario los números enteros (a y b) que delimitan el rango, codificar un ciclo que vaya desde a hasta b, contar y sumar los números pares. Por último mostrar la cantidad de números pares encontrados y la suma de ellos.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n\n\n    /* Solicitar los números enteros que delimitan el rango */\n\n    /* Contruir un ciclo que vaya desde a hasta b \n       Contar la cantidad de números pares que se encuentran dentro del rango\n       Sumar los números pares que se encuentran dentro del rango\n    */\n\n\n    /* Imprimir la cantidad de números pares dentro del rango y la suma de ellos */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese los números enteros que delimitan el rango\n> a: 1\n> b: 10\n> Existen 4 números pares dentro del rango y su suma es 20"},{"statement":"Se requiere un programa en C capaz de registrar temperaturas en ºF. Se necesita transformar cada temperatura a ºC, contar la cantidad de temperaturas positivas y negativas, calcular y mostrar el promedio de las temperaturas positivas y negativas. El programa le permitirá al usuario ingresar tantas temperaturas como sea necesario.\n\nNota: Para transformar una temperatura de ºF a ºC se utiliza la fórmula: °C = (°F  -  32)*5/9.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n\n\n    /* Hacer:\n        - Solicitar cada temperatura en ºF\n        - Transformar la temperatura a ºC\n        - Contar y sumar cada temperatura positiva y negativa por separado\n        - Preguntar si hay otra temperatura por registrar (1:Si, 0:No)\n    */\n    \n\n    /* Imprimir la cantidad de temperaturas positivas y el promedio de ellas en ºC */\n    \n\n    /* Imprimir la cantidad de temperaturas negativas y el promedio de ellas en ºC */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese la temperatura (ºF): 12.4\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 43.5\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 5.67\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 432.1\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 67.45\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 0\n> Existen 3 temperaturas positivas y su promedio es 82.79ºC\n> Existen 2 temperaturas positivas y su promedio es -12.76ºC"}]}]}
{"_id":4,"title":"Unidad VI. Arreglos: vectores y matrices. Strings y operaciones con strings.","lessons":[{"_id":1,"title":"Arreglos: vectores","content":"Definición de arreglos. Declaración de un vector. Condiciones en los arreglos. Acceso a los elementos de un vector. Asignación de valores en un vector.","explanation":"Un arreglo es una estructura que contiene una cantidad X de valores, siendo todos los valores del mismo tipo, estos valores son conocidos como elementos. La forma más simple de un arreglo tiene solo una dimensión y se denomina arreglo unidimensional o vector.\nPara declarar un vector debemos especificar el tipo de dato de los elementos que vamos a guardar y la cantidad de elementos, por ejemplo:\n```c\nint vector[10];\n```\n\n![Visualización de un vector](assets/img/array-image-lesson11.svg \"Arreglos: vectores\")\n\nDe aquí podemos observar:\n\n - Para acceder a un elemento en particular, escribimos el nombre de nuestro vector e indicamos el **índice** al que necesitamos acceder\n - Los índices para acceder a cada elemento *siempre empiezan* por **0**, en este vector de 10 elementos, el primer elemento se accede con el índice 0, el segundo con el índice 1, … y el décimo elemento se accede con el índice 9\n\nEn general si un vector es declarado de tipo `int` entonces cada elemento será tratado como si fuera una variable de tipo `int`, por lo tanto, podemos ejecutar las mismas operaciones que ya hemos aplicado a las variables tipo `int`:\n```c\nint vector[10];\n\n/*Asigna el valor en la quinta \n    posicion (indice 4) de vector */\nvector[4] = 0; \n\n/*Guarda un valor entero en la tercera \n    posicion (indice 2) de vector */\nscanf(\"%d\",&vector[2]);\n\nfor (i = 0; i < 10; i++)\n{\n    /*Imprime en pantalla todos los elementos\n        de vector usando la variable i como\n        indice */\n    printf(\"%d\\n\",vector[i]);\n}\n```","example":{"statement":"El día de hoy, la empresa Rapidash necesita registrar sólo 3 paquetes y guardar el volumen, peso volumétrico y precio de cada uno para ser consultado más adelante. \n\nEl flujo del programa será: registrar los 3 paquetes y guardar su respectiva información, luego mostrar un menú de opciones donde el usuario seleccione el paquete que desea consultar y mostrar el volumen, peso volumétrico y precio de dicho paquete. \n\nUna de las opciones en el menú será \"Salir del sistema\" (opción 0) para finalizar el programa. ","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables de tipo decimal:\n        - 3 variables para guardar dimensiones del paquete actual\n        - 1 vector de 3 posiciones para guardar el volumen de cada paquete \n        - 1 vector de 3 posiciones para guardar el peso volumétrico de cada paquete\n        - 1 vector de 3 posiciones para guardar el precio de cada paquete \n    */\n    float alto, largo, ancho, \n          volumenes[3], \n          pesos_volumetricos[3], \n          precios_paquetes[3]; \n\n    /* Declaración de variables enteras \n        - Una para manejar las iteraciones del ciclo for\n        - Una para guardar el tiempo de entrega que escoja el cliente\n        - Una para asignar la cantidad de paquetes que se registrarán\n        - Una para guardar la opción del menu escogida por el usario\n    */\n    int i, tiempo_entrega_dias, cantidad_paquetes = 3, opcion;\n\n    /* Registro de los 3 paquetes */\n    for(i=0; i<cantidad_paquetes; i++){\n        /* Solicitud de cada dimensión */\n        printf(\"\\nIngrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo y asignación del volumen y peso volumétrico en cada posición de los \n            vectores volumenes y pesos_volumetricos respectivamente */\n        volumenes[i] = alto*largo*ancho;\n        pesos_volumetricos[i] = alto*largo*ancho/5000;\n        \n        /* Clasificación del paquete según su peso volumétrico con IF-ELSE \n           Cálculo del precio del paquete actual segun su categoria\n        */\n        if ( pesos_volumetricos[i] >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n            precios_paquetes[i]=2196.43f;\n        }\n        else{\n            if ( (pesos_volumetricos[i] > 5)&&(pesos_volumetricos[i] < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n                precios_paquetes[i]=1523.86f;\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n                precios_paquetes[i]=1018.73f;\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n            y sumar el costo al vector precios_paquetes[i]\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                precios_paquetes[i]+=1250.0f;\n                break;\n            case 2:\n                precios_paquetes[i]+=1000.0f;\n                break;\n            case 3:\n                precios_paquetes[i]+=300.0f;\n                break;\n        }\n    }\n\n    /* Mostrar el menú de opciones disponibles */\n    printf(\"\\nMenú de opciones\\n\");\n    printf(\"1:Mostrar información del paquete #1\\n\");\n    printf(\"2:Mostrar información del paquete #2\\n\");\n    printf(\"3:Mostrar información del paquete #3\\n\");\n    printf(\"0:Salir del sistema\\n\");\n\n    /* Guardar la opcion */\n    printf(\"-Opción: \");\n    scanf(\"%d\",&opcion);\n\n    while(opcion != 0){\n        /* Mostrar el volumen, peso volumétrico y precio del paquete correspondiente \n            Nota: Recuerde que los índices de un vector comienzan en 0\n        */\n        printf(\"\\n**Información del paquete #%d\\n\", opcion);\n        printf(\"Volumen: %f\\n\", volumenes[opcion-1]);\n        printf(\"Peso volumétrico: %f\\n\", pesos_volumetricos[opcion-1]);\n        printf(\"Precio: %f\\n\", precios_paquetes[opcion-1]);\n\n        /* Solicitar una nueva opción al finalizar cada iteración del ciclo while */\n        printf(\"-Opcion: \");\n        scanf(\"%d\",&opcion);\n    }\n\n    /* Mostrar un mensaje al finalizar el programa*/\n    printf(\"\\nPrograma finalizado correctamente\\n\");\n    \n    return 0;\n}","solutionSteps":["Al saber con certeza la cantidad de paquetes que se van a registrar podemos utilizar un ciclo for, para esto declaramos una variable de tipo entera (variable i declarada en la línea 22) que maneje las iteraciones del ciclo y definimos que el ciclo se repetirá mientras i sea menor que la cantidad de paquetes a registrar (línea 25).","Para guardar el volumen, peso volumétrico y precio de los 3 paquetes vamos a declarar 3 vectores (líneas 12, 13 y 14) que almacenarán en la primera posición los datos correspondientes al primer paquete, en la segunda posición los datos del segundo paquete y en la tercera posición los datos correspondientes al tercer paquete.","En cada iteración del ciclo for calculamos y guardamos el volumen, peso volumétrico y precio de cada paquete en la posición correspondiente, para eso utilizamos la variable i como índice de cada vector (Ejemplo: líneas 37 y 38). ","Al finalizar con el registro de los 3 paquetes mostramos el menú de opciones disponibles para permitir que el usuario indique el paquete que desea imprimir en pantalla. (Líneas 81 - 89)","El menú de opciones estará disponible mientras el usuario ingrese una opción diferente a la de Salir del sistema (Opción 0) por lo que un ciclo while se convierte en el apropiado para este caso. Dentro de este ciclo se muestra la información del paquete seleccionado, usando como índice de cada vector la opción introducida por el usuario restándole 1.","Recordemos que las posiciones de los vectores empiezan en 0, lo que implica que para acceder a la información del primer paquete debemos utilizar el índice 0, para el segundo paquete el índice 1 y para el tercero el índice 2."]},"exercises":[{"statement":"Desarrolle un programa en C para solicitar al usuario 10 números enteros para luego imprimir en pantalla los mismo números pero en orden inverso.\n\nTip: Utilice un ciclo que solicite y guarde los números enteros en un vector y otro ciclo que recorra el mismo vector desde la última posición a la primera para imprimir cada número en orden inverso.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias para las iteraciones de los ciclos y para\n        guardar los diez números */\n\n\n    /* Solicite y guarde los diez números en cada posición del vector declarado */\n\n\n    /* Muestre los números guardados en el vector en orden inverso */\n\n    \n    return 0;\n}","expectedOutput":"> Número: 1\n> Número: 2\n> Número: 3\n> Número: 4\n> Número: 5\n> Número: 6\n> Número: 7\n> Número: 8\n> Número: 9\n> Número: 10\n>\n> Los números en orden inverso son: 10 9 8 7 6 5 4 3 2 1"},{"statement":"Diseñe un programa en lenguaje C que le permita a un usuario ingresar 10 números, luego determinar e informar si\n-La primera posición es positiva.\n-El número de la cuarta posición es impar.\n-La última posición es diferente de cero.\n\nNota: los números siempre serán valores enteros.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias para las iteraciones del ciclo y para\n        guardar los diez números */\n    \n\n    /* Calcule los 38 números restantes de la serie */\n    \n\n    /* Verifique si la primera posición es positiva */\n    \n\n    /* Verifique si el número de la cuarta posición es impar */\n    \n\n\n    /* Verifique si la última posición es diferente de cero */\n    \n    \n    return 0;\n}","expectedOutput":"> Número: -3\n> Número: 2\n> Número: -7\n> Número: 9\n> Número: 5\n> Número: 4\n> Número: 2\n> Número: -2\n> Número: 1\n> Número: 0\n> La primera posición no es positiva\n> La cuarta posición es impar\n> La última posición no es diferente de cero"},{"statement":"Los números de la serie Fibonacci son 0, 1, 1, 2, 3, 5, 8, 13, …, donde cada número es el resultado de la suma de los dos números anteriores. Escriba un programa en C que declare un vector de 40 posiciones llamado numeros_fib y llene el vector con los 40 primeros números de la serie Fibonacci. Para finalizar el programa debe imprimir en pantalla los 40 números de la serie calculados.\n\nTip: Asigne los dos primeros números individualmente en el vector y luego utilice un ciclo para calcular los 38 números restantes de la serie.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias para las iteraciones de los ciclos y para\n        guardar los diez números */\n    \n\n    /* Asignar los dos primeros valores individualmente */\n    \n\n    /* Calcule los 38 números restantes de la serie */\n    \n\n    /* Muestre los números de la serie Fibonacci previamente calculados */\n    \n    \n    return 0;\n}","expectedOutput":"> Los 40 primeros números de la serie Fibonacci son: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986"}]},{"_id":2,"title":"Arreglos: matrices","content":"Declaración e inicialización de una matriz. Acceso a los elementos de una matriz. Recorrer cada elementos de una matriz utilizando el ciclo for.","explanation":"Veamos cómo declarar un arreglo bidimensional o matriz:\n```c\nfloat matriz[5][9];\n```\n Aquí tenemos una matriz de tipo `float`, tiene 5 filas y 9 columnas. Recordemos que los índices de los arreglos comienzan por 0, por lo tanto nuestra matriz luce:\n\n![Visualización de una matriz](assets/img/array-image-lesson14.svg \"Arreglos: matrices\")\n\nPara acceder a un elemento debemos especificar las coordenadas de la forma `matriz[fila][columna]`, es decir, si queremos acceder al elemento ubicado en la fila 3, columna 6, escribimos `matriz[3][6]`\n\nConsideremos por ejemplo, inicializar un arreglo de 5x5 para usar como una matriz identidad\n\n> **Nota:** En matemáticas, la matriz identidad es aquella que tiene 1’s en la diagonal principal (donde el índice de la fila es igual al índice de la columna) y 0’s en el resto de la matriz. Por ejemplo, una matriz identidad de 5x5 se representa de la forma:\n\n![Matriz Identidad](assets/img/identity-array-image-lesson14.svg \"Matriz Identidad\")\n\nNecesitamos visitar cada elemento de la matriz, un par de ciclos `for` resulta perfecto, uno para recorrer cada fila y otro para recorrer cada columna:\n```c\nfor (fila = 0; fila < 10; ++fila)\n{\n    for (columna = 0; columna < 10; ++columna)\n    {\n        // Si estamos en la diagonal principal, asignar valor 1.0f\n        if (fila == columna)\n        {\n            matriz[fila][columna]=1.0f;\n        }else{\n            matriz[fila][columna]=0.0f;\n        }\n    }\n}\n```\nPara inicializar una matriz podemos especificar los elementos de cada fila con la ayuda de `{ }` de la siguiente manera:\n```c\nint matriz[4][6] = {{1,1,0,1,0,1},\n                    {0,0,1,1,0,0},\n                    {0,1,1,0}};\n```\nAl no inicializar algún elemento, este tendrá como valor 0. En este ejemplo las últimas dos columnas de la 3º fila y la 4º fila completa tendrán 0.\n\nTambién podemos *omitir* los `{ }` y escribir todos los elementos separados solo por comas, una vez el compilador encuentre suficientes valores para llenar una fila, empieza con la siguiente:\n```c\nint matriz[4][6] = {1,1,0,1,0,1,\n                    0,0,1,1,0,0,\n                    0,1,1,0};\n```\nDe la misma manera se completan los elementos faltantes con el valor 0.","example":{"statement":"La empresa Rapidash va a recibir dos (2) paquetes por día durante cuatro (4) días y desea registrar el volumen, peso volumétrico, tiempo de entrega y el precio del envío de cada uno. Al finalizar con el proceso de registro de los paquetes se requiere:\n- Calcular y mostrar el volumen promedio de los paquetes durante los cuatro días.\n- Calcular y mostrar el peso volumétrico promedio de los paquetes durante los cuatro días.\n- Calcular y mostrar el precio total de los envíos por día.\n- Calcular y mostrar el precio total de los envíos durante los cuatro días.\n- Calcular y mostrar el precio promedio de los envíos por día.\n- Calcular y mostrar el precio promedio de los envíos durante los cuatro días.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables de tipo decimal:\n        - 3 variables para guardar dimensiones del paquete actual\n        - 1 matriz de tipo decimal para guardar el volumen de dos (2) paquetes \n            por día durante cuatro (4) días \n        - 1 matriz de tipo decimal para guardar el peso volumétrico de dos (2) paquetes \n            por día durante cuatro (4) días\n        - 1 matriz de tipo decimal para guardar el costo de envío de dos (2) paquetes \n            por día durante cuatro (4) días\n        - Las variables necesarias para mostrar las estadísticas solicitadas (promedios)\n    */\n    float alto, largo, ancho, \n          volumenes[4][2], \n          pesos_volumetricos[4][2], \n          precios[4][2],\n          volumen_promedio=0.0f,\n          peso_volumetrico_promedio=0.0f,\n          precio_total_por_dia=0.0f,\n          precio_total=0.0f;\n\n\n    /* Declaración de variables enteras \n        - 1 matriz para guardar el tiempo de entrega de dos (2) paquetes \n            por día durante cuatro (4) días\n        - Una para indicar la cantidad de días\n        - Una para indicar la cantidad de paquetes a registrar por días\n        - Una para recorrer las filas de la matriz 'precios' en un ciclo for\n        - Una para recorrer las columnas de la matriz 'precios' en un ciclo for\n    */\n    int tiempo_entrega_dias[4][2], cantidad_dias=4, paquetes_por_dia=2, filas=0, columnas=0;\n\n    /* Registrar los 8 paquetes (2 paquetes por día durante 4 días)*/\n\n    /* Ciclo que maneja las filas de la matriz 'precios', en nuestro caso la matriz \n        tiene 4 filas que representan la cantidad de días */\n    for(filas=0; filas<cantidad_dias; filas++){\n\n        printf(\"Ingrese los paquetes del día #%d\\n\",filas+1);\n        \n        /* Ciclo que maneja las columnas de la matriz 'precios', en nuestro caso la matriz\n            tiene 2 columnas que representan la cantidad de paquetes a registrar por día */\n        for (columnas = 0; columnas < paquetes_por_dia; columnas++)\n        {\n            /* Solicitud de cada dimensión */\n            printf(\"**Paquete %d\\n\",columnas+1);\n            printf(\"-Alto:\");\n            scanf(\"%f\",&alto);\n            printf(\"-Largo:\");\n            scanf(\"%f\",&largo);\n            printf(\"-Ancho:\");\n            scanf(\"%f\",&ancho);\n\n            /* Cálculo y asignación del volumen y peso volumétrico en cada posición de las \n                matrices volumenes y pesos_volumetricos respectivamente */\n            volumenes[filas][columnas] = alto*largo*ancho;\n            pesos_volumetricos[filas][columnas] = alto*largo*ancho/5000;\n            \n            /* Categoría y precio según el peso volumétrico de un paquete */\n            if ( pesos_volumetricos[filas][columnas] >= 10.0f )\n            {\n                printf(\"El paquete es grande\\n\");\n                precios[filas][columnas] = 2196.43f;\n            }\n            else{\n                if ( (pesos_volumetricos[filas][columnas] > 5)&&(pesos_volumetricos[filas][columnas] < 10.0f) )\n                {\n                    printf(\"El paquete es mediano\\n\");\n                    precios[filas][columnas] = 1523.86f;\n                }\n                else{\n                    printf(\"El paquete es pequeño\\n\");\n                    precios[filas][columnas] = 1018.73f;\n                }  \n            }\n\n            /* Solicitud del tiempo de entrega */\n            printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3): \");\n            scanf(\"%d\",&tiempo_entrega_dias[filas][columnas]);\n\n            /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n                y sumar el costo a la matriz precios[filas][columnas]\n             */\n            switch(tiempo_entrega_dias[filas][columnas]){\n                case 1:\n                    precios[filas][columnas] += 1250.0f;\n                    break;\n                case 2:\n                    precios[filas][columnas] += 1000.0f;\n                    break;\n                case 3:\n                    precios[filas][columnas] += 300.0f;\n                    break;   \n            }\n\n        }\n\n    }\n\n    /* Calcular las estadísticas solicitadas en el enunciado */\n    printf(\"\\nDatos estadisticos de los envios registrados\\n\\n\");    \n    for(filas=0; filas<cantidad_dias; filas++){\n        \n        /* Reiniciar la variable precio_total_por_dia al empezar un nuevo día (ciclo de las filas) */\n        precio_total_por_dia=0.0f;\n        for (columnas = 0; columnas < paquetes_por_dia; columnas++)\n        {\n            volumen_promedio+=volumenes[filas][columnas];\n            peso_volumetrico_promedio+=pesos_volumetricos[filas][columnas];\n\n            precio_total_por_dia+=precios[filas][columnas];\n        }\n\n        /* Mostrar las estadísticas requeridas por día */\n        printf(\"Precio total del día #%d: %.2f\\n\", filas+1,precio_total_por_dia);\n        printf(\"Precio promedio del día #%d: %.2f\\n\\n\", filas+1,precio_total_por_dia/cantidad_dias);\n\n        precio_total+=precio_total_por_dia;\n    }\n\n    /* Mostrar precio total y precio promedio durante los 4 días */\n    printf(\"Volumen promedio de los 4 días: %.2f\\n\", volumen_promedio/(cantidad_dias*paquetes_por_dia));\n    printf(\"Peso volumétrico promedio de los 4 días: %.2f\\n\", peso_volumetrico_promedio/(cantidad_dias*paquetes_por_dia));\n    printf(\"Precio total de los 4 días: %.2f\\n\", precio_total);\n    printf(\"Precio promedio de los 4 días: %.2f\\n\", precio_total/(cantidad_dias*paquetes_por_dia));\n    \n    return 0;\n}","solutionSteps":["Declaramos las matrices necesarias para guardar el volumen, peso volumétrico, tiempo de entrega y precio del envío de cada paquete registrado, todas de tipo decimal menos el tiempo de entrega, el cual es de tipo entero. Todas las matrices tienen como dimensiones 4 filas y 2 columnas, representando los 4 días y 2 paquetes por día respectivamente.","Creamos dos ciclos for anidados para recorrer las filas y columnas de cada matriz. Las iteraciones del ciclo externo hacen referencia a los 4 días y las del ciclo interno a los 2 paquetes por día. De esta manera iremos registrando los dos paquetes del día 1, luego del día 2, después del día 3 y por último del día 4.","Recordemos que para acceder a los elementos de un arreglo utilizamos índices (comenzando en 0), por lo tanto, para guardar cada valor en las matrices lo hacemos dentro de los ciclos for y de la forma [filas][columnas]; por ejemplo, para guardar los valores del segundo paquete del tercer día los índices serán [2][1].","Luego, para calcular y mostrar los datos solicitados en el enunciado debemos recorrer nuevamente las matrices que contienen la información de cada paquete e ir acumulando los valores necesarios. Por ejemplo, para calcular el volumen promedio durante los 4 días, sumamos el volumen de cada uno de los paquetes (línea 155) y una vez finalizados los ciclos dividimos la sumatoria entre la cantidad de paquetes registrados en los 4 días (línea 169)."]},"exercises":[{"statement":"Escriba un programa que llene una matriz entera de dimensión 3x3 y muestre su transpuesta. La matriz transpuesta se obtiene al intercambiar filas por columnas ordenadamente.\n\nObserve el siguiente ejemplo, donde A es la matriz original y T es la matriz transpuesta de A:\n\nA \n2----3----0          \n1----2----0              \n3----5----6              \n\nT \n2----1----3\n3----2----5\n0----0----6","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las matrices: inicial y transpuesta, de dimensiones 3x3 */\n    \n\n    /* Solicitar los valores de la matriz inicial */\n    \n\n    /* Hallar la matriz transpuesta */\n    \n\n    /* Mostrar la matriz inicial junto a la matriz transpuesta */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese los valores de la matriz inicial (por filas)\n> Fila #1\n>  *Columna #1: 1\n>  *Columna #2: 2\n>  *Columna #3: 3\n> Fila #2\n>  *Columna #1: 4\n>  *Columna #2: 5\n>  *Columna #3: 6\n> Fila #3\n>  *Columna #1: 7\n>  *Columna #2: 8\n>  *Columna #3: 9\n>\n> **Matriz inicial**       \n> 1    2    3                       \n> 4    5    6                       \n> 7    8    9      \n>              \n> **Matriz transpuesta**\n> 1    4    7 \n> 2    5    8 \n> 3    6    9"},{"statement":"Diseñe un programa en C que registre la ocurrencia de cada dígito en un número entero. De esta manera, si un usuario ingresa el número 2327 se debe mostrar que el dígito 2 tiene dos ocurrencias, los dígitos 3 y 7 tiene una y los demás no tienen ninguna ocurrencia. Mostrar estas ocurrencias en una tabla de la forma:\n0    1    2    3    4    5    6    7    8    9\n0    0    2    1    0    0    0    1    0    0","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias (Tip: solo necesita variables de tipo int) */\n    \n\n    /* Solicitar el número entero */\n    \n\n    /* Dividir el número dígito a dígito e ir marcando la ocurrencia de cada dígito */\n    \n\n    /* Imprimir en pantalla cada dígito junto a su ocurrencia */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese un numero entero: 43827723\n> Ocurrencias:\n> 0    1    2    3    4    5    6    7    8    9    \n> 0    0    2    2    1    0    0    2    1    0"},{"statement":"Una empresa acaba de adquirir una nueva máquina de secado y necesita estudiar el comportamiento de la misma para encontrar su configuración ideal. Para esto la empresa desea llevar el registro de temperaturas durante tres (3) días. Cada día se tomará la temperatura dos (2) veces. Escriba un programa que permita guardar las temperaturas de estos días, calcular el promedio de cada día y el promedio de estos tres días.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables de tipo decimal:\n        - 1 matriz para guardar las dos lecturas de los tres días a evaluar\n        - 1 vector de 3 posiciones para guardar el volumen de cada paquete \n        - 1 vector de 3 posiciones para guardar el peso volumétrico de cada paquete\n        - 1 vector de 3 posiciones para guardar el precio de cada paquete \n    */\n    \n\n    /* Declaración de variables enteras \n        - Una para recorrer las filas de la matriz en un ciclo for\n        - Una para recorrer las columnas de la matriz en un ciclo for\n        - Una para guardar la cantidad de días a evaluar\n        - Una para guardar las lecturas de temperatura por día\n    */\n\n\n    /* Registrar las temperaturas */\n    \n\n    /* Calcular y mostrar el promedio de temperaturas por día y durante los tres días*/\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese las temperatura del dia #1\n> 1º: 32.3\n> 2º: 41.5\n>\n> Ingrese las temperatura del dia #2\n> 1º: 34.2\n> 2º: 54.6\n>\n> Ingrese las temperatura del dia #3\n> 1º: 12.3\n> 2º: 24.5\n> La temperatura promedio del 1º dia es 36.90\n> La temperatura promedio del 2º dia es 44.40\n> La temperatura promedio del 3º dia es 18.40\n> La temperatura promedio de los tres días es 66.47"}]},{"_id":3,"title":"Strings","content":"Declaración de strings. Asignación de valores en un string. Imprimir en la consola strings con printf y puts. Leer y guardar valores en un string con scanf y gets.","explanation":"Para crear y utilizar una cadena de caracteres (*string*) en lenguaje C, usamos dos características que ya vimos: tipo de dato `char` (caracter) y un vector (arreglo unidimensional). Digamos que necesitamos un variable capaz de almacenar un máximo(puede ser menos) de 10 caracteres:\n```c\nchar mes[11];\n```\nLenguaje C agrega caracteres null (representado por `\\0`) para marcar el final de la cadena, es por esto que creamos la variable mes con un espacio adicional a los 10 que se requieren. \nPodemos inicializar nuestro *string* en la misma instrucción de declaración:\n```c\nchar mes[11]=\"Octubre\";\n```\n\n![Visualización de un string](assets/img/strings-image-lesson12.svg \"Strings\")\n\nTambién es posible declarar un string sin precisar su tamaño, en este caso el compilador se encarga de calcularlo:\n```c\nchar mes[]=\"Septiembre\";\n```\nPara imprimir en pantalla un *string* con la función `prinft`, usamos `%s` para marcar dónde queremos que vaya el contenido de la variable:\n```c\nprintf(\"Mes: %s\\n\",mes);\n```\nPara leer y guardar una cadena de caracteres en nuestra variable string, podemos usar la función `scanf`:\n```c\nscanf(\"%s\",mes);\n```\nLa función `scanf` omite los espacios en blanco, es decir, lee y guarda cada caracter hasta que encuentra un espacio en blanco (también se omiten los espacios en blanco que pueda haber antes de los caracteres)\n\nExisten otras dos funciones para imprimir y leer strings:\n```c\nfgets(mes, 11, stdin);\nputs(mes);\n```\nLa función `fgets` recibe 3 parámetros: la **variable** string donde se guardará la data, el **tamaño** de esta variable y de dónde conseguirá la data (**`stdin`** hace referencia a la entrada de datos que ya conocemos, la consola). La principal diferencia de `fgets` es que no omite los espacios en blanco al leer una cadena de caracteres. Por su parte, `puts` solo imprime strings (cadena de caracteres) y siempre agrega el caracter de nueva línea \\n al final de la impresión. \n\nComo un string es un vector de caracteres, podemos acceder a cada caracter, es decir, a cada elemento a través de un índice de la siguiente manera:\n```c\n/* Obtener el cuarto caracter de la variable mes*/\nchar c = mes[3];\n\n/* Imprimir caracter por caracter de la variable mes */\nprintf(\"Deletreo: \\n\");\nfor (int i = 0; i < 11; ++i)\n{\n    printf(\"- %c\\n\", mes[i]);\n}\n```","example":{"statement":"Se necesita complementar el programa de la empresa Rapidash para solicitar al usuario la ciudad de origen y destino del paquete, permitiendo corregirlas si no fueron ingresadas correctamente. \n\nPara este ejemplo se le preguntará al usuario la cantidad de paquetes que desea registrar, se solicitan las dimensiones de cada paquete y el tiempo de entrega para calcular el volumen, peso volumétrico y precio del mismo. Luego se solicita la ciudad de origen y destino del paquete permitiendo que que el usuario corrija las ciudades en caso de indicar que no ha sido ingresadas correctamente. \n\nDespués de solicitar y calcular toda la información de un paquete se debe mostrar un resumen del envío de la forma: El paquete #NUMERO con volumen VOLUMEN y peso volumétrico PESO_VOLUMETRICO será enviado desde CIUDAD_ORIGEN hasta CIUDAD_DESTINO con un costo de PRECIO","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaración de las variables de tipo decimal:\n        - 3 variables para guardar dimensiones del paquete actual\n        - 1 vector de 3 posiciones para guardar el volumen de cada paquete \n        - 1 vector de 3 posiciones para guardar el peso volumétrico de cada paquete\n        - 1 vector de 3 posiciones para guardar el precio de cada paquete \n    */\n    float alto, largo, ancho, \n          volumenes[3], \n          pesos_volumetricos[3], \n          precios_paquetes[3]; \n\n    /* Declaración de variables string para guardar la ciudad de origen y destino de\n        un paquete */\n    char ciudad_origen[31], ciudad_destino[31];\n\n    /* Declaración de variables enteras \n        - Una para manejar las iteraciones del ciclo for\n        - Una para guardar el tiempo de entrega que escoja el cliente\n        - Una para manejar la respuesta de si las ciudades introducidas son correctas o no (1:Si, 0:No)\n        - Una para guardar la cantidad de paquetes que desea registrar el usario\n    */\n    int i, tiempo_entrega_dias, opcion, cantidad_paquetes;\n\n    /* Solicitar la cantidad de paquetes que se desea registrar */\n    printf(\"Cantidad de paquetes a ingresar: \");\n    scanf(\"%d\",&cantidad_paquetes);\n\n    /* Registro de cantidad indicada de paquetes */\n    for(i=0; i<cantidad_paquetes; i++){\n        /* Solicitud de cada dimensión */\n        printf(\"\\nIngrese las dimensiones del paquete #%d\\n\",i+1);\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo y asignación del volumen y peso volumétrico en cada posición de los \n            vectores volumenes y pesos_volumetricos respectivamente */\n        volumenes[i] = alto*largo*ancho;\n        pesos_volumetricos[i] = alto*largo*ancho/5000;\n        \n        /* Clasificación del paquete segun su peso volumétrico con IF-ELSE \n           Cálculo del precio del paquete actual segun su categoría\n        */\n        if ( pesos_volumetricos[i] >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n            precios_paquetes[i]=2196.43f;\n        }\n        else{\n            if ( (pesos_volumetricos[i] > 5)&&(pesos_volumetricos[i] < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n                precios_paquetes[i]=1523.86f;\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n                precios_paquetes[i]=1018.73f;\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n            y sumar el costo al vector precios_paquetes[i]\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                precios_paquetes[i]+=1250.0f;\n                break;\n            case 2:\n                precios_paquetes[i]+=1000.0f;\n                break;\n            case 3:\n                precios_paquetes[i]+=300.0f;\n                break;\n        }\n\n        /* Solicitar y verficar la ciudad de origen y destino del paquete */\n        do{\n            printf(\"¿Cuál es la ciudad de origen? \");\n            scanf(\"%s\",ciudad_origen);\n\n            printf(\"¿Cuál es la ciudad de destino? \");\n            scanf(\"%s\",ciudad_destino);\n\n            printf(\"¿Las ciudades introducidas son correctas (1:Si, 0:No)? \");\n            scanf(\"%d\",&opcion);\n        }while(opcion!=1);\n\n        /* Mostrar mensaje resumen del envio del paquete*/\n        printf(\"El paquete #%d con volumen %.2f y peso volumétrico %.2f será enviado desde %s hasta %s con un costo de %.2f\\n\", \n            i+1, volumenes[i], pesos_volumetricos[i], ciudad_origen, \n            ciudad_destino, precios_paquetes[i]);\n    }\n\n    /* Mostrar un mensaje al finalizar el programa*/\n    printf(\"\\nPaquetes registrados correctamente\\n\");\n    \n    return 0;\n}","solutionSteps":["Declaramos las variables de tipo string con disponibilidad de 30 caracteres donde se guardará la ciudad de origen y destino respectivamente. (Línea 18)","Solicitamos la cantidad de paquetes que desea ingresar el usuario y creamos un ciclo for para repetir la solicitud y cálculo de la información de cada paquete como se ha realizado en lecciones anteriores.","Para la solicitud de las ciudades utilizamos el ciclo do-while, porque nos permite guardar y verificar las ciudades mientras el usuario indique que las ingresadas no son correctas (Líneas 88 - 97).","Una vez guardadas las ciudades de manera correcta mostramos un mensaje resumiendo todos los datos del paquete actual."]},"exercises":[{"statement":"Escriba un programa en lenguaje C que solicite una palabra de 10 caracteres a un usuario, guarde la palabra en una variable de tipo string e imprima las posiciones de la misma que contienen una vocal.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar la variable string para guardar el palabra del usuario */\n    \n\n    /* Solicitar la palabra que desea revisar */\n    \n\n    /* Recorrer la variable que guarda el palabra caracter por caracter para \n        validar e informar las posiciones que contienen una vocal */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese su palabra: caracteres\n> En la posición 2 se encuentra la vocal a\n> En la posición 4 se encuentra la vocal a\n> En la posición 7 se encuentra la vocal e\n> En la posición 9 se encuentra la vocal e"},{"statement":"Diseñe un programa en C para permitir que el usuario ingrese una oración de máximo 50 caracteres, luego el usuario indicará qué parte de la oración desea imprimir a través de índices. Estos índices son números enteros que indican el inicio y fin de la porción de la oración que desea imprimir.\n\nNota: Recuerde que la función scanf omite los espacios en blanco de una oración, por lo que es conveniente que utilice la función fgets para guardar la oración ingresada por el usuario.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias guardar el oración del usuario y los valores \n        que señalan el inicio y final de la porción que desea imprimir */\n    \n\n    /* Solicitar la oración que desea revisar */\n    \n\n    /* Imprimir los caracteres que se encuentran dentro del rango inicio-final \n        de la oración */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese su oración: Con AprendaC aprendemos practicando\n>\n> Índices de la porción que desea imprimir (1-n)\n> Inicio: 5\n> Final: 12\n>\n> La porción de oración indicada es: AprendaC"},{"statement":"Desarrolle un programa en C que permita ingresar una oración y reemplazar todas las vocales por el caracter 'a' en toda la oración. Por último se debe imprimir la oración después del proceso de reemplazo. \n\nNota: \n- La oración tendrá un máximo de 30 caracteres.\n- Recuerde utilizar la función fgets para leer oraciones","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar la variable string para guardar el oración ingresada */\n    \n\n    /* Solicitar la oración que desea procesar (usando fgets) */\n    \n\n    /* Recorrer y reemplazar en la oración las vocales por el caracter 'a' */\n    \n    \n    /* Imprimir la oración después de reemplazar  */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese la oración: Practicando C Aprende\n        \n> La oración resultante es: Practacanda C Apranda"}]},{"_id":4,"title":"Operaciones con strings (strcpy, strlen, strcat y strcmp)","content":"Librería string.h. Copiar strings, calcular la longitud de un string, concatenar strings y comparar strings.","explanation":"Los arreglos tienen algunas restricciones, por ejemplo, no es posible copiar un arreglo en otro con el operador de asignación `=`, ni comparar si dos vectores son iguales con el operador `==` \n### ERROR\n```c\nchar string1[10] = \"cadena 1\";\nchar string2[10];\nstring2 = string1;\n```\n### ERROR\n```c\nif(string1 == string2)...\n```\nAfortunadamente, en C tenemos la librería `string.h` que nos proporciona funciones para conseguir lo que necesitamos:\n\n- strcpy → `strcpy(string2, string1);` \n  - **Copia** el contenido de la variable *string1* en la variable *string2*\n    \n    ```c\n    char string1[10] = \"prueba\",\n         string2[10];\n    strcpy(string2,string1);\n    // string2 = \"prueba\"\n    ```\n- strlen → `strlen(string);` \n  - Calcula y devuelve la **longitud** (`int`) de la variable *string*\n    \n    ```c\n    char cadena[10] = \"prueba\";\n    int longitud = strlen(cadena);\n    // longitud = 6\n    ```\n- strcat → `strcat(string1, string2);` \n  - **Añade** el contenido de la variable *string2* al final del contenido en la variable *string1*\n    \n    ```c\n    char cadena1[20] = \"¡Hola \",\n         cadena2[10] = \"mundo!\";\n    strcat(cadena1, cadena2);\n    // cadena1 = \"¡Hola mundo!\"\n    ```\n- strcmp → `strcmp(string1, string2);` \n  - **Compara** las cadenas de caracteres *string1* y *string2*, devuelve un valor menor que, igual que o mayor que 0 si string1 es menor que, igual que o mayor que string2\n    \n    ```c\n    if (strcmp(cadena1,cadena2) == 0)\n        // cadena1 es igual que cadena2 ??\n    \n    if (strcmp(cadena1,cadena2) < 0)\n        // cadena1 es menor que cadena2 ??\n    \n    if (strcmp(cadena1,cadena2) > 0)\n        // cadena1 es mayor que cadena2 ??\n    ```","example":{"statement":"Continuando con el ejemplo de la lección anterior, la empresa Rapidash ahora desea al momento de registrar el envío de un paquete, solicitar el correo electrónico del usuario dos veces con la intención de confirmar el mismo.  ","code":"#include <stdio.h> \n#include <string.h> \n\nint main()\n{\n    /* Declaración de las variables de tipo decimal:\n        - 3 variables para guardar dimensiones del paquete actual\n        - 1 matriz de tipo decimal para guardar el volumen de dos (2) paquetes \n            por día durante cuatro (4) días \n        - 1 matriz de tipo decimal para guardar el peso volumétrico de dos (2) paquetes \n            por día durante cuatro (4) días\n        - 1 matriz de tipo decimal para guardar el costo de envío de dos (2) paquetes \n            por día durante cuatro (4) días\n        - Las variables necesarias para mostrar las estadísticas solicitadas (promedios)\n    */\n    float alto, largo, ancho, \n          volumenes[4][2], \n          pesos_volumetricos[4][2], \n          precios[4][2],\n          volumen_promedio=0.0f,\n          peso_volumetrico_promedio=0.0f,\n          precio_total_por_dia=0.0f,\n          precio_total=0.0f;\n\n\n    /* Declaración de variables enteras \n        - 1 matriz para guardar el tiempo de entrega de dos (2) paquetes \n            por día durante cuatro (4) días\n        - Una para indicar la cantidad de días\n        - Una para indicar la cantidad de paquetes a registrar por días\n        - Una para recorrer las filas de la matriz 'precios' en un ciclo for\n        - Una para recorrer las columnas de la matriz 'precios' en un ciclo for\n    */\n    int tiempo_entrega_dias[4][2], cantidad_dias=4, paquetes_por_dia=2, filas=0, columnas=0;\n\n    /* Registrar los 8 paquetes (2 paquetes por día durante 4 días)*/\n\n    /* Ciclo que maneja las filas de la matriz 'precios', en nuestro caso la matriz \n        tiene 4 filas que representan la cantidad de días */\n    for(filas=0; filas<cantidad_dias; filas++){\n\n        printf(\"\\nIngrese los paquetes del día #%d\\n\",filas+1);\n        \n        /* Ciclo que maneja las columnas de la matriz 'precios', en nuestro caso la matriz\n            tiene 2 columnas que representan la cantidad de paquetes a registrar por día */\n        for (columnas = 0; columnas < paquetes_por_dia; columnas++)\n        {\n            /* Solicitud de cada dimension */\n            printf(\"**Paquete %d\\n\",columnas+1);\n            printf(\"-Alto:\");\n            scanf(\"%f\",&alto);\n            printf(\"-Largo:\");\n            scanf(\"%f\",&largo);\n            printf(\"-Ancho:\");\n            scanf(\"%f\",&ancho);\n\n            /* Calculo y asignación del volumen y peso volumétrico en cada posición de las \n                matrices volumenes y pesos_volumetricos respectivamente */\n            volumenes[filas][columnas] = alto*largo*ancho;\n            pesos_volumetricos[filas][columnas] = alto*largo*ancho/5000;\n            \n            /* Categoría y precio según el peso volumétrico de un paquete */\n            if ( pesos_volumetricos[filas][columnas] >= 10.0f )\n            {\n                printf(\"El paquete es grande\\n\");\n                precios[filas][columnas] = 2196.43f;\n            }\n            else{\n                if ( (pesos_volumetricos[filas][columnas] > 5)&&(pesos_volumetricos[filas][columnas] < 10.0f) )\n                {\n                    printf(\"El paquete es mediano\\n\");\n                    precios[filas][columnas] = 1523.86f;\n                }\n                else{\n                    printf(\"El paquete es pequeño\\n\");\n                    precios[filas][columnas] = 1018.73f;\n                }  \n            }\n\n            /* Solicitud del tiempo de entrega */\n            printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3): \");\n            scanf(\"%d\",&tiempo_entrega_dias[filas][columnas]);\n\n            /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n                y sumar el costo a la matriz precios[filas][columnas]\n             */\n            switch(tiempo_entrega_dias[filas][columnas]){\n                case 1:\n                    precios[filas][columnas] += 1250.0f;\n                    break;\n                case 2:\n                    precios[filas][columnas] += 1000.0f;\n                    break;\n                case 3:\n                    precios[filas][columnas] += 300.0f;\n                    break;\n            }\n\n            /* Solicitar y confirmar el correo electrónico del usuario */\n            char correo[40], confirmacion_correo[40];\n\n            do{\n                printf(\"Ingrese el correo electrónico: \");\n                scanf(\"%s\",correo);\n                printf(\"Confirmación del correo electrónico: \");\n                scanf(\"%s\",confirmacion_correo);\n            }while(strcmp(correo,confirmacion_correo)!=0);\n        }\n\n    }\n\n    /* Calcular las estadísticas solicitadas en el enunciado */\n    printf(\"\\nDatos estadisticos de los envios registrados\\n\\n\");    \n    for(filas=0; filas<cantidad_dias; filas++){\n        \n        /* Reiniciar la variable precio_total_por_dia al empezar un nuevo día (ciclo de las filas) */\n        precio_total_por_dia=0.0f;\n        for (columnas = 0; columnas < paquetes_por_dia; columnas++)\n        {\n            volumen_promedio+=volumenes[filas][columnas];\n            peso_volumetrico_promedio+=pesos_volumetricos[filas][columnas];\n\n            precio_total_por_dia+=precios[filas][columnas];\n        }\n\n        /* Mostrar las estadísticas solicitadas por día */\n        printf(\"Precio total del día #%d: %.2f\\n\", filas+1,precio_total_por_dia);\n        printf(\"Precio promedio del día #%d: %.2f\\n\\n\", filas+1,precio_total_por_dia/cantidad_dias);\n\n        precio_total+=precio_total_por_dia;\n    }\n\n    /* Mostrar precio total y precio promedio durante los 4 días */\n    printf(\"Volumen promedio de los 4 días: %.2f\\n\", volumen_promedio/(cantidad_dias*paquetes_por_dia));\n    printf(\"Peso volumétrico promedio de los 4 días: %.2f\\n\", peso_volumetrico_promedio/(cantidad_dias*paquetes_por_dia));\n    printf(\"Precio total de los 4 días: %.2f\\n\", precio_total);\n    printf(\"Precio promedio de los 4 días: %.2f\\n\", precio_total/(cantidad_dias*paquetes_por_dia));\n    \n    return 0;\n}","solutionSteps":["Recordemos incluir la librería string.h para tener acceso a la función que nos permite comparar strings. (Línea 2)","Creamos una función para solicitar y confirmar el correo electrónico del usuario (Línea 81), dentro de esta función declaramos dos variables strings para guardar el correo y la confirmación del correo respectivamente. Luego, utilizando un ciclo do-while solicitamos y verificamos el correo electrónico ingresado por el usuario hasta que ambos coinciden.","Finalmente llamamos la función dentro del ciclo que solicita los datos de cada paquete. (Línea 163)"]},"exercises":[{"statement":"Diseñe un programa que solicite al usuario el nombre completo de un archivo para separar y mostrar el nombre y la extensión del mismo. Ejemplo: si el usuario ingresa ‘notas.txt’ el programa deberá guardar ‘notas’ en una variable llamada NOMBRE y ‘txt’ en una variable llamada EXTENSION.\n\nNota: El nombre del archivo completo no tendrá más de 40 caracteres.","code":"#include <stdio.h> \n#include <string.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n    \n\n    /* Solicitar el nombre del archivo completo (con extensión incluida) */\n    \n\n    /* Extraer y guardar el nombre y la extensión del archivo en dos variables de tipo string */\n    \n\n    /* Mostrar el nombre y la extensión del archivo */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese el nombre del archivo: hola.txt\n> Nombre: hola\n> Extension: txt"},{"statement":"Escriba un programa en C que permita construir la dirección de una página web con base en el dominio y archivo principal indicado por el usuario, es decir, el usuario ingresa dominio.com e index.html y el programa debe construir la url completa de la forma https://dominio.com/index.html. \n\nNota: Tanto el dominio como el nombre del archivo principal no tendrán más de 40 caracteres.","code":"#include <stdio.h> \n#include <string.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n    \n\n    /* Solicitar el dominio y el nombre del archivo principal */\n    \n\n    /* Construir la URL completa */\n    \n\n    /* Mostrar la URL completa */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese el dominio: aprendac.com\n> Ingrese el nombre del archivo principal: index.html\n> Url: https://aprendac.com/index.html"},{"statement":"Desarrolle un programa que encuentre la palabra más pequeña y más grande en una serie de palabras, es decir, después de que el usuario ingresa las palabras, el programa determinará cuál palabra se encuentra primero y cuál se encuentra de última si se listaran en orden alfabético. El programa se detendrá cuando el usuario ingrese una palabra de 4 letras. \n\nNota:\n-Asuma que ninguna palabra tiene más de 20 caracteres\n-Utilice dos string para llevar un registro de la palabra más pequeña y más grande introducida hasta el momento. \n-Cada vez que el usuario ingrese una palabra, compare si ésta es menor que la más pequeña registrada hasta los momentos, de ser así, copie la nueva palabra en la variable correspondiente.","code":"#include <stdio.h> \n#include <string.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n    \n\n    /* Solicitar palabras hasta que la palabra introducida tenga 4 letras */\n    \n    \n    /* Mostrar la palabra más pequeña y la más grande */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese una palabra: dos\n> Ingrese una palabra: zapato\n> Ingrese una palabra: rueda\n> Ingrese una palabra: cambio\n> Ingrese una palabra: estado\n> Ingrese una palabra: gato\n>\n> Palabra más pequeña: cambio\n> Palabra más grande: zapato"}]}]}
{"_id":5,"title":"Unidad V. Funciones, estructuras y punteros","lessons":[{"_id":1,"title":"Funciones","content":"Definición y uso de una función. Estructura de una función en lenguaje C. Llamado de una función.","explanation":"Una función es una serie de instrucciones agrupadas por los signos `{ }`, tiene un nombre y pueden o no, retornar un valor. Las funciones nos permiten dividir nuestro programa en piezas pequeñas más fácil de modificar y reutilizar bloques de código, es decir, escribimos la función una vez y la usamos las veces necesarias.\n\nSi en nuestro programa debemos calcular en varias oportunidades el promedio de dos números, podemos escribir una función para calcular y retornar el promedio:\n```c\nint promedio(int valor1, int valor2)\n{    \n    int promedio;\n    promedio = (valor1+valor2)/2;\n    return promedio;\n}\n```\n - Se define el tipo de dato que retorna la función, en este caso es `int`. Puede ser cualquier tipo de dato (`float`, `char`, etc) y en caso de no retornar ningún valor, será de tipo `void` (vacío).\n - Se escoge el nombre de la función (*promedio*)\n - Las funciones pueden recibir *parámetros o argumentos*, ubicados dentro de los `( )` y separados por coma `,`. Debemos especificar el tipo de datos de cada parámetro. En este caso los valores recibidos serán guardados en las variables *valor1* y *valor2* respectivamente, con ellas podemos realizar las operaciones que hemos aplicado a variables de tipo `int`.\n - Se escriben las instrucciones que queremos que se ejecuten al llamar a esta función. En este caso se declara la variable *promedio* y se le asigna el valor resultante de la expresión `(valor1+valor2)/2`\n - Se retorna el valor de la variable promedio, notemos que esta variable es del mismo tipo que especificamos al declarar la función, es decir, `int`.\n - Las funciones se declaran **antes** de la función principal `main`\n\nPara llamar la función escribimos el nombre de la función seguido de los parámetros que requiere la misma:\n```c\nint x = 3, y = 5;\nint resultado = promedio(x,y);\n```\nObservemos que:\n\n - No es necesario que las variables enviadas por parámetro se llamen valor1 y valor2. \n - Como la función promedio retorna un valor de tipo entero, podemos asignar ese valor a una variable del mismo tipo, en este caso resultado.","example":{"statement":"Hasta los momentos, el programa que hemos creado para la empresa Rapidash tiene todas las instrucciones dentro de la función principal main. Vamos a mejorar el programa utilizando funciones para que sea más fácil de entender y modificar. Crearemos las siguientes funciones para:\n- Calcular y retornar el volumen de un paquete dadas sus dimensiones.\n- Calcular y retornar el peso volumétrico de un paquete dadas sus dimensiones.\n- Mostrar la categoría de un paquete según su peso volumétrico y retornar el precio que corresponde según la categoría.\n- Calcular y retornar el precio de un envío según su plazo de entrega.\n- Solicitar y verificar la ciudad de origen y destino de un paquete.\n\n Nota: Recordemos que las funciones se deben declarar antes de la función principal main","code":"#include <stdio.h> \n\n/**\n * Calcular el volumen de un paquete dadas sus dimensiones\n * @param  alto  Alto del paquete\n * @param  largo Largo del paquete\n * @param  ancho Ancho del paquete\n * @return       Volumen del paquete\n */\nfloat calcular_volumen(float alto, float largo, float ancho)\n{\n    return alto*largo*ancho;\n}\n\n/**\n * Calcular el peso volumétrico de un paquete dadas sus dimensiones\n * @param  alto  Alto del paquete\n * @param  largo Largo del paquete\n * @param  ancho Ancho del paquete\n * @return       Peso Volumétrico del paquete\n */\nfloat calcular_peso_volumetrico(float alto, float largo, float ancho)\n{\n    return alto*largo*ancho/5000;\n}\n\n/**\n * Mostrar la categoría de un paquete según su peso volumétrico y \n * retornar el precio que corresponde a dicha categoría\n * @param  peso_volumetrico Peso Volumétrico del paquete\n * @return                  Precio según la categoria\n */\nfloat mostrar_categoria_paquete_calcular_precio(float peso_volumetrico)\n{\n    if ( peso_volumetrico >= 10.0f )\n    {\n        printf(\"El paquete es grande\\n\");\n        return 2196.43f;\n    }\n    else{\n        if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n        {\n            printf(\"El paquete es mediano\\n\");\n            return 1523.86f;\n        }\n        else{\n            printf(\"El paquete es pequeño\\n\");\n            return 1018.73f;\n        }  \n    }\n}\n\n/**\n * Calcular y retornar el precio según el plazo de entrega \n * @param  dias Plazo de entrega expresado en días\n * @return      Precio según plazo de entrego\n */\nfloat precio_segun_plazo(int dias)\n{\n    switch(dias){\n        case 1:\n            return 1250.0f;\n            break;\n        case 2:\n            return 1000.0f;\n            break;\n        case 3:\n            return 300.0f;\n            break;\n        default:\n            return 0.0f;\n            break;\n    }\n}\n\n/**\n * Solicitar y verificar la ciudad de origen y destino del paquete\n */\nvoid solicitar_ciudad_origen_destino()\n{\n    /* Declaración de variables string para guardar la ciudad de origen y destino de\n        un paquete */\n    char ciudad_origen[31], ciudad_destino[31];\n\n    /* Declaramos una variable entera para manejar la respuesta de si las ciudades \n        introducidas son correctas o no (1:Si, 0:No) */\n    int opcion;\n\n    do{\n        printf(\"¿Cuál es la ciudad de origen? \");\n        scanf(\"%s\",ciudad_origen);\n\n        printf(\"¿Cuál es la ciudad de destino? \");\n        scanf(\"%s\",ciudad_destino);\n\n        printf(\"¿Las ciudades introducidas son correctas (1:Si, 0:No)? \");\n        scanf(\"%d\",&opcion);\n    }while(opcion!=1);\n\n    /* Mostrar mensaje con el origen y destino del paquete*/\n    printf(\"El paquete será enviado desde %s hasta %s \", ciudad_origen, ciudad_destino);\n}\n\nint main()\n{\n    /* Declaración de las variables de tipo decimal:\n        - 3 variables para guardar dimensiones del paquete actual\n        - 1 vector de 3 posiciones para guardar el volumen de cada paquete \n        - 1 vector de 3 posiciones para guardar el peso volumétrico de cada paquete\n        - 1 vector de 3 posiciones para guardar el precio de cada paquete \n    */\n    float alto, largo, ancho, \n          volumenes[3], \n          pesos_volumetricos[3], \n          precios_paquetes[3]; \n\n    /* Declaración de variables enteras \n        - Una para manejar las iteraciones del ciclo for\n        - Una para guardar el tiempo de entrega que escoja el cliente\n        - Una para guardar la cantidad de paquetes que desea registrar el usario\n    */\n    int i, tiempo_entrega_dias, cantidad_paquetes;\n\n    /* Solicitar la cantidad de paquetes que se desea registrar */\n    printf(\"Cantidad de paquetes a ingresar: \");\n    scanf(\"%d\",&cantidad_paquetes);\n\n    /* Registro de la cantidad indicada de paquetes */\n    for(i=0; i<cantidad_paquetes; i++){\n        /* Solicitud de cada dimensión */\n        printf(\"\\nIngrese las dimensiones del paquete #%d\\n\",i+1);\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo y asignación del volumen y peso volumétrico en cada posición de los \n            vectores volumenes y pesos_volumetricos respectivamente */\n        volumenes[i] = calcular_volumen(alto,largo,ancho);\n        pesos_volumetricos[i] = calcular_peso_volumetrico(alto,largo,ancho);\n        \n        /* Categoría y precio segun el peso volumétrico de un paquete */\n        precios_paquetes[i]=mostrar_categoria_paquete_calcular_precio(pesos_volumetricos[i]);\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n            y sumar el costo al vector precios_paquetes[i]\n         */\n        precios_paquetes[i]+=precio_segun_plazo(tiempo_entrega_dias);\n                \n        /* Solicitar y verficar la ciudad de origen y destino del paquete */\n        solicitar_ciudad_origen_destino();\n\n        /* Completar el mensaje resumen del envío del paquete*/\n        printf(\"con un costo de %.2f\\n\", precios_paquetes[i]);\n    }\n\n    /* Mostrar un mensaje al finalizar el programa*/\n    printf(\"\\nPaquetes registrados correctamente\\n\");\n    \n    return 0;\n}","solutionSteps":["Declaramos las 5 funciones necesarias antes de la función principal. La primera y la segunda funciones reciben por parámetros las dimensiones de un paquete, retornando el volumen y peso volumétrico del mismo calculados con las expresiones alto*largo*ancho y alto*largo*ancho/5000 respectivamente. Las funciones son declaradas de tipo float porque retornan valores decimales.","La siguiente función (línea 33) recibe por parámetro el peso volumétrico de un paquete y utilizando sentencias de selección if-else mostramos la categoría del paquete y retornamos el precio que corresponde según cada categoría. ","La función precio_segun_plazo (línea 58) es declarada de tipo float porque retorna el precio de un paquete al evaluar el tiempo de entrega recibido por parámetro expresado en días. Notemos que especificamos el caso por defecto dentro de la sentencia switch, esto se hace porque es necesario retornar un valor decimal tras haber declarado la función de tipo float.","Declaramos la última función de tipo void porque no retorna ningún valor. Dentro de la función declaramos las variables que necesitamos para solicitar la ciudad de origen y destino. Por últimos mostramos un mensaje con el origen y destino de un paquete.","Ahora veamos cómo utilizamos las funciones en la función principal (main), en las líneas 138 y 139 llamamos a las funciones calcular_volumen y calcular_peso_volumetrico pasando por parámetros las dimensiones solicitadas y asignamos el valor que retornan en los vectores volumenes y pesos_volumetricos respectivamente. ","Para calcular el precio de cada paquete primero utilizamos la función mostrar_categoria_paquete_calcular_precio (línea 142) con el peso volumétrico del paquete como parámetro y luego la función precio_segun_plazo (línea 151) con el tiempo de entrega indicado por el usuario.","Por último llamamos la función solicitar_ciudad_origen_destino en la línea 154 para solicitar la ciudad de origen y destino del paquete y  mostrar una parte del mensaje resumen del envío de dicho paquete (línea 98). Luego completamos el mensaje con el precio del paquete (línea 157)."]},"exercises":[{"statement":"Escriba un programa en C que solicite tres números a, b y c, calcular y mostrar sus promedios tomando un par de números a la vez, es decir, primero mostrar el promedio entre a y b, luego entre b y c y luego entre a y c.\n\nNota: los números pueden ser decimales","code":"#include <stdio.h> \n\n/* Declarar una función para calcular y retornar el promedio entre dos \n    números decimales */\n\nint main()\n{\n    /* Declarar las variables necesarias para guardar los números */\n    \n\n    /* Solicitar los tres números */\n     \n\n    /* Mostrar los promedios de cada par de números */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese los números\n> a: 32.2\n> b: 43.4\n> c: 21.4\n> El promedio entre 32.20 y 43.40 es 37.80\n> El promedio entre 43.40 y 21.40 es 32.40\n> El promedio entre 32.20 y 21.40 es 26.80"},{"statement":"Diseñe un programa en lenguaje C que solicite números enteros, evalúe e indique si éstos son divisibles entre 2, 3 y/o 5. El programa solicitará números mientras el usuario ingrese un valor diferente de 0.","code":"#include <stdio.h> \n\n/* Declarar una función para evaluar y mostrar si el número ingresado\n    es divisible entre 2, 3 y/o 5 */\n\n\nint main()\n{\n    /* Declarar una variable entera para guardar el número */\n    \n\n    /* Solicitar un número entero mientras el usuario no ingrese 0 y evaluar\n        cada número ingresado */\n    \n    \n    return 0;\n}","expectedOutput":">  *Ingrese un número entero: 10\n>     -El número es divisible entre 2\n>     -El número es divisible entre 5\n> *Ingrese un número entero: 15\n>     -El número es divisible entre 3\n>     -El número es divisible entre 5\n> *Ingrese un número entero: 16\n>     -El número es divisible entre 2\n> *Ingrese un número entero: 18  \n>     -El número es divisible entre 2\n>     -El número es divisible entre 3\n> *Ingrese un número entero: 0\n>     -El número es divisible entre 2\n>     -El número es divisible entre 3\n>     -El número es divisible entre 5"},{"statement":"Escriba una función que calcule y muestre la cantidad de dígitos que posee un número entero. Escribir también una función que seleccione y retorne el dígito que se encuentra en una posición indicada por el usuario (comenzando por la derecha), es decir, si el numero es 829 y el usuario indica la posición 1, la función debe retornar el dígito 9.","code":"#include <stdio.h> \n\n/* Declarar una función para calcular y retornar la cantidad de dígitos de un \n    número entero */\n\n\n/* Declarar una función para obtener el dígito de la posición indicada\n    por el usuario */\n\n\nint main()\n{\n    /* Declarar las variables necesarias para guardar el número entero y la posición\n        del dígito deseado */\n    \n\n    /* Solicitar el número entero y la posición del dígito deseado */\n    \n    \n    /* Mostrar la cantidad de dígitos del número ingresado */\n    \n\n    /* Mostrar el dígito en la posición indicada por el usuario */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese un número entero: 3829\n> Ingrese la posición del dígito deseado: 3\n> La cantidad de dígitos del número es 4\n> El digito en la posición #3 es 8"}]},{"_id":2,"title":"Estructuras","content":"Definición y uso de las estructuras en lenguaje C. Creación e inicialización de una variable usando una estructura. Acceso a los miembros de una estructura.","explanation":"Las estructuras son la elección adecuada cuando necesitamos guardar una serie de datos relacionados entre sí de alguna manera, por ejemplo, supongamos que deseamos llevar el registro de un producto dentro de un almacén, este producto posee un código (número entero), nombre (cadena de caracteres), un precio (número decimal) y una cantidad (número entero).  \n```c\ntypedef struct\n{\n    int codigo;\n    char nombre[31];\n    float precio;\n    int cantidad;\n}producto;\n```\nUsamos `typedef` para crear un nuevo tipo de dato llamado *producto*, el cual tiene *4 miembros* (codigo, nombre, precio y cantidad), los miembros de una estructura pueden ser de tipos de datos diferentes (`int`, `float`, `char`, etc). \nLa instrucción para crear una nueva variable de tipo producto es:\n```c\nproducto prod;\n```\nPodemos **inicializar** una variable del tipo creado en la misma instrucción de declaración, la única restricción es que los valores deben aparecer en el mismo orden que han sido declarados o debemos especificar cada miembro con el operador `.` (punto) seguido del nombre:\n```c\nproducto prod = {123, \"la la\", 23.23f, 2}; \n```\n```c  \nproducto prod = { .nombre=\"la la\", .codigo=123, .cantidad=2, .precio=23.23f};\n```\n\n![Estructura producto](assets/img/structure-image-lesson16.svg \"Estructura producto\")\n\nPara **acceder** a cada miembro usamos el operador `.` (punto), por ejemplo, si queremos imprimir todos los valores de un producto:\n```c  \nprintf(\"Codigo: %d\\n\",prod.codigo);\nprintf(\"Nombre: %s\\n\",prod.nombre);\nprintf(\"Precio: %.2f\\n\",prod.precio);\nprintf(\"Precio: %d\\n\",prod.cantidad);\n```\nPodemos aplicar todas las operaciones que conocemos hasta ahora a los diferentes miembros de una estructura dependiendo del tipo de dato del miembro, por ejemplo, podemos decrementar la cantidad del producto o leer un valor y guardarlo en el miembro llamado precio:\n```c  \nprod.cantidad--;\nscanf(\"%f\",&prod.precio);\n```\nAl ser un nuevo tipo de elemento podemos pasarlo como parámetro en una función: \n```c  \nvoid imprimir_producto(producto p)\n{\n    printf(\"Codigo: %d\\n\",p.codigo);\n    printf(\"Nombre: %s\\n\",p.nombre);\n    printf(\"Precio: %.2f\\n\",p.precio);\n    printf(\"Precio: %d\\n\",p.cantidad);\n}\n```\nO retornarlo en una función: \n```c  \nproducto generar_producto()\n{\n    producto p = { .nombre=\"la la\", \n                   .codigo=123, \n                   .cantidad=2, \n                   .precio=23.23f };\n    return p;\n}\n```","example":{"statement":"Sigamos con el programa manejado en las lecciones anteriores, la empresa de envíos Rapidash. Esta vez vamos a mejorar el programa declarando una estructura que represente un paquete. Dentro de esta estructura tendremos toda la información asociada a un paquete: \n- Volumen (número decimal) \n- Peso Volumétrico (número decimal) \n- Categoría del paquete (string: Pequeños, Medianos o Grandes)\n- Tiempo de entrega (número entero: 1, 2 o 3)\n- Ciudad de origen (string)\n- Ciudad de destino (string)\n- Correo electrónico del usuario (string)\n- Precio del envío (número decimal)\n\nAl terminar el registro cada paquete se debe mostrar un mensaje resumen del envío de dicho paquete de la forma “El usuario CORREO ha registrado un paquete con volumen VOLUMEN, peso volumetrico PESO_VOLUMETRICO y categoría CATEGORIA. El paquete será enviado desde CIUDAD_ORIGEN hasta CIUDAD_DESTINO en TIEMPO_ENTREGA días por un precio de PRECIO.”\n\nEn este caso el programa debe registrar la cantidad de paquetes que el usuario necesite, es decir, se le preguntará al usuario si tiene otro paquete por registrar y se continúa o detiene el proceso de registro de paquetes según la respuesta del mismo.","code":"#include <stdio.h> \n#include <string.h> \n\n/* Declaración de la estructura 'paquete' */\ntypedef struct\n{\n    float volumen;\n    float peso_volumetrico;\n    char categoria[25];\n    int tiempo_entrega_dias;\n    char ciudad_origen[30];\n    char ciudad_destino[30];\n    char correo_usuario[40];\n    float precio;\n}paquete;\n\n/**\n * Calcular el volumen de un paquete dadas sus dimensiones\n * @param  alto  Alto del paquete\n * @param  largo Largo del paquete\n * @param  ancho Ancho del paquete\n * @return       Volumen del paquete\n */\nfloat calcular_volumen(float alto, float largo, float ancho)\n{\n    return alto*largo*ancho;\n}\n\n/**\n * Calcular el peso volumétrico de un paquete dadas sus dimensiones\n * @param  alto  Alto del paquete\n * @param  largo Largo del paquete\n * @param  ancho Ancho del paquete\n * @return       Peso Volumétrico del paquete\n */\nfloat calcular_peso_volumetrico(float alto, float largo, float ancho)\n{\n    return alto*largo*ancho/5000;\n}\n\n/**\n * Calcular y retornar el precio según el plazo de entrega \n * @param  dias Plazo de entrega expresado en días\n * @return      Precio según plazo de entrego\n */\nfloat precio_segun_plazo(int dias)\n{\n    switch(dias){\n        case 1:\n            return 1250.0f;\n            break;\n        case 2:\n            return 1000.0f;\n            break;\n        case 3:\n            return 300.0f;\n            break;\n        default:\n            return 0.0f;\n            break;\n    }\n}\n\n/**\n * Mostrar un mensaje resumen del envío de un paquete\n */\nvoid mostrar_mensaje_resumen(paquete p){\n    printf(\"El usuario %s ha registrado un paquete con volumen %.2f, peso volumétrico %.2f y categoría %s. El paquete será enviado desde %s hasta %s en %d días por un precio de %.2f.\\n\",p.correo_usuario, p.volumen, p.peso_volumetrico, \n        p.categoria, p.ciudad_origen, p.ciudad_destino, p.tiempo_entrega_dias, p.precio );\n}\n\nint main()\n{\n    /* Declaración de 3 variables tipo decimal para guardar dimensiones del paquete actual */\n    float alto, largo, ancho;\n\n    /* Declaración de una variable para guardar la opción de si hay otro paquete o no\n        y así registrar tantos paquetes como el usuario necesite */\n    int otro_paquete;\n\n    /* Declaramos una variable cuyo tipo será la nueva estructura 'paquete' */\n    paquete paquete_actual;\n\n\n    /* Registrar paquetes hasta que el usuario indique que no hay mas paquetes */\n    do{\n        /* Solicitud de cada dimensión */\n        printf(\"\\n**Información del paquete actual\\n\");\n        printf(\"-Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"-Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"-Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo y asignación del volumen y peso volumétrico en cada miembro de la variable \n            paquete_actual (.volumen y .pesos_volumetrico respectivamente) */\n        paquete_actual.volumen = calcular_volumen(alto,largo,ancho);\n        paquete_actual.peso_volumetrico = calcular_peso_volumetrico(alto,largo,ancho);\n        \n        /* Asignar categoría y precio del paquete según el peso volumétrico */\n        if ( paquete_actual.peso_volumetrico >= 10.0f )\n        {\n            strcpy(paquete_actual.categoria,\"Grandes\");\n            paquete_actual.precio=2196.43f;\n        }\n        else{\n            if ( (paquete_actual.peso_volumetrico > 5)&&(paquete_actual.peso_volumetrico < 10.0f) )\n            {\n                strcpy(paquete_actual.categoria,\"Medianos\");\n                paquete_actual.precio=1523.86f;\n            }\n            else{\n                strcpy(paquete_actual.categoria,\"Pequeños\");\n                paquete_actual.precio=1018.73f;\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3): \");\n        scanf(\"%d\",&paquete_actual.tiempo_entrega_dias);\n\n        /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n            y sumar el costo al miembro precio de la estructura paquete_acutal\n         */\n        paquete_actual.precio+=precio_segun_plazo(paquete_actual.tiempo_entrega_dias);\n\n        /* Solicitar y guardar la ciudad de origen y destino */\n        printf(\"Ingrese la ciudad de origen: \");\n        scanf(\"%s\",paquete_actual.ciudad_origen);\n        printf(\"Ingrese la ciudad de destino: \");\n        scanf(\"%s\",paquete_actual.ciudad_destino);\n\n        /* Solicitar y confirmar el correo electronico del usuario */\n        char confirmacion_correo[40];\n\n        do{\n            printf(\"Ingrese el correo electronico: \");\n            scanf(\"%s\",paquete_actual.correo_usuario);\n            printf(\"Confirmacion del correo electronico: \");\n            scanf(\"%s\",confirmacion_correo);\n        }while(strcmp(paquete_actual.correo_usuario,confirmacion_correo)!=0);\n\n        /* Mostrar el mensaje resumen del paquete actual */\n        mostrar_mensaje_resumen(paquete_actual);\n\n        printf(\"¿Hay otro paquete (1:Si 0:No)? \");\n        scanf(\"%d\",&otro_paquete);\n    }while(otro_paquete!=0);\n\n    printf(\"\\nPrograma finalizado con éxito\\n\");\n      \n    return 0;\n}","solutionSteps":["Creamos un nuevo tipo de dato (estructura) al que llamaremos ‘paquete’ con todas las variables que guardarán la información asociada a un paquete. (Línea 5)","Declaramos una variable de tipo ‘paquete’ llamada ‘paquete actual’ (línea 82) para guardar la información de cada paquete durante el proceso de registro de los mismos. Para este proceso utilizamos un ciclo do-while que nos permite registrar paquetes hasta que el usuario decida detener las iteraciones.","Dentro del ciclo do-while vamos solicitando y asignando la información de cada paquete. Recordemos que para acceder a cada miembro de la estructura utilizamos el operador '.' y todas las operaciones que conocemos hasta ahora se pueden aplicar de la misma forma a cada miembro según su tipo de dato.","Para mostrar el mensaje resumen de cada paquete construimos una función (línea 67) que recibe por parámetro una variable de tipo paquete e imprime el mensaje deseado. Después de tener la información de cada paquete llamamos la función mostrar_mensaje_resumen pasando por parámetro el paquete_actual. (Línea 145)"]},"exercises":[{"statement":"Escriba un programa que solicite y guarde dos fechas de la forma 31/12/2016 (día, mes y año) para luego comparar e indicar cuál es la mayor entre ellas.\nPara comparar las fechas debe crear una función que reciba por parámetro las dos fechas y retorne un -1 si la fechaA es menor que la fechaB o +1 si la fechaA es mayor que la fechaB.\nAl finalizar la comparación el programa debe mostrar el mensaje “La fecha dd/mm/yyyy es menor/mayor que la fecha dd/mm/yyyy”, defina una función para mostrar cada fecha con ese formato.\n\nNota: Si el día o mes de una fecha es menor que 10, se debe agregar un 0 al imprimir la fecha, es decir, la salida debe ser 01/03/2013 en lugar de 1/3/2014.\n\nTip: Utilice una estructura para agrupar la información correspondiente a una fecha (día, mes y año).","code":"#include <stdio.h> \n\n/* Declarar una estructura para agrupar la información de una fecha */\n\n\n/* Definir una función que compare dos fechas y retorne -1 o +1 si la\n    fechaA es menor que la fechaB o si la fechaA es mayor que la fechaB\n    respectivamente */\n\n\n/* Definir una función que reciba una fecha por parámetro e imprima dicha \n    fecha en formato dd/mm/yyyy \n   Nota: Añadir el digito 0 si el dia o mes es menor que 10\n*/\n\n\n\nint main()\n{\n    /* Declarar las variables necesarias */\n    \n\n    /* Solicitud de cada fecha */\n    \n\n    /* Comparar las fechas y mostrar el mensaje respectivo */\n    \n\n    return 0;\n}","expectedOutput":"> **Primera Fecha\n> -Día: 1\n> -Mes: 7\n> -Año: 2016\n> **Segunda Fecha\n> -Día: 2\n> -Mes: 7\n> -Año: 2016\n> La fecha 01/07/2016 es menor que la fecha 02/07/2016"},{"statement":"Diseñe un programa en C capaz de recibir el número de segundos transcurridos desde la medianoche (desde 0 hasta 86399) y transformarlo al formato ‘hh:mm:ss’. Para esto cree una función que reciba por parámetro los segundos transcurridos y retorne una estructura que conste de 3 miembros: horas, minutos y segundos. Por último, imprimir un mensaje resumen “El tiempo expresado de la forma HH:MM:SS es equivalente a los SEG_MEDIANOCHE segundos contados desde la medianoche”.\n\nNota: \n- Si la hora, los minutos o los segundos son menor que 10, se debe agregar un 0 al imprimir el tiempo, es decir, la salida debe ser 03:04:34 en lugar de 3:4:34.\n- El programa debe validar que el usuario ingrese la cantidad de segundos contados desde la medianoche en el rango especificado (desde 0 hasta 86399)","code":"#include <stdio.h> \n\n/* Declarar una estructura para agrupar la información del tiempo hh:mm:ss */\n\n\n/* Definir una función que transforme los segundos contados desde la medianoche \n    a hh:mm:ss */\n\n\n/* Definir una función que reciba el tiempo por parámetro y lo imprima en formato hh:mm:ss \n   Nota: Añadir el digito 0 si las horas, minutos o segundos son menores que 10\n*/\n\n\nint main()\n{\n    /* Declarar las variables necesarias */\n    \n\n    /* Solicitar los segundos contados desde la medianoche, validando que se encuentren\n        en el rango (desde 0 hasta 86399) */\n    \n\n    /* Transformar el tiempo en segundos a hh:mm:ss */\n    \n\n    /* Imprimir el mensaje resumen correspondiente */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese los segundos desde la medianoche: 24752\n> El tiempo expresado de la forma 06:52:32 es equivalente a los 24752 segundos contados desde la medianoche"},{"statement":"Complete el siguiente programa para realizar operaciones sobre la estructura 'color' declarada en la línea 5. Defina funciones para:\n- Generar una estructura de tipo color con base en los valores especificados por el usuario: red, green y blue. Si algún valor es menor que 0, el miembro correspondiente deberá ser 0. Si algún valor es mayor que 255 el miembro correspondiente deberá ser 255.\n- Retornar el valor del miembro ‘red’ en una estructura de tipo color.\n- Indicar si dos colores son iguales, dos colores son iguales si todos sus miembros (red, green y blue) son exactamente iguales.\n- Generar y retornar una estructura de tipo color que represente una versión más clara de un color que reciba por parámetro. Para obtener el color más claro se divide cada miembro se entre 0.7 y el resultado es truncado a un número entero. Hay tres casos especiales:\n    1) Si todos los miembros del color inicial son cero (0) entonces todos los miembros del color resultante tendrán como valor 3. \n    2) Si alguno de los miembros del color inicial es mayor que 0 y menor que 3, debe ser reemplazado por 3 antes de dividirlo entre 0.7.\n    3) Si al dividir entre 0.7 el resultado es mayor que 255, el valor de ese miembro en el color resultante será reducido a 255.\n- Generar y retornar una estructura de tipo color que represente una versión más oscura de un color que reciba por parámetro. Para obtener el color más oscuro se multiplica cada miembro por 0.5 y el resultado es truncado a un número entero. \n- Imprimir de manera ordenada un color, pudiendo visualizar el valor de cada uno de sus miembros.\n\nNota: Al dividir o multiplicar un número entero entre un número decimal y guardar el resultado en una variable de tipo entera, el resultado es truncado a entero automáticamente.","code":"#include <stdio.h> \n\n/* Declarar una estructura para agrupar la información de un color */\ntypedef struct\n{\n    int red;\n    int green;\n    int blue;\n}color;\n\n/* Definir una función que reciba por parámetro los valores enteros que representan \n    red, green y blue del color a generar. Recuerde tomar en cuenta las condiciones \n    dadas en el enunciado para generar un color */\n\n\n/* Definir una función que reciba un color por parámetro y retorne el valor del \n    miembro 'red' de dicho color */\n\n\n/* Indicar si dos colores son iguales (Nota: esta función no retorna valor, solo \n    imprime un mensaje indicando si los colores son iguales o no) */\n\n\n\n/* Generar y retornar color que represente una versión más clara de un color recibido\n    por parámetro */\n\n\n\n/* Generar y retornar color que represente una versión más oscura de un color recibido\n    por parámetro */\n\n\n\n/* Imprimir de manera ordenada los miembros de un color (red, green y blue) */\n\n\n\nint main()\n{\n    /* Declarar las variables necesarias */\n\n    \n    /* Solicitar los valores del primer color y generar la estructura correspondiente */\n    \n\n    /* Solicitar los valores del segundo color y generar la estructura correspondiente */\n    \n\n    /* Visualizar el miembro red de los dos colores */\n    \n\n    /* Mostrar si los dos colores son iguales o diferentes utilizando la función creada para esto */\n    \n\n    printf(\"El color más claro que el primero es representado por:\\n\");\n    /* Obtener y mostrar un tono más claro del primer color */\n    \n\n    printf(\"El color más oscuro que el segundo es representado por:\\n\");\n    /* Obtener y mostrar un tono más oscuro del segundo color */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese el primer color en RGB\n> RED: 147\n> GREEN: 197\n> BLUE: 75\n> Ingrese el segundo color en RGB\n> RED: 219\n> GREEN: 112\n> BLUE: 181\n> El miembro red del primer color es: 147\n> El miembro red del segundo color es: 219\n> Los colores son diferentes\n> El color más claro que el primero es representado por:\n> RED: 210\n> GREEN: 255\n> BLUE: 107\n> El color más oscuro que el segundo es representado por:\n> RED: 153\n> GREEN: 78\n> BLUE: 126"}]},{"_id":3,"title":"Vectores de estructuras, estructura dentro de estructura (Carga y recorrido)","content":"Combinación de vectores y estructuras. Manejo de estructuras con vectores. Manejo de vectores de estructuras.","explanation":"Estructura y arreglos pueden ser combinados sin ninguna restricción, lo que implica que los arreglos pueden tener estructuras como elementos y las estructuras pueden tener arreglos y otras estructuras como miembros.\n\nTener una estructura dentro de otra es útil en casos como el siguiente: Se desea llevar el registro de estudiantes inscritos en una asignatura, para esto se requiere guardar el nombre completo del estudiante, la cédula de identidad y las notas de los 3 parciales:  \n```c\ntypedef struct\n{\n    char primer_nombre[31];\n    char primer_apellido[31];\n}nombre_completo;\n```\n```c\ntypedef struct\n{\n    nombre_completo nombre;\n    int cedula;\n    float notas_parciales[3];\n}estudiante;\n```\nVemos que primero hemos creado la estructura `nombre_completo`, compuesta por *primer\\_nombre* y *primer\\_apellido* (strings). Luego creamos la estructura `estudiante`, la cual contiene un nombre (de tipo `nombre_completo`), la cédula y un vector de 3 elementos para guardar las notas de cada parcial. \n\nPara crear y utilizar una variable de tipo estudiante:\n```c\nestudiante est1;\n\nprintf(\"Ingrese el nombre del estudiante\\n\");\nscanf(\"%s\",est1.nombre.primer_nombre);\n\nprintf(\"Ingrese el apellido del estudiante\\n\");\nscanf(\"%s\",est1.nombre.primer_apellido);\n\nprintf(\"Ingrese la cedula del estudiante\\n\");\nscanf(\"%d\",&est1.cedula);\n\nprintf(\"Ingrese las notas parciales:\\n\");\n\nfor (int i = 0; i < 3; ++i)\n{\n    printf(\"Parcial %d: \\n\",i+1);\n    scanf(\"%f\",&est1.notas_parciales[i]);\n}\n```\nAl crear una estructura estamos declarando un nuevo tipo de dato, con el cual es posible crear arreglos como ya hemos estudiado. Si tenemos que llevar el registro de 20 estudiantes (en lugar de 1):\n```c\nint cantidad_estudiantes = 20;\nestudiante estudiantes[cantidad_estudiantes];\n```\nDe esta manera la variable estudiantes contendrá la información de 20 estudiantes.\n\nPara acceder a cada estudiante y su información, usamos la combinación de dos notaciones ya conocidas: `[indice]` para acceder a un elemento (estudiante) y `.` (punto) para acceder a sus miembros (*nombre*, *cedula* y *notas_parciales*):\n```c\nint i;\n// Ciclo para guardar información de cada estudiante\nfor (i = 0; i < cantidad_estudiantes; ++i)\n{\n    printf(\"Ingrese el nombre del estudiante\\n\");\n    scanf(\"%s\",estudiantes[i].nombre.primer_nombre);\n\n    printf(\"Ingrese el apellido del estudiante\\n\");\n    scanf(\"%s\",estudiantes[i].nombre.primer_apellido);\n\n    printf(\"Ingrese la cedula del estudiante\\n\");\n    scanf(\"%d\",&estudiantes[i].nombre.cedula);\n\n    printf(\"Ingrese las notas parciales:\\n\");\n    \n    /*Ciclo para guardar la nota de cada parcial \n        de un estudiante */\n    for (int j = 0; j < 3; ++j)\n    {\n        printf(\"Parcial %d: \\n\",j+1);\n        scanf(\"%f\",&estudiantes[i].nombre.notas_parciales[j]);\n    }\n}\n```","example":{"statement":"En este caso la empresa Rapidash desea registrar 5 paquetes en un día y al final de la jornada calcular y mostrar la siguiente información:\n- Mensaje resumen de cada paquete registrado.\n- Volumen promedio de los paquetes.\n- Menor volumen registrado durante el día. \n- Peso volumétrico promedio de los paquetes.\n- Mayor peso volumétrico registrado durante el día.\n- Precio total de los envíos durante el día.","code":"#include <stdio.h> \n#include <string.h> \n\n/* Declaración de la estructura 'paquete' */\ntypedef struct\n{\n    float volumen;\n    float peso_volumetrico;\n    char categoria[25];\n    int tiempo_entrega_dias;\n    char ciudad_origen[30];\n    char ciudad_destino[30];\n    char correo_usuario[40];\n    float precio;\n}paquete;\n\n/**\n * Calcular el volumen de un paquete dadas sus dimensiones\n * @param  alto  Alto del paquete\n * @param  largo Largo del paquete\n * @param  ancho Ancho del paquete\n * @return       Volumen del paquete\n */\nfloat calcular_volumen(float alto, float largo, float ancho)\n{\n    return alto*largo*ancho;\n}\n\n/**\n * Calcular el peso volumétrico de un paquete dadas sus dimensiones\n * @param  alto  Alto del paquete\n * @param  largo Largo del paquete\n * @param  ancho Ancho del paquete\n * @return       Peso Volumétrico del paquete\n */\nfloat calcular_peso_volumetrico(float alto, float largo, float ancho)\n{\n    return alto*largo*ancho/5000;\n}\n\n/**\n * Calcular y retornar el precio según el plazo de entrega \n * @param  dias Plazo de entrega expresado en dias\n * @return      Precio según plazo de entrego\n */\nfloat precio_segun_plazo(int dias)\n{\n    switch(dias){\n        case 1:\n            return 1250.0f;\n            break;\n        case 2:\n            return 1000.0f;\n            break;\n        case 3:\n            return 300.0f;\n            break;\n        default:\n            return 0.0f;\n            break;\n    }\n}\n\n/**\n * Mostrar un mensaje resumen del envío de un paquete\n */\nvoid mostrar_mensaje_resumen(paquete p){\n    printf(\"El usuario %s ha registrado un paquete con volumen %.2f, peso volumétrico %.2f y categoría %s. El paquete será enviado desde %s hasta %s en %d días por un precio de %.2f.\\n\",p.correo_usuario, p.volumen, p.peso_volumetrico, \n        p.categoria, p.ciudad_origen, p.ciudad_destino, p.tiempo_entrega_dias, p.precio );\n}\n\nint main()\n{\n    /* Declaración de las variables tipo decimal para\n        - Guardar dimensiones de cada paquete (alto, largo y ancho)\n        - Guardar volumen promedio de los paquetes\n        - Guardar el menor volumen registrado durante el día\n        - Guardar el peso volumétrico promedio de los paquetes\n        - Guardar el mayor peso volumétrico registrado durante el día \n        - Guardar el precio total de los envíos registrado durante el día */\n    float alto, largo, ancho, volumen_promedio=0.0f, menor_volumen=99999999.9f, peso_volumetrico_promedio=0.0f,\n          mayor_peso_volumetrico=-1.0f, precio_total=0.0f;\n\n    /* Declaración de una variable para guardar la cantidad de paquetes a registrar en el día */\n    int cantidad_paquetes = 5, i;\n\n    /* Declaramos un vector cuyo tipo será la nueva estructura 'paquete' */\n    paquete paquetes[cantidad_paquetes];\n\n    /* Registrar los paquetes indicados por día (en este caso 5) */\n    for(i = 0; i < cantidad_paquetes; i++){\n        /* Solicitud de cada dimensión */\n        printf(\"\\n**Información del paquete actual\\n\");\n        printf(\"-Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"-Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"-Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo y asignación del volumen y peso volumétrico en los miembros y en la posición \n            correspondiente del vector 'paquetes'  */\n        paquetes[i].volumen = calcular_volumen(alto,largo,ancho);\n        paquetes[i].peso_volumetrico = calcular_peso_volumetrico(alto,largo,ancho);\n        \n        /* Asignar categoría y precio del paquete según el peso volumétrico */\n        if ( paquetes[i].peso_volumetrico >= 10.0f )\n        {\n            strcpy(paquetes[i].categoria,\"Grandes\");\n            paquetes[i].precio=2196.43f;\n        }\n        else{\n            if ( (paquetes[i].peso_volumetrico > 5)&&(paquetes[i].peso_volumetrico < 10.0f) )\n            {\n                strcpy(paquetes[i].categoria,\"Medianos\");\n                paquetes[i].precio=1523.86f;\n            }\n            else{\n                strcpy(paquetes[i].categoria,\"Pequeños\");\n                paquetes[i].precio=1018.73f;\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3): \");\n        scanf(\"%d\",&paquetes[i].tiempo_entrega_dias);\n\n        /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n            y sumar el costo al miembro precio de la estructura paquete_acutal\n         */\n        paquetes[i].precio+=precio_segun_plazo(paquetes[i].tiempo_entrega_dias);\n\n        /* Solicitar y guardar la ciudad de origen y destino */\n        printf(\"Ingrese la ciudad de origen: \");\n        scanf(\"%s\",paquetes[i].ciudad_origen);\n        printf(\"Ingrese la ciudad de destino: \");\n        scanf(\"%s\",paquetes[i].ciudad_destino);\n\n        /* Solicitar y confirmar el correo electrónico del usuario */\n        char confirmacion_correo[40];\n\n        do{\n            printf(\"Ingrese el correo electrónico: \");\n            scanf(\"%s\",paquetes[i].correo_usuario);\n            printf(\"Confirmación del correo electrónico: \");\n            scanf(\"%s\",confirmacion_correo);\n        }while(strcmp(paquetes[i].correo_usuario,confirmacion_correo)!=0);\n    }\n\n    for(i = 0; i < cantidad_paquetes; i++)\n    {\n        /* Mostrar el mensaje resumen del paquete actual */\n        mostrar_mensaje_resumen(paquetes[i]);\n\n        /* Sumar el volumen de cada paquete para calcular el promedio */\n        volumen_promedio+=paquetes[i].volumen;\n\n        /* Guardar el menor volumen de los paquetes registrados */\n        if (paquetes[i].volumen < menor_volumen)\n        {\n            menor_volumen = paquetes[i].volumen;\n        }\n\n        /* Sumar el peso volumétrico de cada paquete para calcular el promedio */\n        peso_volumetrico_promedio+=paquetes[i].peso_volumetrico;\n\n        /* Guardar el mayor peso volumétrico de los paquetes registrados */\n        if (paquetes[i].peso_volumetrico > mayor_peso_volumetrico)\n        {\n            mayor_peso_volumetrico = paquetes[i].peso_volumetrico;\n        }\n\n        /* Sumar el precio de todos los paquetes registrados */\n        precio_total+=paquetes[i].precio;\n    }\n\n    /* Mostrar la información solicitada en el enunciado */\n    printf(\"El volumen promedio de los paquetes es: %.2f\\n\", volumen_promedio/cantidad_paquetes);\n    printf(\"El menor volumen registrado durante el día es: %.2f\\n\", menor_volumen);\n    printf(\"El peso volumétrico promedio de los paquetes es: %.2f\\n\", peso_volumetrico_promedio/cantidad_paquetes);\n    printf(\"El mayor peso volumétrico registrado durante el día es: %.2f\\n\", mayor_peso_volumetrico);\n    printf(\"El precio total de los envíos registrados durante el día es: %.2f\\n\", precio_total);\n\n\n    printf(\"\\nPrograma finalizado con éxito\\n\");\n      \n    return 0;\n}","solutionSteps":["Declaramos una variable que indique la cantidad de paquetes que serán registrados en el día (línea 85). Como el enunciado del ejemplo nos indica la cantidad de paquetes a registrar podemos utilizar un ciclo for, por lo tanto declaramos una variable que maneje las iteraciones de dicho ciclo for.","Recordemos que tenemos un nuevo tipo de dato declarado como una estructura en la línea 5, con este tipo de dato es posible declarar vectores como ya hemos visto anteriormente. En la línea 88 estamos declarando un vector de tipo ‘paquete‘ que tendrá 5 posiciones, es decir, 5 paquetes. ","Dentro del ciclo for declarado en la línea 91 solicitamos, calculamos y guardamos la información de cada paquete. Al finalizar el proceso de registro de paquetes declaramos otro ciclo for que recorra el vector de paquetes con la información previamente cargada para mostrar el mensaje resumen de cada paquete y calcular la información que nos solicitan en el enunciado.","Finalmente mostramos toda la información que hemos calculado (líneas 178-182): volumen promedio, menor volumen, peso volumétrico promedio, mayor peso volumétrico y precio total de los 5 paquetes registrados."]},"exercises":[{"statement":"La agencia de telecomunicaciones Zapdos desea ofrecer un programa a sus clientes para buscar los códigos de área a nivel internacional ofrecidos por la misma. Se requiere completar el siguiente programa en lenguaje C que solicite el código de área al usuario y lo busque en el vector codigos_paises. Si el código se encuentra registrado, el programa debe imprimir el país correspondiente; si no, el programa debería imprimir un mensaje de error. \n\nLa lista de países junto a su código es la siguiente:\nPaís                 Código\nArgentina..............54\nBangladesh.............880\nBrazil.................55\nBurma (Myanmar)........95\nChina..................86\nColombia...............57\nCongo, Dem. Rep. of....243\nEgypt..................20\nEthiopia...............251\nFrance.................33\nGermany................49\nIndia..................91\nIndonesia..............62\nIran...................98\nItaly..................39\nJapan..................81\nMexico.................52\nNigeria................234\nPakistan...............92\nPhilippines............63\nPoland.................48\nRussia.................7\nSouth Africa...........27\nSouth Korea............82\nSpain..................34\nSudan..................249\nThailand...............66\nTurkey.................90\nUkraine................380\nUnited Kingdom.........44\nUnited States..........1\nVietnam................8","code":"#include <stdio.h> \n\n/* Estructura para agrupar la información de cada país */\ntypedef struct\n{\n    char pais[80];\n    int codigo;\n}codigo_area;\n\n/* Definir una función para imprimir un país junto a su código de área */\n\n\n\nint main()\n{\n    /* Cantidad de códigos de área disponible (variable útil para manejar el ciclo que va a \n        recorrer el vector de códigos de área) */\n    int cantidad_codigos_disp = 32;\n    \n    /* Declarar un vector de tipo codigo_area y completar la asignación de la información de cada uno */\n    codigo_area codigos_paises[] = { {\"Argentina\", 54}, {\"Bangladesh\", 880},\n                                     {\"Brazil\", 55}, {\"Burma (Myanmar)\", 95}\n                                   };\n\n    \n\n    /* Imprimir la información de todos los códigos de área disponibles */\n    printf(\"Países Disponibles\\n\");\n    \n\n    /* Solicitar el código de área deseado por el usuario */\n    \n    \n    /* Buscar si el código de área ingresado por el usuario está disponible */\n    \n\n    /* Indicar si el código de área deseado se encuentra disponible o no e indicar el país correspondiente */\n    \n\n    return 0;\n}","expectedOutput":"> Países Disponibles\n> Argentina             54\n> Bangladesh            880\n> Brazil                55\n> Burma (Myanmar)       95\n> China                 86\n> Colombia              57\n> Congo, Dem. Rep. of   243\n> Egypt                 20\n> Ethiopia              251\n> France                33\n> Germany               49\n> India                 91\n> Indonesia             62\n> Iran                  98\n> Italy                 39\n> Japan                 81\n> Mexico                52\n> Nigeria               234\n> Pakistan              92\n> Philippines           63\n> Poland                48\n> Russia                7\n> South Africa          27\n> South Korea           82\n> Spain                 34\n> Sudan                 249\n> Thailand              66\n> Turkey                90\n> Ukraine               380\n> United Kingdom        44\n> United States         1\n> Vietnam               84\n> Ingrese el código de área deseado: 39\n> El país correspondiente al código de área 39 es Italy"},{"statement":"La siguiente información muestra los vuelos diarios desde una ciudad a otra ofrecidos por la aerolínea Moltres:\nHora Partida - Hora Llegada\n8:00am - 10:16am\n9:43am - 11:52am\n11:19am - 1:31pm\n12:47pm - 3:00pm\n2:00pm - 4:08pm\n3:45pm - 5:55pm\n7:00pm - 9:20pm\n9:45pm - 11:58pm\n\nComplete el siguiente programa en lenguaje C para permitir que un usuario ingrese el tiempo (expresado en horas y minutos usando formato 24 horas) y luego el programa le muestre la hora de partida y de llegada para el vuelo cuya hora de partida es la más cercana al tiempo ingresado por el usuario.\n\nTip: Convierta los tiempos en minutos transcurridos desde la medianoche para facilitar la comparación de las horas. De esta manera al ingresar 13:15 equivale a 13*60 + 15 = 795 minutos desde la medianoche y la hora de partida del vuelo más cercano es 12:47 pm (767 minutos desde la medianoche)","code":"#include <stdio.h> \n\n/* Estructura para agrupar la información del tiempo */\ntypedef struct\n{\n    int horas;\n    int minutos;\n    int minutos_desde_medianoche;\n}tiempo;\n\n\n/* Estructura para agrupar la información de cada vuelo */\ntypedef struct\n{\n    tiempo hora_partida;\n    tiempo hora_llegada;\n}vuelo;\n\n\n/* Obtener minutos transcurridos desde la medianoche segun hh:mm */\nint obtener_minutos_medianoche(int horas, int minutos){\n    \n}\n\n/* Generar vuelo partiendo del tiempo de partida y de llegada */\nvuelo generar_vuelo(int hora_partida, int minutos_partida, int hora_llegada, int minutos_llegada){\n\n}\n\n/* Imprimir información del vuelo (hora de partida y hora de llegada) ordenadamente */\nvoid imprimir_vuelo(vuelo v){\n    printf(\"Hora partida: %d:%d \\t Hora llegada: %d:%d\\n\", v.hora_partida.horas, v.hora_partida.minutos, \n        v.hora_llegada.horas, v.hora_llegada.minutos);\n}\n\n\nint main()\n{\n    /* Declarar un vector de vuelos y asignar la información de cada uno */\n    vuelo vuelos[8];\n\n    /* Registrar de manera manual la información de los vuelos restantes */\n    vuelos[0] = generar_vuelo(8,0,10,16);\n\n    /* Imprimir la información de todos los vuelos registrados */\n    printf(\"Vuelos Disponibles\\n\");\n    \n\n    /* Declarar las variables para guardar el tiempo deseado por un usuario */\n    \n\n    /* Solicitar el tiempo al usuario (horas y minutos expresado en 24 horas) */\n    \n\n    /* Buscar la hora de partida del vuelo más cercano al tiempo del usuario */\n    \n\n    /* Indicar cuál es el vuelo más cercano al tiempo indicado por el usuario */\n    \n\n    return 0;\n}","expectedOutput":"> Vuelos Disponibles\n> Hora partida: 8:0      Hora llegada: 10:16\n> Hora partida: 9:43     Hora llegada: 11:52\n> Hora partida: 11:19    Hora llegada: 13:31\n> Hora partida: 12:47    Hora llegada: 15:0\n> Hora partida: 14:0     Hora llegada: 16:8\n> Hora partida: 15:45    Hora llegada: 17:55\n> Hora partida: 19:0     Hora llegada: 21:20\n> Hora partida: 21:45    Hora llegada: 11:58\n> Ingrese el tiempo deseado, Horas: 15\n> Ingrese el tiempo deseado, Minutos: 27\n> Con una diferencia de 18 minutos, el vuelo más cercano es el 5, cuya información es la siguiente:\n> Hora partida: 15:45      Hora llegada: 17:55"},{"statement":"Desarrollar un programa en lenguaje C para mantener la información necesaria de los artículos disponibles en un almacén. Cada artículo posee un código, nombre, precio por unidad, cantidad disponible y cantidad vendidos del mismo. Inicialmente el inventario consta de 10 artículos como se muestra a continuación:\nCódigo     Nombre                Precio      Cantidad    Vendidos\n4223       Disco duro 500GB      150.12      25          0\n7324       Teclado Inalámbrico   25.3        30          0\n1923       Mouse Inalámbrico     10.2        30          0\n9201       Microfono             17.65       17          0\n6945       Cornetas 2:1          65.78       20          0\n3291       CPU Intel Core i3     230.4       15          0\n6025       Monitor 16''          122.67      15          0\n7342       Tarjeta de Video      82.35       25          0\n1569       Pendrive 32GB         10.50       40          0\n8327       Cable USB             8.34        50          0\n\n\nEl programa debe ofrecer un menú con las siguientes opciones:\n1. Imprimir tabla de artículos: donde se muestre la información del inventario en forma de tabla.\n2. Buscar artículo por código: solicitar el código de un artículo y si existe mostrar la información asociada al mismo (nombre, precio, cantidad y vendidos), de no existir se debe mostrar el mensaje \"El artículo con código CODIGO no existe en el almacén\".\n3. Registrar venta de un artículo: solicitar el código del artículo y la cantidad vendida para registrar la venta del mismo.\n4. Calcular y mostrar las ganancias obtenidas con las ventas de un artículo en específico: solicitar el código del artículo que desea consultar y mostrar el total de ganancias obtenidas con las ventas del mismo.\n5. Calcular y mostrar las ganancias obtenidas con las ventas de todos los artículos.\n6. Finalizar programa.","code":"#include <stdio.h> \n\n/* Estructura para agrupar la información de un artículo */\ntypedef struct\n{\n    int codigo;\n    char nombre[80];\n    float precio;\n    int cantidad;\n    int vendidos;\n}articulo;\n\n\n/**\n * Función para imprimir toda la información de un artículo\n * @param a   Artículo a imprimir\n */\nvoid imprimir_articulo(articulo a){\n    printf(\"%d \\t\\t %s \\t\\t %.2f \\t\\t %d\\t\\t %d\\n\", a.codigo, a.nombre, a.precio, a.cantidad, a.vendidos);\n}\n\nint main()\n{\n    /* Declarar las variables necesarias */\n    int cantidad_articulos = 10;\n    \n    /* Declarar un vector de artículos y completar la asignación de la información de cada uno */\n    articulo inventario[] = { {4223, \"HD 500GB\", 87.12, 25, 0},\n                              {7324, \"Teclado Alám.\", 25.3, 30, 0}¡\n                            };\n\n    /* Mostrar el menú de opciones disponibles */\n    \n    \n    /* Solicitar la opción deseada */\n    \n\n    /* Hacer un ciclo que permita ejecutar cualquier opción mientras no se escoja la número 6 \n       Dentro de cada iteración del ciclo evaluar la opción ingresada y ejecutar las acciones correspondientes\n    */\n    \n\n    return 0;\n}","expectedOutput":"> **MENU**\n> 1. Imprimir tabla de artículos\n> 2. Buscar artículo por código\n> 3. Registrar venta de un artículo\n> 4. Mostrar las ganancias obtenidas con las ventas de un artículo\n> 5. Mostrar las ganancias obtenidas con las ventas de todos los artículos\n> 6. Finalizar programa\n> Ingrese la opción deseada: 1\n> Código       Nombre          Precio      Disponible      Vendidos\n> 4223         HD 500GB        87.12       25              0\n> 7324         Teclado Alám.   25.30       30              0\n> 1923         Mouse Inalám.   10.20       30              0\n> 9201         Microfono       17.65       17              0\n> 6945         Cornetas 2:1    65.78       20              0\n> 3291         CPU Core i3     99.40       15              0\n> 6025         Monitor 16''    81.67       15              0\n> 7342         Tarjeta Video   82.35       25              0\n> 1569         Pendrive 32GB   10.50       40              0\n> 8327         Cable USB       8.34        50              0\n>\n> Ingrese la opción deseada: 2\n> Ingrese el código del artículo a buscar: 313\n> El artículo con código 313 no existe en el almacén\n>\n> Ingrese la opción deseada: 2\n> Ingrese el código del artículo a buscar: 9201\n> Código       Nombre          Precio          Disponible          Vendidos\n> 9201         Microfono       17.65           17                  0\n>\n> Ingrese la opción deseada: 3\n> Ingrese el código del artículo vendido: 7324\n> Ingrese la cantidad vendida: 2\n> Venta registrada exitosamente\n>\n> Ingrese la opción deseada: 3\n> Ingrese el código del artículo vendido: 1923\n> Ingrese la cantidad vendida: 2\n> Venta registrada exitosamente\n>\n> Ingrese la opción deseada: 4\n> Ingrese el código del artículo a consultar: 7324\n> Las ganancias obtenidas de la venta de Teclado Alám. es 50.60\n>\n> Ingrese la opción deseada: 5\n> La ganancia total es: 71.00\n>\n> Ingrese la opción deseada: 6\n> Programa finalizado con éxito"}]},{"_id":4,"title":"Punteros","content":"Definición, uso y manejo de punteros. Punteros como parámetros de una función para modificar el valor de una variable.","explanation":"Los punteros, como su nombre lo indica, *apuntan* a ubicaciones en memoria. Imaginemos una fila de cajas de seguridad (cajas fuertes) de varios tamaños en un banco. Cada caja tendrá un número asociado para facilitar su búsqueda. Estos números son como las direcciones en memoria de las variables en nuestros programas. Supongamos que tenemos un objeto de gran valor en una de las cajas, pero decidimos colocar la ubicación real en otra caja más pequeña que solo guarde una tarjeta con el número de la caja que contiene el objeto valioso, es decir, la caja con la tarjeta estaría guardando la ubicación de otra caja; lo que sería equivalente a un puntero. \n\n![Punteros](assets/img/pointer-image-lesson18.svg \"Punteros\")\n\nEn las computadoras, los **punteros** son solo variables que guardan **direcciones de memoria**, usualmente las direcciones de otras variables. Una vez se tenga la dirección de memoria de una variable, es posible ir a esa dirección y obtener la información almacenada en la misma. Los punteros son una característica muy poderosa al programar, digamos que necesitamos pasar una variable que almacena mucha información a una función, es mucho más sencillo pasar su dirección que copiar cada pedazo de dicha información. \n\nPara declarar un puntero se debe indicar el tipo de variables al que puede apuntar y su nombre debe ser precedido por un asterisco (*) \n```c\nint *p; /* Apunta solo a variables de tipo int */\nfloat *q; /* Apunta solo a variables de tipo float */\nchar *r; /* Apunta solo a variables de tipo char */\n```\nEs crucial inicializar un puntero antes de utilizarlo, con el operador `&` obtenemos la dirección de una variable:\n```c\nint x=18, *p; \np = &x; /* p 'apunta' a x */\n```\nUna vez *p* apunte a *x*, podemos usar el operador `*` para acceder al valor almacenado en *x*\n```c\nprintf(\"Valor de x: %d\\n\",*p);\n```\nMientras *p* apunte a *x*, *p es un alias de x*. Así pues *p* no solo tiene el mismo valor de *x*, sino que al cambiar el valor de *p* también cambiamos el valor de *x*. En este ejemplo podemos observar el valor de *p* y de *x* al ser manipulado con `*p` y con `x`:\n```c\nint x=18, *p;\n\np = &x; /* Inicializamos el puntero, ahora p 'apunta' a x */\n\nprintf(\"Valor de x: %d\\n\", x); /* Valor de x: 18 */\nprintf(\"Valor de *p: %d\\n\", *p); /* Valor de *p: 18 */\n\nx = 9; /* Modificamos el valor de x a través de x */\n\nprintf(\"Valor de x: %d\\n\", x); /* Valor de x: 9 */\nprintf(\"Valor de *p: %d\\n\", *p); /* Valor de *p: 9 */\n\n*p = 100; /* Modificamos el valor de x a través de *p */\n\nprintf(\"Valor de x: %d\\n\", x); /* Valor de x: 100 */\nprintf(\"Valor de *p: %d\\n\", *p); /* Valor de *p: 100 */\n```\nSi queremos modificar el valor de una variable dentro de una función podemos utilizar punteros, pasando la dirección en memoria de dicha variable como parámetro en la función y modificando su valor con el operador `*` de la siguiente manera:\n```c\n#include <stdio.h> \n\n/* Recibe por parámetro un puntero, es decir, espera la dirección en\nmemoria de una variable de tipo int */\nvoid modificar_valor(int *p){\n    *p = 100;\n}\n\nint main()\n{\n    int x=18;\n    \n    /* Valor inicial de x */\n    printf(\"Valor de x: %d\\n\", x); /* Valor de x: 18 */\n    \n    /* Pasamos por parámetro la dirección de memoria de la variable \n    que queremos modificar */\n    modificar_valor(&x);\n\n    /* Valor de x después de ser modificado dentro de la función */\n    printf(\"Valor de x: %d\\n\", x); /* Valor de x: 100 */\n\n    return 0;\n}\n```","example":{"statement":"Vamos a optimizar el programa que hemos construido para la empresa de envíos Rapidash utilizando punteros. Crearemos funciones para recibir por parámetro punteros y modificar la información de cada paquete, de esta manera nos quedará un código más legible y escalable. \n\nLas funciones a crear son:\n- Cálculo y asignación del volumen y peso volumétrico en los miembros y en la posición correspondiente del vector 'paquetes'\n- Asignar categoría y retornar precio del paquete según el peso volumétrico\n- Solicitar y guardar la ciudad de origen y destino\n- Solicitar y confirmar el correo electrónico del usuario\n- Buscar el menor volúmen y el mayor peso volumétrico de los paquetes registrados","code":"#include <stdio.h> \n#include <string.h> \n\n/* Declaración de la estructura 'paquete' */\ntypedef struct\n{\n    float volumen;\n    float peso_volumetrico;\n    char categoria[25];\n    int tiempo_entrega_dias;\n    char ciudad_origen[30];\n    char ciudad_destino[30];\n    char correo_usuario[40];\n    float precio;\n}paquete;\n\n\n/**\n * Calcular y asignar del volúmen y peso volumétrico de un paquete \n * dadas sus dimensiones\n * @param  alto     Alto del paquete\n * @param  largo    Largo del paquete\n * @param  ancho    Ancho del paquete\n * @param  *v       Puntero que 'apunta' al miembro 'volumen' de un paquete\n * @param  *pv      Puntero que 'apunta' al miembro 'peso_volumetrico' de un paquete\n */\nvoid volumen_y_peso_volumetrico(float alto, float largo, float ancho, float *v, float *pv){\n    *v = alto*largo*ancho;\n    *pv = alto*largo*ancho/5000;\n}\n\n/**\n * Asignar categoría y retornar precio del paquete según el peso volumétrico\n * @param  peso_vol     Peso volumétrico del paquete\n * @param  *cat         Puntero que 'apunta' al miembro 'categoria' de un paquete\n * @return              Precio según peso volumétrico del paquete\n */\nfloat categoria_y_precio(float peso_vol, char *cat){\n    if ( peso_vol >= 10.0f )\n    {\n        strcpy(cat,\"Grandes\");\n        return 2196.43f;\n    }\n    else{\n        if ( (peso_vol > 5)&&(peso_vol < 10.0f) )\n        {\n            strcpy(cat,\"Medianos\");\n            return 1523.86f;\n        }\n        else{\n            strcpy(cat,\"Pequeños\");\n            return 1018.73f;\n        }  \n    }\n}\n\n/**\n * Solicitar y guardar la ciudad de origen y destino\n * @param  *origen  Puntero que 'apunta' al miembro 'ciudad_origen' de un paquete\n * @param  *destino Puntero que 'apunta' al miembro 'ciudad_destino' de un paquete\n */\nvoid solicitar_guardar_origen_destino(char *origen, char *destino){\n    printf(\"Ingrese la ciudad de origen: \");\n    scanf(\"%s\",origen);\n    printf(\"Ingrese la ciudad de destino: \");\n    scanf(\"%s\",destino);\n}\n\n/**\n * Solicitar y confirmar el correo electrónico del usuario\n * @param  *correo  Puntero que 'apunta' al miembro 'correo_usuario' de un paquete\n */\nvoid solicitar_confirmar_correo(char *correo){\n    char confirmacion_correo[40];\n\n    do{\n        printf(\"Ingrese el correo electrónico: \");\n        scanf(\"%s\",correo);\n        printf(\"Confirmación del correo electrónico: \");\n        scanf(\"%s\",confirmacion_correo);\n    }while(strcmp(correo,confirmacion_correo)!=0);\n} \n\n\n/**\n * Obtener el menor volumen y mayor peso volumétrico de todos los paquetes registrados\n * @param  *menor_v     Puntero que 'apunta' a la variable que guarda el menor volumen de \n *                      todos los paquetes\n * @param  *mayor_pv    Puntero que 'apunta' a la variable que guarda el mayor peso_volumetrico \n *                      de todos los paquetes\n */\nvoid obtener_menorv_mayorpv(int cantidad_p, paquete *p,float *menor_v, float *mayor_pv){\n    int i;\n    for(i = 0; i < cantidad_p; i++)\n    {\n        /* Guardar el menor volumen de los paquetes registrados */\n        if (p[i].volumen < *menor_v)\n        {\n            *menor_v = p[i].volumen;\n        }\n\n        /* Guardar el mayor peso volumétrico de los paquetes registrados */\n        if (p[i].peso_volumetrico > *mayor_pv)\n        {\n            *mayor_pv = p[i].peso_volumetrico;\n        }\n    }\n}     \n\n\n/**\n * Calcular y retornar el precio según el plazo de entrega \n * @param  dias Plazo de entrega expresado en días\n * @return      Precio según plazo de entrego\n */\nfloat precio_segun_plazo(int dias)\n{\n    switch(dias){\n        case 1:\n            return 1250.0f;\n            break;\n        case 2:\n            return 1000.0f;\n            break;\n        case 3:\n            return 300.0f;\n            break;\n        default:\n            return 0.0f;\n            break;\n    }\n}\n\n/**\n * Mostrar un mensaje resumen del envío de un paquete\n */\nvoid mostrar_mensaje_resumen(paquete p){\n    printf(\"El usuario %s ha registrado un paquete con volumen %.2f, peso volumétrico %.2f y categoría %s. El paquete será enviado desde %s hasta %s en %d días por un precio de %.2f.\\n\",p.correo_usuario, p.volumen, p.peso_volumetrico, \n        p.categoria, p.ciudad_origen, p.ciudad_destino, p.tiempo_entrega_dias, p.precio );\n}\n\nint main()\n{\n    /* Declaración de las variables tipo decimal para\n        - Guardar dimensiones de cada paquete (alto, largo y ancho)\n        - Guardar volumen promedio de los paquetes\n        - Guardar el menor volumen registrado durante el día\n        - Guardar el peso volumétrico promedio de los paquetes\n        - Guardar el mayor peso volumétrico registrado durante el día \n        - Guardar el precio total de los envíos registrado durante el día */\n    float alto, largo, ancho, volumen_promedio=0.0f, menor_volumen=99999999.9f, peso_volumetrico_promedio=0.0f,\n          mayor_peso_volumetrico=-1.0f, precio_total=0.0f;\n\n    /* Declaración de una variable para guardar la cantidad de paquetes a registrar en el día */\n    int cantidad_paquetes = 5, i;\n\n    /* Declaramos un vector cuyo tipo será la nueva estructura 'paquete' */\n    paquete paquetes[cantidad_paquetes];\n\n    /* Registrar los paquetes indicados por día (en este caso 5) */\n    for(i = 0; i < cantidad_paquetes; i++){\n        /* Solicitud de cada dimensión */\n        printf(\"\\n**Información del paquete actual\\n\");\n        printf(\"-Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"-Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"-Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Cálculo y asignación del volumen y peso volumétrico en los miembros y en la posicion \n            correspondiente del vector 'paquetes'  */\n        volumen_y_peso_volumetrico(alto, largo, ancho, &paquetes[i].volumen, &paquetes[i].peso_volumetrico);\n        \n        /* Asignar categoría y precio del paquete según el peso volumétrico */\n        paquetes[i].precio = categoria_y_precio(paquetes[i].peso_volumetrico, paquetes[i].categoria);\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en días (1, 2 o 3): \");\n        scanf(\"%d\",&paquetes[i].tiempo_entrega_dias);\n\n        /* Evaluar la tarifa correspondiente al tiempo de entrega elegido por el usuario \n            y sumar el costo al miembro precio de la estructura paquete_acutal\n         */\n        paquetes[i].precio+=precio_segun_plazo(paquetes[i].tiempo_entrega_dias);\n\n        /* Solicitar y guardar la ciudad de origen y destino */\n        solicitar_guardar_origen_destino(paquetes[i].ciudad_origen,paquetes[i].ciudad_destino);\n\n        /* Solicitar y confirmar el correo electrónico del usuario */\n        solicitar_confirmar_correo(paquetes[i].correo_usuario);\n    }\n\n    /* Determinar el menor volúmen y el mayor peso volumétrico de los paquetes registrados */\n    obtener_menorv_mayorpv(cantidad_paquetes, paquetes, &menor_volumen, &mayor_peso_volumetrico);\n\n    for(i = 0; i < cantidad_paquetes; i++)\n    {\n        /* Mostrar el mensaje resumen del paquete actual */\n        mostrar_mensaje_resumen(paquetes[i]);\n\n        /* Sumar el volumen de cada paquete para calcular el promedio */\n        volumen_promedio+=paquetes[i].volumen;\n\n        /* Sumar el peso volumétrico de cada paquete para calcular el promedio */\n        peso_volumetrico_promedio+=paquetes[i].peso_volumetrico;\n\n        /* Sumar el precio de todos los paquetes registrados */\n        precio_total+=paquetes[i].precio;\n    }\n\n    /* Mostrar la información solicitada en el enunciado */\n    printf(\"El volumen promedio de los paquetes es: %.2f\\n\", volumen_promedio/cantidad_paquetes);\n    printf(\"El menor volumen registrado durante el día es: %.2f\\n\", menor_volumen);\n    printf(\"El peso volumétrico promedio de los paquetes es: %.2f\\n\", peso_volumetrico_promedio/cantidad_paquetes);\n    printf(\"El mayor peso volumétrico registrado durante el día es: %.2f\\n\", mayor_peso_volumetrico);\n    printf(\"El precio total de los envíos registrados durante el día es: %.2f\\n\", precio_total);\n\n\n    printf(\"\\nPrograma finalizado con éxito\\n\");\n      \n    return 0;\n}","solutionSteps":["La primera función (línea 27) recibirá por parámetros las 3 dimensiones del paquete que se está registrando actualmente y además recibirá dos punteros de tipo float, para manejar el volumen y peso_volumetrico correspondientes a dicho paquete.","Para enviar las direcciones en memoria como parámetro en el llamado de la función anterior utilizamos el operador & (línea 173), de esta manera los punteros apuntarán a los miembros volumen y peso_volumétrico del paquete actual. ","La función que asigna categoría y retorna el precio de un paquete según su peso volumétrico recibe por parámetro el peso volumétrico y un puntero para modificar la categoría del paquete (línea 38). ","Notemos algo muy importante, en lenguaje C, el nombre de un arreglo (vector-matriz) puede ser utilizado como un puntero que apunta al primer elemento del arreglo, por esta razón al llamar la función en la línea 176, no necesitamos utilizar el operador & al pasar por parámetros el miembro ‘categoría’ de un paquete. (Recordemos que ‘categoría’ es un string, es decir, un vector de caracteres)","Para solicitar y guardar la ciudad de origen y destino creamos una función (línea 62) que reciba por parámetro los punteros que necesitamos: origen y destino del paquete actual, los cuales son enviados sin utilizar el operador & (línea 188), porque los nombres de las variables hacen referencia al primer elemento de las mismas(string, vector de caracteres). ","La cuarta función (línea 73) es muy parecida a la función anterior, recibe por parámetro el puntero del correo electrónico del usuario y se hace el proceso de confirmación dentro de la misma función.","Para buscar el menor volúmen y el mayor peso volumétrico de los paquetes registrados creamos una función que reciba por parámetro la cantidad de paquetes registrados, un puntero del vector con la información de los paquetes y los punteros de las variables menor_volumen y mayor_peso_volumetrico. ","En el llamado de función anterior (línea 195) podemos notar que para enviar el puntero del vector de paquetes no utilizamos el operador & (ya el nombre de la variable apunta al primer paquete del vector), en cambio, para los punteros de las variables menor_volumen y mayor_peso_volumetrico si usamos el operador &."]},"exercises":[{"statement":"Escriba un programa en lenguaje C para determinar el menor y mayor número entero en un vector de números enteros utilizando una función de tipo void (vacío). \n\nEl programa debe solicitar al usuario diez números enteros y almacenarlos en un vector, luego se determina y muestra el menor y mayor número de los números ingresados por el usuario.","code":"#include <stdio.h> \n\n/**\n * Obtener el menor y mayor número entero del vector 'v'\n * @param  cantidad_numeros     Cantidad de números enteros del vector v\n * @param  *v                   Puntero que 'apunta' al vector que guarda los números enteros\n * @param  *menor               Puntero que 'apunta' a la variable que guarda el menor número entero\n * @param  *mayor               Puntero que 'apunta' a la variable que guarda el mayor número entero\n */\nvoid obtener_menor_mayor(int cantidad_numeros, int *v, int *menor, int *mayor){\n    int i;\n    /* Recorrer el vector y determinar el menor y mayor número entero \n        Nota: Recuerde que para modificar el valor al que apunta un puntero se utiliza\n              el operador * (asterisco)\n    */\n    for(i = 0; i < cantidad_numeros; i++)\n    {\n        \n    }\n}     \n\nint main()\n{\n    /* Declarar e inicializar las funciones necesarias */\n    \n    \n    /* Solicitar los diez números enteros */\n    printf(\"Ingrese los diez números enteros\\n\");\n\n\n    /* Llamar la función que obtiene el menor y mayor número entero */\n    \n\n    /* Mostrar el menor y mayor número obtenido */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese los diez números enteros\n> Ingrese el 1º número: 34\n> Ingrese el 2º número: 25\n> Ingrese el 3º número: 65\n> Ingrese el 4º número: 23\n> Ingrese el 5º número: 6464\n> Ingrese el 6º número: 23\n> Ingrese el 7º número: 21\n> Ingrese el 8º número: 1\n> Ingrese el 9º número: 4325\n> Ingrese el 10º número: 5\n>\n> El menor número es: 1\n> El mayor número es: 6464"},{"statement":"Escriba la siguiente función en lenguaje C:\nvoid intercambiar(int *p, int *q)\n\nPara intercambiar el valor de dos variables de tipo int dadas las direcciones en memoria de dichas variables:\nintercambiar(&variable_uno, &variable_dos);","code":"#include <stdio.h> \n\n/* Crear una función para intercambiar los valores de dos números enteros*/\n     \n\nint main()\n{\n    /* Declarar las funciones necesarias */\n    \n    \n    /* Solicitar los dos números enteros */\n    \n\n    /* Llamar la función que intercambia los valores de dos números enteros */\n    \n\n    /* Mostrar el menor y mayor número obtenido */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese el primer número entero: 34\n> Ingrese el segundo número entero: 76\n> El primer número ahora es: 76\n> El segundo número ahora es: 34"},{"statement":"Codifique la función separar_tiempo, donde segundos_total representa la cantidad de segundos transcurridos desde la medianoche y los punteros *hr, *min y *seg apuntan a las variables enteras que guardarán el tiempo en horas(0-23), minutos(0-59) y segundos(0-59) equivalente a los segundos contados desde la medianoche.\n\nUtilice la estructura tiempo para guardar la información necesaria. Defina una función que reciba el tiempo por parámetro y lo imprima en formato hh:mm:ss. Añada el dígito 0 si las horas, minutos o segundos son menores que 10.","code":"#include <stdio.h> \n\n/* Estructura para agrupar la información del tiempo hh:mm:ss */\ntypedef struct\n{\n    int horas;\n    int minutos;\n    int segundos;\n    int segundos_medianoche;\n}tiempo;\n\n\n/* Completar la función separar_tiempo para transforme los segundos contados desde la medianoche \n    a hh:mm:ss*/\n/**\n * Transformar un tiempo de segundos contados desde la medianoche a hh:mm:ss\n * @param  segundos_medianoche  Segundos contados desde la medianoche\n * @param  *hr                  Puntero que 'apunta' a la variable que guarda las horas\n * @param  *min                 Puntero que 'apunta' a la variable que guarda los minutos\n * @param  *seg                 Puntero que 'apunta' a la variable que guarda los segundos\n */\nvoid separar_tiempo(int segundos_total, int *hr, int *min, int *seg){\n    \n    \n}\n\n/* Definir una función que reciba el tiempo por parámetro y lo imprima en formato hh:mm:ss \n   Nota: Añadir el digito 0 si las horas, minutos o segundos son menores que 10\n*/\n    \n\nint main()\n{\n    /* Declaración de la variable tiempo */\n    tiempo t;\n\n    /* Solicitar el tiempo expresado en segundos desde la medianoche */\n    \n\n    /* Llamar la función separar_tiempo */\n    \n\n    /* Imprimir el tiempo equivalente en hh:mm:ss */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese el tiempo expresado en segundos desde la medianoche: 45776\n> El tiempo equivalente es: 12:42:56"}]}]}
