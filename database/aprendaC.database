{"_id":1,"title":"Unidad I. Estructura básica de lenguaje C","lessons":[{"_id":1,"title":"Nuestro primer programa en C","content":"Estructura básica de un programa en C, librerías en C, función principal main, sentencias, directiva #include y comentarios.","explanation":"Vamos a hacer el típico programa para empezar a conocer nuestro lenguaje, este es el ejemplo del \"¡Hola Mundo!\"\n```c\n#include <stdio.h> \n\nint main()\n{ \n    /*Comentario: Imprimir en pantalla ¡Hola Mundo!*/\n    printf(\"¡Hola Mundo!\"); \n    return 0;\n}\n```\nEstudiemos el significado de las instrucciones presentes en nuestro programa: \n\n - En la línea 1 estamos incluyendo información de la _librería_ en C de entrada y salida, esta librería nos proporciona funciones para imprimir en pantalla (salida) información y para solicitar (entrada) información del usuario.\n - Luego, en la línea 3, tenemos nuestra **función principal** llamada `main`, todo el código que queremos que se ejecute debe ir dentro de esta función.\n - Por ahora, nuestro main muestra el mensaje \"¡Hola Mundo!\" usando la función `printf`, esta función pertenece a la librería `stdio.h` que hemos incluido en la primera línea y con ella podemos imprimir en pantalla lo que necesitemos de manera sencilla. La función printf ahora solo imprime una cadena de caracteres, que están encerrados con los signos `\" \"`\n - En lenguaje C es posible escribir comentarios que faciliten la comprensión y legibilidad de un programa, en la línea 5 se observa que un comentario se tiene la forma `/* Comentario ... */`\n - La línea 7 de nuestro main indica que el programa retorna 0 al sistema operativo cuando termina la ejecución. \n - Observemos 3 características importantes aquí: la directiva `#include <stdio.h>` no termina en ningún caracter especial, nuestro `main` agrupa las dos instrucciones que queremos ejecutar con los signos `{ }` y cada una de las instrucciones termina en `;` \n\n### ¡Vamos a poner esto en acción con el ejemplo!","example":{"statement":"Aquí encontraremos el enunciado del problema que necesitamos resolver, es decir, se describen en detalle los datos que se conocen del problema y lo que debemos obtener como resultado. Basándonos en los requerimientos descritos construimos nuestro programa. En este primer ejemplo necesitamos un programa en C que imprima en pantalla la oración \"¡Hola Mundo!\".","code":"/* Incluir libreria stdio.h */\n#include <stdio.h> \n\n/* Funcion principal main */\nint main()\n{ \n    /*Imprimir en pantalla la oracion ¡Hola Mundo!*/\n    printf(\"¡Hola Mundo!\"); \n    return 0;\n}","solutionSteps":["Incluimos la librería stdio.h que contiene la función printf para imprimir en pantalla cadenas de caracteres.","Declaramos la función principal (main), recordemos que esta función debe estar presente en todo programa.","Imprimimos en pantalla la oración \"¡Hola Mundo!” con la función printf.","Ahora vamos a compilar y ejecutar nuestro programa haciendo click en el botón RUN que se encuentra en la esquina superior derecha del editor de código y visualizamos la salida del programa en la consola que está debajo del editor."]},"exercises":[{"statement":"Complete el siguiente programa en C con la instrucción necesaria para imprimir en pantalla la oración: \"¡Hola SU_NOMBRE! Bienvenid@ a AprendaC\"","code":"#include <stdio.h> \n\nint main()\n{ \n    /* Hacer: \n        - Imprimir en pantalla: ¡Hola SU_NOMBRE! Bienvenid@ a AprendaC */ \n    return 0;\n}","expectedOutput":"> ¡Hola SU_NOMBRE! Bienvenid@ a AprendaC"},{"statement":"Incluya la librería necesaria para utilizar la función printf en el siguiente programa en C.","code":"/* Hacer: \n        - Incluir la libreria stdio.h */ \n\nint main()\n{ \n    printf(\"¡Libreria incluida con exito!\"); \n    return 0;\n}","expectedOutput":"> ¡Libreria incluida con exito!"},{"statement":"Retorne el valor 0 al final de la función principal para indicar que ha terminado con éxito la ejecución del siguiente programa en C.","code":"#include <stdio.h> \n\nint main()\n{\n    printf(\"¡Programa finalizado con exito!\"); \n    /* Hacer: \n        - Retornar el valor 0 */ \n}","expectedOutput":"> ¡Programa finalizado con exito!"}]},{"_id":2,"title":"Variables","content":"Declaración de una variable, identificadores, asignación de valores en una variable, tipos de datos y operadores matemáticos básicos.","explanation":"Para usar una variable en C, primero ésta debe ser **declarada**, es decir, debemos describir a la variable **ANTES** de usarla. Lenguaje C tiene varios tipos de datos, pero los más básicos son:\n\nTipo | Descripción\n------------ | -------------\nint | Números enteros (ya sea positivo o negativo)\nfloat | Números decimales (ya sea positivo o negativo)\nchar | Caracter (un solo caracter: a, b, c, etc...)\n\nPara declarar una variable primero especificamos el tipo de data que guardaremos en ella y el nombre o **identificador**. Al escoger el identificador se debe tomar en cuenta que puede contener letras, números y guión bajo `_`, debe empezar con letra o guión bajo y C distingue entre mayúsculas y minúsculas:\n```c\nint precio;\nfloat descuento;\nchar caracter;\n```\nA través de la **asignación** guardamos valores en las variables variables, la asignación de un valor se puede hacer después de haber declarado la variable o en la misma instrucción de declaración, de esta manera: \n```c\nint precio;\nprecio = 40;\n```\n```c\nfloat descuento = 0.3f;\nchar = 'c';\n```\nAl escribir valores decimales en lenguaje C debemos especificar el `.` decimal y la `f`, es decir, si queremos guardar el valor 30 en una variable de tipo decimal debe ser `float variable = 30.0f;`\n\nAhora podemos hacer operaciones con estos valores y guardar el resultado en otra variable, vamos a calcular cuál es el precio final después de haber aplicado el descuento y guardar el valor en una variable de tipo `float`, esto con los operadores matemáticos básicos, + (suma), - (resta), * (multiplicación), / (división) y %(resto de la división):\n```c\nint precio;\nfloat descuento, precio_final;\nprecio = 40;\ndescuento = 0.3f;\nprecio_final = precio - (precio*descuento);\n```\nEn lenguaje C los operadores matemáticos tienen **reglas de precedencia**, las cuales indican que la multiplicación y división se resuelven primero y la suma y la resta después. La expresión que calcula el precio final también puede expresarse sin `( )` que agrupen `precio*descuento`, el resultado sería el mismo, pero para expresiones como `12 * 3 / 4` tal vez sea necesario usar `( )` para que la expresión se resuelva según nuestros requerimientos.","example":{"statement":"La empresa de envío de paquetes Rapidash requiere calcular y mostrar el volumen y peso volumétrico de un paquete cuyas dimensiones son 14.4 cm de alto x 20.1 cm de largo x 15.7 cm de ancho. \n\nNota:\n- El volumen de un paquete se calcula multiplicando el alto por largo y por ancho del cuerpo. \n- El peso volumétrico refleja la densidad de un paquete y se calcula con la fórmula: alto*largo*ancho/5000.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias */\n    float alto = 14.4f, largo = 20.1f, ancho = 15.7f, volumen, peso_volumetrico; \n    /* Calculo del volumen */\n    volumen = alto*largo*ancho;\n    /* Calculo del peso volumetrico */\n    peso_volumetrico = alto*largo*ancho/5000;\n    /*Imprimir en pantalla el volumen del paquete*/\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    /*Imprimir en pantalla el peso volumetrico del paquete*/\n    printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n    return 0;\n}","solutionSteps":["Declaramos las variables que vamos a utilizar: tres para guardar las dimensiones del paquete (alto, largo y ancho respectivamente), una para guardar el volumen y otra para guardar el peso volumétrico del paquete.","Calculamos el volumen del paquete multiplicando las dimensiones del mismo y guardamos el valor en la variable creada en el paso anterior.","Calculamos el peso volumétrico del paquete aplicando la fórmula especificada en el enunciado y guardamos en valor en la respectiva variable creada en el primer paso.","Para imprimir en pantalla el valor de una variable de tipo float, insertamos un %f en el lugar donde queremos que se muestre el valor dentro de la oración y al final de la oración indicamos cuál variable es la que contiene dicho valor. Con esto imprimimos el volumen y peso volumétrico del paquete. (Línea 12)","Notemos que al final de la primera oración que imprimimos en pantalla tenemos un \\n, este caracter indica que se desea imprimir un salto de línea al final de la oración, por esta razón la segunda oración (\"Peso volumétrico del paquete: 0.908842\") es impresa en la siguiente línea"]},"exercises":[{"statement":"Juan necesita hacer un programa en C para calcular la nota promedio de sus tres parciales, sabiendo que cada nota es 45.7, 70.3, y 85.2 respectivamente, calcular y mostrar el promedio de sus notas.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 3 variables de tipo float y asignarle los valores de cada nota\n        - 1 variable de tipo float para guardar el valor del promedio \n    */ \n    \n    /* Calcular el promedio de las notas y guardar el resultado en la respectiva variable */\n    \n    /*Imprimir en pantalla la nota promedio de los 3 parciales*/\n    \n    return 0;\n}","expectedOutput":"> La nota promedio de los tres parciales es: 67.066666 puntos"},{"statement":"En una tienda de mascotas hay un descuento del 30% en toda la mercancía, un cliente ha escogido tres productos de 23.4, 34 y 12.5 unidades monetarias cada uno, se requiere calcular y mostrar el precio total de la compra y el precio final después de haber aplicado el descuento.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 3 variables y asignarles el precio de cada producto \n        - 1 variable para guardar el valor del descuento\n        - 2 variables para guardar el precio total y el precio con descuento\n    */ \n\n    /* Calcular y guardar el precio total y el precio con descuento */\n    \n    /*Imprimir en pantalla el precio total*/\n\n    /*Imprimir en pantalla el precio con descuento*/\n    \n    return 0;\n}","expectedOutput":"> El precio total de la compra es: 69.900002 unidades monetarias\n> Aplicando el descuento, el precio final es: 48.930000 unidades monetarias"},{"statement":"Escriba un programa en C que calcule el volumen de una esfera de 10 metros de radio con la fórmula v = 4/3*π*r^3. \n\nTips: \n- Escriba la fracción 4/3 de la forma 4.0f/3.0f, es decir de tipo float\n- En lenguaje C no existe operador exponencial, por lo que la expresión r^3 se calcula multiplicando r tres veces por sí mismo.\n- Utilice paréntesis ( ) si necesita agrupar operaciones matemáticas al aplicar la fórmula","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 1 variable y asignarle el radio de la esfera\n        - 1 variable para guardar el valor del volumen de la esfera\n    */ \n    \n    /* Calcular y guardar el volumen aplicando la formula */\n    \n    /*Imprimir en pantalla el volumen*/\n    \n    return 0;\n}","expectedOutput":"> El volumen de la esfera es: 4188.666992"}]},{"_id":3,"title":"Imprimir y leer información con printf  y scanf","content":"Imprimir valores enteros y decimales en la consola con printf. Solicitar y guardar valores enteros y decimales en variables con scanf.","explanation":"# Imprimir y leer información con printf  y scanf\nYa vimos cómo imprimir valores de tipo `float`, ahora, para imprimir un valor de tipo `int`, debemos reemplazar el `%f` por `%d` de la siguiente manera:\n```c\nprintf(\"mitad de 6 es %d\\n\", 6/2);\n```\nEn la función printf es posible escribir expresiones directamente y de ser necesario varias expresiones en la misma instrucción, por ejemplo:\n```c\nint mitad = 2; \nprintf(\"mitad de 6 es %d y 6/4 equivale a %.2f\\n\", 6/mitad, 6.0f/4.0f);\n```\nVamos a notar algo muy importante en este tipo de instrucciones, en la posición del `%d` se mostrará el valor de la expresión `6/mitad` ya que es la **primera** expresión que se encuentra, en la posición del `%.2f` se mostrará el valor de la expresión 6.0f/4.0f ya que es la **segunda** expresión. Esto implica que la cantidad de variables o expresiones debe ser igual a la cantidad de %d o %f que se tengan.\nEl `.2` en `%.2f` indica la cantidad de decimales que deseamos imprimir en pantalla del valor obtenido de la expresión `6.0f/4.0f`\n\nPara permitir que el usuario ingrese información y usarla en nuestro programa usaremos la función `scanf` también perteneciente a la librería `stdio.h`, veamos:\n```c\nscanf(\"%d\",&variable_entera);\nscanf(\"%f\",&variable_decimal);\n```\n - Al igual que especificamos qué tipo de dato vamos a imprimir en pantalla con printf, debemos especificar qué tipo de dato queremos guardar con la función scanf `%d` - *int* o `%f` - *float*\n - Vemos un nuevo operador `&` en esta instrucción, con este operador obtenemos la dirección de la variable que precede, esto con el fin de indicar a la función `scanf` **dónde** debe guardar el valor que acaba de leer.","example":{"statement":"Vamos a mejorar el ejemplo anterior, permitiendo que el usuario ingrese una por una las dimensiones del paquete a enviar para luego calcular con ellas el volumen y el peso volumétrico del paquete.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias SIN ASIGNACION de valores*/\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Solicitud de cada dimension */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Calculo del volumen */\n    volumen = alto*largo*ancho;\n    /* Calculo del peso volumetrico */\n    peso_volumetrico = alto*largo*ancho/5000;\n    /*Imprimir en pantalla el volumen del paquete*/\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    /*Imprimir en pantalla el peso volumetrico del paquete*/\n    printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n    return 0;\n}","solutionSteps":["Ya no es necesario asignar los valores de las dimensiones cuando estamos declarando las variables.","Mostramos un mensaje solicitando el alto del paquete y luego guardamos el valor en la variable correspondiente. De igual forma solicitamos las dos dimensiones restantes.","El volumen y peso volumétrico del paquete se calcula de la misma manera que el ejemplo anterior.","Por último imprimimos en pantalla los valores calculados."]},"exercises":[{"statement":"Escribir un programa que solicite al usuario ingresar una cantidad de dinero, luego mostrar esta cantidad con un impuesto de 12% añadido. Por ejemplo, si el usuario ingresa 345.23 la salida será 386.658. \n\nNota: Se requiere que los valores decimales sean mostrados con 3 decimales.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables para guardar el monto y el porcentaje del impuesto */\n   \n    /* Solicitar el monto al usuario */\n\n    /* Calcular el monto con el impuesto añadido */\n\n    /* Mostrar en pantalla el monto con el impuesto añadido */\n    \n    return 0;\n}","expectedOutput":"> Ingrese el monto: 345.23\n> Con el impuesto añadido:  386.658"},{"statement":"Escriba un programa que solicite un valor para ‘x’ y lo evalúe en la siguiente función polinómica: 5x^3 - x^2 +7x - 6. \n\nNota: \n- El valor de ‘x’ siempre será un número entero.\n- Recuerde que C no tiene operador exponencial, así que es necesario multiplicar ‘x’ por sí misma tantas veces como lo indique el exponente, por ejemplo, x*x representa ‘x’ al cuadrado.\n- Utilice los ( ) para agrupar cuando lo considere necesario.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables enteras para guardar el valor de x y el resultado de la funcion */\n   \n    /* Solicitar el monto al usuario */\n\n    /* Evaluar la funcion polinomica */\n\n    /* Mostrar en pantalla el resultado de la forma: \n            Al evaluar la función con x = VALOR_DE_X el resultado es: VALOR_DE_RESULTADO\n    */\n    \n    return 0;\n}","expectedOutput":"> Ingrese el valor de x: 4\n> Al evaluar la función con x = 4 el resultado es: 326"},{"statement":"Escriba un programa que solicite una temperatura en grados Fahrenheit y luego imprima en pantalla la temperatura equivalente en grados Celsius. \n\nNota: para convertir grados Fahrenheit a Celsius se emplea la fórmula °C = (°F  -  32)*5/9. ","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables para guardar las temperaturas en Fahrenheit \n        y Celsius\n    */ \n    \n    /* Solicitar la temperatura en grados Fahrenheit */\n\n    /* Transformar la temperatura de Fahrenheit a Celsius */\n\n    /* Imprimir en pantalla la temperatura equivalente en Celsius */\n\n    return 0;\n}","expectedOutput":"> Ingrese la temperatura en Fahrenheit: 325.13\n> Temperatura equivalente en Celsius: 162.85"}]}]}
{"_id":2,"title":"Unidad II. Toma de decisiones","lessons":[{"_id":1,"title":"Sentencia de selección: If","content":"Estructura de la condición if. Evaluar condiciones con los operadores relacionales, de igualdad y lógicos. Reglas de precedencia de los operadores.","explanation":"Se les llama sentencias de selección porque permiten seleccionar y ejecutar cierta porción de código dependiendo de alguna condición (evaluando una expresión). La primera sentencia que veremos se denomina `if` y su forma más simple es:\n```c\nif (/* condicion */)\n{\n    /* Bloque de instrucciones a ejecutar \n        SI se cumple la condicion */\n}\n```\nSi la *condición* que se encuentra dentro del paréntesis se cumple, se ejecuta el bloque de *instrucciones* ubicado dentro de las `{ }`. Para formular condiciones, lenguaje C posee operadores de tres tipos:\n\n - Operadores Relacionales \n\nSímbolo | Descripción\n------------ | -------------\n`<` | Menor que\n`\\>` | Mayor que\n`<=` | Menor o igual que\n`\\>=` | Mayor o igual que\n\n\n- Operadores de Igualdad\n \nSímbolo | Descripción\n------------ | -------------\n`==` | Igual que\n`!=` | Diferente que\n\n\n - Operadores Lógicos \n\nSímbolo | Descripción\n------------ | -------------\n`!` | Negación\n`&&` | AND lógico\n<code>&#124;&#124;</code> | OR lógico\n\nAl evaluar una expresión se produce como resultado un **0** (falso) o **1** (verdadero). Estos operadores también tienen *reglas de precedencia* las cuales indican que primero se resuelven los operadores relacionales, luego los de igualdad y por último los lógicos.\nPor ejemplo, en la expresión `x < y && y == z` primero se evalúa si x es menor que y, luego si y es igual que z y por último se verifica que las dos condiciones anteriores tienen como resultado verdadero. Algunos programadores utilizan *paréntesis* para agrupar las condiciones y que sean más legibles: `(x < y) && (y == z)`","example":{"statement":"Continuando con el ejemplo de la empresa de envío de paquetes Rapidash, se requiere mostrar el tipo de paquete de acuerdo a su peso volumétrico, para esto la empresa establece tres categorías: \n- Grande (peso volumétrico mayor o igual que 10)\n- Mediano (peso volumétrico mayor que 5 y menor que 10) \n- Pequeño (peso volumétrico menor o igual que 5)\n\nVamos a escribir las instrucciones necesarias para evaluar y clasificar un paquete con base en las dimensiones ingresadas por el usuario.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias SIN ASIGNACION de valores*/\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Solicitud de cada dimension */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Calculo del volumen  y peso volumetrico*/\n    volumen = alto*largo*ancho;\n    peso_volumetrico = alto*largo*ancho/5000;\n\n    /* Imprimir en pantalla el volumen y peso volumetrico del paquete */\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n    /* Clasificacion del paquete segun su peso volumetrico */\n    if ( peso_volumetrico >= 10.0f )\n    {\n        printf(\"El paquete es grande\\n\");\n    }\n    if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n    {\n        printf(\"El paquete es mediano\\n\");\n    }\n    if ( peso_volumetrico <= 5 )\n    {\n        printf(\"El paquete es pequeño\\n\");\n    }\n\n    return 0;\n}","solutionSteps":["Ya con las dimensiones solicitadas y el peso volumétrico calculado en la lección anterior, nos enfocamos en construir las condiciones necesarias que clasifican un paquete.","La primera condición evalúa si el peso volumétrico es mayor o igual (>=) que 10.0, de ser así se imprime en pantalla un mensaje que indique al usuario que el paquete entra en la categoría Grande.","En la segunda condición evaluamos un rango (entre 5.0 y 10.0) e imprimimos el mensaje correspondiente. Seguidamente se construye la última condición de la misma manera que las anteriores.","Notemos que cada condición toma en cuenta si se incluye o no en el rango el valor especificado por cada clasificación, por ejemplo, en la primera condición se usa >= en lugar de >"]},"exercises":[{"statement":"En el banco Golduck es posible realizar transferencias de dinero, según el monto de la transferencia se aplica una comisión de tasa fija más una tasa porcentual de la siguiente manera:\n- Si el monto es menor que 5000 la comisión será de 30 + 1.7%\n- Si el monto es mayor o igual que 5000 y menor que 30000 la comisión será de 56 + 0.66%\n- Si el monto es mayor o igual que 30000 y menor que 100000 la comisión será de 100 + 0.34%\n- Si el monto es mayor o igual que 100000 la comisión será de 155 + 0.09%\n\nSe requiere escribir un programa que solicite al usuario el monto de la transferencia que desea realizar, evaluar y calcular la comisión que le corresponde según el monto e imprimir en pantalla el monto total con la comisión añadida.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias*/\n    \n    /* Solicitar el monto a transferir */\n\n    /* Calcular la comision segun el monto a transferir*/\n    \n    /* Imprimir el monto final con la comision previamente calculada */\n\n    return 0;\n}","expectedOutput":"> Ingrese el monto de la transferencia: 6500\n> El monto total por la transferencia de 6500.00 es de 6598.90"},{"statement":"Escriba un programa para permitir que un usuario ingrese un número entero e indicar si ese número es par o impar.\n\nTip: recuerde la función del operador %","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias*/\n    \n    /* Solicitar el numero entero */\n\n    /* Clasificacion de numero: PAR o IMPAR */\n    /* Tip: utilice el operador % */\n\n    return 0;\n}","expectedOutput":"> Ingrese un numero entero: 5\n> El numero es impar"},{"statement":"Complete el siguiente programa para que solicite la edad del usuario e indique en qué etapa de su edad biológica se encuentra según la siguiente clasificación:\n- Niño: de 5 a 12 años\n- Adolescente: de 13 a 19 años\n- Adulto Joven: de 20 a 24 años\n- Adulto: de 25 a 55 años\n- Adulto mayor: de 56 años en adelante","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias*/\n    int edad; \n    \n    /* Solicitud de la edad del usuario */\n    printf(\"Ingrese su edad: \");\n    scanf(\"%d\",&edad);\n\n    /* Clasificar el usuario segun su edad */\n\n    return 0;\n}","expectedOutput":"> Ingrese su edad: 25\n> Usted es un Adulto"}]},{"_id":2,"title":"Cláusula else","content":"Estructura y uso de la cláusula else","explanation":"# Cláusula `else`\nEn algunas oportunidades es útil ejecutar ciertas instrucciones si *NO* se cumple una condición `if`, para estos casos existe la cláusula `else`:\n```c\nif (/* condicion */)\n{\n    /* Bloque de instrucciones a ejecutar \n        SI se cumple la condicion */\n}else{\n    /* Bloque de instrucciones a ejecutar \n        si NO se cumple la condicion */\n}\n```\nLa sentencia `else` siempre va ligada con una sentencia `if`, ya que es la **contraparte** de la sentencia `if`, es decir, las instrucciones dentro de la cláusula `else` se ejecutan cuando al evaluar la expresión de la sentencia `if`, resulta **0** (falso)","example":{"statement":"Vamos a optimizar el programa del ejemplo visto en la lección anterior con el uso de la cláusula else. Recordemos las tres categorías establecidas por la empresa Rapidash: \n- Grande (peso volumétrico mayor o igual que 10), \n- Mediano (peso volumétrico mayor que 5 y menor que 10) \n- Pequeño (peso volumétrico menor o igual que 5)","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias SIN ASIGNACION de valores*/\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Solicitud de cada dimension */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Calculo del volumen  y peso volumetrico*/\n    volumen = alto*largo*ancho;\n    peso_volumetrico = alto*largo*ancho/5000;\n\n    /* Imprimir en pantalla el volumen y peso volumetrico del paquete */\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n    /* Clasificacion del paquete segun su peso volumetrico con IF-ELSE*/\n    if ( peso_volumetrico >= 10.0f )\n    {\n        printf(\"El paquete es grande\\n\");\n    }\n    else{\n        if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n        {\n            printf(\"El paquete es mediano\\n\");\n        }\n        else{\n            printf(\"El paquete es pequeño\\n\");\n        }  \n    }\n    \n    return 0;\n}","solutionSteps":["Haremos uso de instrucciones if-else anidados, es decir, evaluamos si el peso volumétrico es mayor o igual que 10, si resulta verdadero se imprime el mensaje correspondiente y NO se evalúan las demás condiciones.","En caso de no cumplir con la primera condición, se evalúa si el peso volumétrico se encuentra entre 5 y 10, si el resultado es verdadero se imprime el mensaje correspondiente; en caso contrario el paquete se ubica en la tercera categoría (por descarte).","De esta manera ahorramos tiempo de ejecución al evitar evaluar condiciones que son excluyentes entre sí cuando se ha cumplido alguna de ellas."]},"exercises":[{"statement":"Un estudiante desea saber el equivalente de su calificación en literal (A, B, C, D y F) conociendo los puntos obtenidos en una asignatura, por lo tanto se requiere escribir un programa en C que solicite la nota (siempre será un número entero) e indique la calificación equivalente según las siguientes condiciones:\n- A: 90-100\n- B: 80-89\n- C: 70-79\n- D: 60-69\n- F: 0-59","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar una variable para guardar la nota de la asignatura*/\n    \n    /* Solicitar la nota */\n\n    /* Condiciones IF-ELSE para evaluar e indicar el literal correspondiente */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese la nota de la asignatura: 96\n> Calificacion obtenida: A"},{"statement":"Escriba un programa que solicite tres números enteros e indique cuál es el mayor y el menor número entre ellos. Nota: Intente utilizar la menor cantidad de condiciones (if-else) posibles","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar: \n        - 3 variables para guardar cada numero\n        - 1 variable para guardar el numero menor\n        - 1 variable para guardar el numero mayor */\n    \n    /* Solicitar los tres numeros a evaluar */\n\n    /* Condiciones IF-ELSE para hallar el menor y mayor numero de los tres valores ingresados */\n    \n    /* Imprimir en pantalla el menor y mayor numero */\n\n    return 0;\n}","expectedOutput":"> Ingrese los 3 numeros a evaluar:\n> 45\n> 21\n> 68\n> El numero mayor es 68\n> El numero menor es 45"},{"statement":"Imprimir en pantalla la ciudad correspondiente a un código de área ingresado por el usuario sabiendo que:\n- 229 es Buenos Aires\n- 404 es Cartagena\n- 470 es Cartagena\n- 706 es Quito\n- 762 es Quito\n- 770 es Cartagena\n- 912 es Buenos Aires\nSi el usuario ingresa un código de área que no está en la lista se debe imprimir un mensaje de error.\n\nNota: Con 3 condiciones if es suficiente.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar una variable para manejar el codigo de area */\n    \n    /* Solicitar el codigo de area */\n\n    /* Condiciones IF-ELSE para indicar la ciudad correspondiente */\n\n    return 0;\n}","expectedOutput":"> Ingrese el codigo de area: 912\n> Buenos Aires"}]},{"_id":3,"title":"Sentencia de selección: switch","content":"Estructura de la sentencia switch. Elementos que componen la sentencia: case, break y default. Algunas condiciones del switch.","explanation":"A menudo necesitaremos comparar una expresión contra una serie de valores para ver con cuál coincide y con base en esa coincidencia ejecutar un bloque de instrucciones u otro. Para estas situaciones tenemos la sentencia `switch`\nVeamos un ejemplo práctico: si queremos mostrar un indicador (Excelente, bueno, regular o malo) basados en el valor introducido por el usuario (4, 3, 2 o 1 respectivamente), la sentencia `switch` es:\n```c\nswitch(valor){\n    case 4:\n        printf(\"Excelente\\n\");\n        break;\n    case 3:\n        printf(\"Bueno\\n\");\n        break;\n    case 2:\n        printf(\"Regular\\n\");\n        break;\n    case 1:\n        printf(\"Malo\\n\");\n        break;\n    default:\n        printf(\"Valor fuera del rango\\n\");\n        break;\n}\n```\nDe aquí que:\n\n - La expresión a comparar en la sentencia `switch` puede ser **ÚNICAMENTE** de tipo `int`.\n - Cada caso `case` evalúa si valor coincide con un valor constante, el cual puede ser una expresión pero no puede contener variables, es decir, puede ser `5` ó `5+10` pero **no** `5+n`\n - Después de definir cada caso, vienen las instrucciones a ejecutar si coincide con el mismo, no se requiere `{ }` para agrupar estas instrucciones. Por lo general, la última instrucción de cada caso es `break;` que indica detener el proceso de evaluar si el valor dentro de `switch` coincide con los casos restantes y se continúa con la siguiente instrucción o sentencia que esté después del `switch`\n - No está permitido definir el mismo caso dos veces.\n - Si *valor* no coincide con ninguna de los casos listados, entonces las instrucciones dentro del caso `default` son ejecutadas.\n - El orden para definir los casos no importa, esto implica por ejemplo que el caso *default* no necesariamente va al final.","example":{"statement":"Sigamos con el ejemplo de la empresa Rapidash, esta vez la empresa define la tarifa correspondiente a cada plazo del tiempo de entrega de un paquete de la siguiente manera:\n- Entrega en 1 día, el costo será 1250 \n- Entrega en 2 días, el costo será 1000 \n- Entrega en 3 días, el costo será 300\n\nVamos a codificar las instrucciones necesarias para solicitar el tiempo de entrega que desea el usuario para un paquete. Luego evaluar, clasificar e informar la tarifa aplicada al plazo ingresado por el usuario.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Declaracion de la variable entera que guardara el TIEMPO DE ENTREGA del paquete */\n    int tiempo_entrega_dias;\n\n    /* Solicitud de cada dimension */\n    printf(\"Ingrese las dimensiones del paquete\\n\");\n    printf(\"Alto:\");\n    scanf(\"%f\",&alto);\n    printf(\"Largo:\");\n    scanf(\"%f\",&largo);\n    printf(\"Ancho:\");\n    scanf(\"%f\",&ancho);\n\n    /* Calculo del volumen  y peso volumetrico*/\n    volumen = alto*largo*ancho;\n    peso_volumetrico = alto*largo*ancho/5000;\n\n    /* Imprimir en pantalla el volumen y peso volumetrico del paquete */\n    printf(\"Volumen del paquete: %f\\n\", volumen);\n    printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n    /* Clasificacion del paquete segun su peso volumetrico con IF-ELSE*/\n    if ( peso_volumetrico >= 10.0f )\n    {\n        printf(\"El paquete es grande\\n\");\n    }\n    else{\n        if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n        {\n            printf(\"El paquete es mediano\\n\");\n        }\n        else{\n            printf(\"El paquete es pequeño\\n\");\n        }  \n    }\n\n    /* Solicitud del tiempo de entrega */\n    printf(\"\\nIngrese el tiempo de entrega en dias (1, 2 o 3):\\n\");\n    scanf(\"%d\",&tiempo_entrega_dias);\n\n    /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n        elegido por el usuario\n     */\n    switch(tiempo_entrega_dias){\n        case 1:\n            printf(\"La tarifa es 1250\\n\");\n            break;\n        case 2:\n            printf(\"La tarifa es 1000\\n\");\n            break;\n        case 3:\n            printf(\"La tarifa es 300\\n\");\n            break;\n    }\n    \n    return 0;\n}","solutionSteps":["Declaramos una variable de tipo entero para guardar el tiempo de entrega ingresado por el usuario. (Línea 9)","Luego, en las líneas 44 y 45 solicitamos el tiempo de entrega y guardamos el valor en la variable creada en el paso anterior.","A partir de la línea 50 encontramos la sentencia switch, la cual evalúa el tiempo de entrega (especificado en días), lo compara con los valores definidos en cada case (1 2 y 3) y cuando coincida con alguno de ellos se imprime el mensaje de la tarifa correspondiente."]},"exercises":[{"statement":"Un Boy Scout quiere aprender el código morse y decide empezar por los dígitos. Se requiere hacer un programa en C que dado un dígito muestre su correspondiente código morse. A continuación se muestran los dígitos del 0 al 9 en código morse:\n- 0    _ _ _ _ _ \n- 1    . _ _ _ _ \n- 2    . . _ _ _\n- 3    . . . _ _\n- 4    . . . . _ \n- 5    . . . . . \n- 6    _ . . . .\n- 7    _ _ . . .\n- 8    _ _ _ . . \n- 9    _ _ _ _ .\nSi un usuario introduce un dígito fuera del rango especificado (0-9) se debe mostrar el mensaje “El digito ingresado no se encuentra entre 0 y 9”","code":"#include <stdio.h> \n\nint main()\n{    \n    /* Declarar la variable entera para guardar el digito */\n\n    /* Solicitar el digito */\n\n    /* Evaluar, clasificar y mostrar el codigo morse correspondiente al digito \n        Nota: Recuerde mostrar el mensaje de error si el digito no se encuentra entre 0 y 9\n    */\n    \n    return 0;\n}","expectedOutput":"> Ingrese un digito del 0 al 9: 3\n> . . . _ _"},{"statement":"Se necesita un programa en C que solicite al usuario dos números decimales y permita sumar, restar, multiplicar o dividir esos valores según una opción ingresada por el usuario. Las opciones se pueden mostrar de la siguiente manera:\n- 1: Sumar\n- 2: Restar\n- 3: Multiplicar\n- 4: Dividir\n\nEl flujo del programa sería: solicitar dos valores decimales, mostrar opciones disponibles, guardar opción ingresada, evaluar la opción y aplicar la operación correspondiente mostrando el resultado de la misma. \n\nEn caso de que el usuario ingrese una opción que no está disponible se debe mostrar el mensaje \"La opcion OPCION no esta disponible\"","code":"#include <stdio.h> \n\nint main()\n{    \n    /* Declarar las variables para guardar los dos numeros decimales \n        y la variable para guardar la opcion del cliente*/\n    \n\n    /* Solicitar los numeros decimales */\n\n\n    /* Imprimir las opciones disponibles en forma de menu */\n\n    \n    /* Solicitar la opcion deseada */\n\n\n    /* Evaluar la opcion ingresada y sumar, restar, multiplicar o dividir segun sea\n        el caso, mostrando el resultado de la operacion aplicada \n\n        Nota: Recuerde mostrar el mensaje de error si la opcion ingresada no esta disponible */\n\n    return 0;\n}","expectedOutput":"> Ingrese dos numeros decimales:\n> Numero 1: 6.4\n> Numero 2: 2\n> Las opciones disponibles son:\n> 1: Sumar\n> 2: Restar\n> 3: Multiplicar\n> 4: Dividir\n> Ingrese la opcion deseada: 4\n> La division de los dos valores es 3.20"},{"statement":"Escriba un programa en C que solicite la fecha en formato 31-3-17, es decir, solicitar el dia, luego el mes y por último el año. Después de recolectar esta información mostrar la misma fecha pero de la forma “31 de marzo del año 2017”\n\nTip: Imprima la fecha final por partes, es decir, primero “31 de”, luego convierte 03 a “marzo” y por último “del año 2017”.\n\nNota: En lenguaje C el nombre o identificador de una variable no puede contener el caracter ñ","code":"#include <stdio.h> \n\nint main()\n{    \n    /* Declarar las variables de tipo entero para dia, mes y ano */\n\n    /* Solicitar y guardar dia, mes y ano */\n\n    /* Imprimir la primera parte de la fecha final \"DIA de \" */\n\n    /* Evaluar, clasificar e imprimir el nombre del mes correspondiente \n        al numero de mes ingresado */\n    \n\n    /* Imprimir la ultima parte de la fecha final \" del ano 20ANO\" */\n    \n    return 0;\n}","expectedOutput":"> Ingrese la fecha:\n> Dia: 31\n> Mes: 3\n> Ano: 17\n> 31 de marzo del año 2017"}]}]}
{"_id":3,"title":"Unidad III. Ciclos: while, do-while y for","lessons":[{"_id":1,"title":"Ciclos: while","content":"Definición de ciclos, estructura y uso del ciclo while. ","explanation":"Un ciclo es una sentencia que se encarga de ejecutar repetidamente las instrucciones que se encuentran dentro del cuerpo del ciclo. En C, cada ciclo tiene una expresión de control. **ANTES** de cada ejecución del cuerpo del ciclo (a esto se le llama *iteración*), la expresión de control es evaluada y si el resultado es verdadero, el ciclo continúa su ejecución.\n\nEl primer ciclo que veremos se denomina `while`, tiene la siguiente estructura:\n```c\nwhile(/* expresion */){\n    // Instrucciones\n}\n```\nLa expresión dentro de los paréntesis `( )` de la sentencia `while` es la **expresión de control**, es aquella que se evalúa y si resulta verdadero se ejecutan las instrucciones que están dentro del cuerpo del ciclo (iteración). Si queremos hacer un ciclo que imprima los números del 1 al 10:\n```c\nint numero = 1;\nwhile(numero < 10){\n    printf(\"%d\\n\", numero);\n    numero = numero+1;\n}\n```\n - Declaramos la variable *numero* y la inicializamos en 1\n - Se evalúa la condición *numero* < 10 ? → Verdadero (1)\n - Se imprime el numero 1 y luego se incrementa el valor de *numero* a 2\n - Se evalúa nuevamente la condición *numero* < 10 ? → Verdadero (1)\n - Se imprime el numero 2 y luego se incrementa el valor de *numero* a 3\n - Así sucesivamente hasta que *numero* es igual a 10 \n - Se evalúa la condición *numero* < 10 ? → Falso (0)\n - Se sale del ciclo, es decir, se detienen las iteraciones y se continúa con la siguiente instrucción que esté después del `while`\n\n> **Nota:** El cuerpo del ciclo puede que no sea ejecutado ni una vez, ya que la expresión de control es evaluada ANTES de cada iteración (incluída la primera)","example":{"statement":"La empresa de envíos Rapidash utiliza camionetas para transportar sus paquetes; el peso volumétrico disponible en la última camioneta que saldrá hoy es de 28.3, por esta razón la empresa necesita que su programa acepte nuevos paquetes mientras haya espacio disponible. ","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Declaracion e inicializacion del peso disponible en la camioneta*/\n    float peso_disponible = 28.3f;\n\n    /* Declaracion de la variable entera que guardara el TIEMPO DE ENTREGA del paquete */\n    int tiempo_entrega_dias;\n\n    /* Mientras el peso disponible sea mayor que 0.0 se solicitan los datos de un nuevo paquete */\n    while(peso_disponible > 0.0f){\n\n        /* Solicitud de cada dimension */\n        printf(\"\\nIngrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Calculo del volumen  y peso volumetrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Actualizar el peso volumetrico disponible en la camioneta, es decir, restar el peso \n            volumetrico del paquete actual al peso disponible */\n        peso_disponible = peso_disponible - peso_volumetrico;\n\n        /* Imprimir en pantalla el volumen y peso volumetrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificacion del paquete segun su peso volumetrico con IF-ELSE*/\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"\\nIngrese el tiempo de entrega en dias (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                break;\n        }\n    }\n\n    /* Indicar que el espacio se ha agotado y el programa ha terminado*/\n    printf(\"***Espacio de la camioneta agotado\\n\");\n    \n    return 0;\n}","solutionSteps":["Declaramos e inicializamos una variable de tipo float para manejar el peso volumétrico disponible en la camioneta.","Vamos a utilizar el ciclo while para evaluar si existe espacio disponible en la camioneta, es decir, si el peso volumétrico disponible es mayor que 0.0. Línea 15.","Luego ubicamos todas las instrucciones creadas en las lecciones anteriores dentro del cuerpo del ciclo, es decir, la solicitud y cálculo del volumen, peso volumétrico y tarifa del paquete a enviar se ubican dentro de las { } del while.","Ahora actualizamos la variable que se evalúa en la expresión de control (peso_disponible) restándole el peso volumétrico del paquete actual, de esta manera vamos disminuyendo el peso disponible de la camioneta. Este paso es muy importante porque si no se actualiza la variable evaluada en la expresión de control creamos un ciclo while infinito.","Por último mostramos el mensaje \"***Espacio de la camioneta agotado\" fuera del ciclo while para indicar que hemos terminado. (Línea 74)"]},"exercises":[{"statement":"Complete el siguiente programa para imprimir una tabla de números enteros junto a sus cuadrados. El programa primero debe solicitar al usuario un número entero (n), luego se imprimen n cantidad de líneas, donde cada una tendrá un número entre 1 y n junto a su cuadrado.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar \n        - 1 variable entera para guardar el NUMERO \n        - 1 variable que ira contando desde 1 hasta NUMERO */\n    int n, numero_actual = 1;\n\n    /* Solicitar el numero */\n\n    /* Crear el ciclo while que vaya desde 1 hasta NUMERO (incluyendo NUMERO) */\n    while(){\n\n        /* Imprimir el numero actual y su cuadrado\n            Ej.  2  4 \n        */\n        \n        /* Actualizar el numero actual al siguiente */\n    }\n\n    return 0;\n}","expectedOutput":"> Ingrese el numero: 5\n> 1  1\n> 2  4\n> 3  9\n> 4  16\n> 5  25"},{"statement":"Escriba un programa que solicite un número par entero (n) al usuario e imprima los números pares desde n hasta 0, es decir, de manera descendiente. Si el usuario ingresa un número impar se debe mostrar el mensaje error “Lo siento, el numero ingresado es impar”.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar una variable entera para guardar el NUMERO */\n\n\n    /* Solicitar el numero */\n\n\n    /* Hacer:\n        - Verificar que el numero sea par \n        - Si el numero es par imprimir los numeros pares desde NUMERO hasta 0\n            Nota: Recuerde actualizar la variable que evalue en la condicion del ciclo while \n                  dentro del ciclo\n        - Si el numero es impar imprimir el mensaje \"Lo siento, el numero ingresado es impar\" \n    */\n   \n\n    return 0;\n}","expectedOutput":"> Ingrese un numero par: 8\n> 8\n> 6\n> 4\n> 2\n> 0"},{"statement":"Desarrollar un programa para llevar y mantener el saldo de una cuenta bancaria. El programa debe ofrecer al usuario un menú de opciones: vaciar la cuenta, crédito para la cuenta(+), débito desde la cuenta(-), mostrar el saldo actual y salir del programa. Las opciones son representadas por los números enteros 0, 1, 2, 3 y 4 respectivamente. Al comenzar el programa se debe mostrar el saldo inicial de la cuenta (0.0)","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias para guardar el saldo de la cuenta, el monto de las\n        transacciones (credito o debito) y la opcion del usuario */\n\n    /* Mostrar el menu de opciones */\n\n    /* Hacer:\n        - Solicitar la opcion del usuario mientras no escoja \"Salir\" (4)\n        - Evaluar la opcion del usuario y aplicar las instrucciones correspondientes segun la opcion \n    */\n   \n    \n    /* Imprimir el mensaje de \"Programa finalizado\" */ \n\n\n    return 0;\n}","expectedOutput":"> Opciones del programa\n> 0: Vaciar cuenta\n> 1: Credito\n> 2: Debito\n> 3: Saldo actual\n> 4: Salir\n> El saldo actual es: 0.00\n> Opcion: 1\n> Ingrese el monto del credito: 32.2\n> Opcion: 2\n> Ingrese el monto del debito: 2.3\n> Opcion: 3\n> El saldo actual es: 29.90\n> Opcion: 4\n> Programa finalizado"}]},{"_id":2,"title":"Ciclos: do-while","content":"Estructura y uso del ciclo do-while. Diferencia entre el ciclo while y do-while.","explanation":"El ciclo `do-while` es básicamente una sentencia `while` cuya expresión de control es evaluada **DESPUÉS** de cada ejecución del cuerpo del ciclo. La sentencia `do-while` tiene la forma:\n```c\ndo{\n    // Instrucciones\n}while(/* expresion */);\n```\nAl encontrar un ciclo `do-while` lo que ocurre es: el cuerpo del ciclo es ejecutado primero, luego la expresión de control es evaluada, si el resultado es verdadero (1) el cuerpo del ciclo es ejecutado otra vez y así sucesivamente. El ciclo termina cuando el resultado de la expresión de control es falso (0).\nLa **diferencia** entre el *while* y el *do-while* es que el `do-while` **SIEMPRE SE EJECUTA AL MENOS UNA VEZ**, mientras que el `while` podría no ejecutarse ni una vez si al evaluar la expresión se obtiene como resultado falso (0). Con esta característica en mente podemos distinguir cuándo necesitamos un ciclo u otro.\nSi queremos determinar la cantidad de dígitos que posee un número entero positivo podemos hacer lo siguiente:\n```c\nint valor, digitos=0;\nprintf(\"Introduzca un numero entero positivo: \\n\");\nscanf(\"%d\",&valor);\n\ndo{\n    valor/=10;\n    digitos=digitos+1;\n}while(valor>0);\n\nprintf(\"El numero tiene %d digito(s)\\n\", digitos);\n```\nSi usamos un ciclo `while` en lugar del `do-while`, no estaremos tomando en cuenta el caso en que el numero ingresado sea 0, donde al evaluar la expresión resulta falso (0) **ANTES** de ejecutar el cuerpo de ciclo por lo que no incrementamos el valor de digitos y el resultado final será *“El numero tiene 0 digito(s)”* cuando en realidad tiene 1 dígito.\n```c\nwhile(valor>0){\n    valor/=10;\n    digitos=digitos+1;\n}\n```","example":{"statement":"La empresa de envíos esta vez desea asegurar el registro de al menos un paquete y luego, basándose en la misma condición del ejemplo en la lección anterior continuar con el registro de los demás paquetes. Recordemos que la condición es registrar paquetes mientras haya espacio en la camioneta que saldrá hoy, teniendo como peso volumétrico disponible 28.3","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n    \n    /* Declaracion e inicializacion del peso disponible en la camioneta*/\n    float peso_disponible = 28.3f;\n\n    /* Declaracion de la variable entera que guardara el TIEMPO DE ENTREGA del paquete */\n    int tiempo_entrega_dias;\n\n    /* Asegurar el registro de al menos un paquete con el ciclo do-while */\n    do{\n\n        /* Solicitud de cada dimension */\n        printf(\"\\nIngrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Calculo del volumen  y peso volumetrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Actualizar el peso volumetrico disponible en la camioneta, es decir, restar el peso \n            volumetrico del paquete actual al peso disponible */\n        peso_disponible = peso_disponible - peso_volumetrico;\n\n        /* Imprimir en pantalla el volumen y peso volumetrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificacion del paquete segun su peso volumetrico con IF-ELSE*/\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"\\nIngrese el tiempo de entrega en dias (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                break;\n        }\n    /* Condicion para repetir el ciclo: mientras el peso disponible sea mayor que 0.0 */\n    }while(peso_disponible > 0.0f);\n\n    /* Indicar que el espacio se ha agotado y el programa ha terminado*/\n    printf(\"***Espacio de la camioneta agotado\\n\");\n    \n    return 0;\n}","solutionSteps":["Para aplicar las nuevas condiciones de la empresa usamos el ciclo do-while, de esta manera nos aseguramos que al menos un paquete sea registrado.","El la línea 15 cambiamos la sentencia while por el do, todas las instrucciones que están ubicadas dentro del ciclo seguirán estando dentro del mismo.","Luego al final del ciclo, en la línea 72, ubicamos la condición que indica cuándo repetir el ciclo, en este caso es mientras el peso_disponible sea mayor que 0.0","Recordemos siempre actualizar la variable que está siendo evaluada en la condición del ciclo (línea 32)."]},"exercises":[{"statement":"Escriba un programa que permita ingresar una serie de números hasta que el usuario ingrese 0, luego calcular y mostrar el promedio de dichos números.\n\nNota: los números pueden ser enteros o decimales.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias */\n    \n\n    /* Hacer:\n        - Solicitar numero por numero \n        - Sumar cada numero y guardar el resultado en una variable\n        - Contar la cantidad de numeros\n    */\n    \n    \n    /* Calcular el promedio*/\n    \n\n    /* Imprimir el promedio de los numeros ingresados */\n    \n\n    return 0;\n}","expectedOutput":"> Introduzca un numero: 32\n> Introduzca un numero: 43.2\n> Introduzca un numero: 45\n> Introduzca un numero: 15.7          \n> Introduzca un numero: 0\n> El promedio de los numeros ingresados es 27.18"},{"statement":"Escriba un programa que solicite al usuario ingresar un número entero, luego imprimir dicho número con sus dígitos invertidos.\n\nTip: Recuerde que la función del operador % es retornar el residuo de una división.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias */\n\n    /* Solicitar el numero entero*/\n\n    /* Imprimir el numero introducido con sus digitos invertidos \n        Tip: Puede utilizar el operador %\n    */\n   \n    \n    return 0;\n}","expectedOutput":"> Introduzca un numero entero: 23456\n> 65432"},{"statement":"Escriba un programa que encuentre el número más grande en una serie de números ingresada por el usuario. El programa debe solicitar los números uno por uno. La serie culmina cuando el usuario ingresa 0 o un número negativo. Al finalizar, el programa debe imprimir el número positivo más grande de la serie introducida.\n\nNota: Los números no son necesariamente enteros.\n\nTip: Declare e inicialice una variable con un número muy pequeño (cero por ejemplo) para empezar a comparar con los números introducidos y encontrar el mayor.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar \n        - Una variable para guardar cada numero introducido  \n        - Una variable con un valor muy pequeño para comparar con los numeros introducidos \n          y encontrar el mayor */\n\n\n    /* Hacer:\n        - Un ciclo que solicite numero por numero \n        - Comparar si el numero ingresado es el mayor\n        - Detener el ciclo cuando el numero ingresado sea 0 o negativo\n    */\n\n    \n    /* Imprimir el numero mas grande de la serie ingresada */\n\n\n    return 0;\n}","expectedOutput":"> Introduzca un numero: 53.4\n> Introduzca un numero: 23\n> Introduzca un numero: 17.2\n> Introduzca un numero: 60.5\n> Introduzca un numero: 58.1\n> Introduzca un numero: 43\n> Introduzca un numero: 0\n> El numero mas grande es 60.50"}]},{"_id":3,"title":"Ciclos: for","content":"Estructura del ciclo for. ¿Cuándo y cómo utilizarlo?","explanation":"El último ciclo de lenguaje C se denomina `for` y su estructura es la siguiente:\n```c\nfor ( /*expresion1*/ ; /*expresion2*/ ; /*expresion3*/)\n{\n    /* Instrucciones */\n}\n```\n - La *expresion1* representa el paso de **inicialización**, el cual se ejecuta *una sola vez* **ANTES** de que el ciclo se empiece a ejecutar\n - La *expresion2* es la **expresión de control**, es decir, se evalúa expresion2 y si resulta verdadero (1) se ejecuta la iteración, de lo contrario se detiene el ciclo\n - La *expresion3* es la operación que se ejecuta al **FINAL** de cada iteración.\n\nEl ciclo for se emplea cuando se tiene la certeza de la **cantidad de iteraciones** que se desea tener. Con esto en mente, vamos a crear un ciclo for para imprimir una cuenta regresiva desde 10 hasta 1:\n```c\nint i;\nfor (i = 10; i > 0; i--)\n{\n    printf(\"%d\\n\",i);\n}\n```\nEn la línea 5 declaramos la variable que vamos a usar en el ciclo, luego las expresiones del ciclo nos indican:\n\n - Inicializar la variable con un valor de 10 **ANTES** de empezar las iteraciones\n - **Repetir** la instrucción printf(\"%d\\n\",i); **mientras** i sea mayor que 0  \n - Al **finalizar** cada iteración decrementar el valor de i en 1 ","example":{"statement":"Volviendo a nuestro ejemplo de la empresa de envíos, supongamos esta vez que la empresa desea registrar sólo 3 paquetes en lo que resta del día. Vamos a modificar el programa en C para solicitar, calcular y mostrar el volumen, peso volumétrico y costo de envío de solo 3 paquetes. Al finalizar el registro de los paquetes se requiere imprimir el mensaje \"Registro de los 3 paquetes completado con exito\". ","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias para las dimensiones del paquete */\n    float alto, largo, ancho, volumen, peso_volumetrico; \n\n    /* Declaracion de la variable entera que guardara el TIEMPO DE ENTREGA del paquete */\n    int i, tiempo_entrega_dias;\n\n    /* Registrar exactamente 3 paquetes \n        - Iteraciones:\n              i = 0\n              i = 1\n              i = 2\n\n        - Recuerde que al final de cada iteración se aplica la operacion ++i, la cual \n        incrementa la i en 1, es decir, equivale a escribir i = i+1\n        - Cuando i = 3 no cumple la condicion de i < 3 entonces termina el ciclo.\n    */\n    for (i = 0; i < 3; ++i)\n    {\n        /* Solicitud de cada dimension */\n        printf(\"\\nIngrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Calculo del volumen  y peso volumetrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Imprimir en pantalla el volumen y peso volumetrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificacion del paquete segun su peso volumetrico con IF-ELSE*/\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"\\nIngrese el tiempo de entrega en dias (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, clasificar e informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                break;\n        }\n    }\n\n    /* Imprimir mensaje de registro completado */\n    printf(\"\\nRegistro de los 3 paquetes completado con exito\\n\");\n    \n    return 0;\n}","solutionSteps":["En este caso conocemos exactamente la cantidad de paquetes a registrar (3) por lo que un ciclo for se ajusta a las condiciones del problema.","Creamos la variable entera que manejaremos en el ciclo for, en este caso la llamaremos i. (Línea 9)","En la línea 21 declaramos el ciclo for cuyas expresiones indican: primero inicializamos la variable i en 0, segundo repetir el ciclo mientras i sea menor que 3 y por último incrementar el valor de i en 1 al finalizar cada iteración.","Después del ciclo for, fuera del mismo, imprimimos el mensaje que indica haber registrado los 3 paquetes de manera exitosa. (Línea 76)"]},"exercises":[{"statement":"Escriba un programa que imprima la tabla de multiplicar de un número entero ingresado por el usuario. La tabla de multiplicar debe ir desde 1 hasta 10.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias*/\n\n\n    /* Solicitar el numero entero */\n\n\n    /* Imprimir la tabla de multiplicar del numero ingresado desde 1 a 10 */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese un numero entero: 5\n> 1 x 5 = 5\n> 2 x 5 = 10\n> 3 x 5 = 15\n> 4 x 5 = 20\n> 5 x 5 = 25\n> 6 x 5 = 30\n> 7 x 5 = 35\n> 8 x 5 = 40\n> 9 x 5 = 45\n> 10 x 5 = 50"},{"statement":"Se necesita un programa que calcule el factorial de un número entero ingresado por el usuario. \nRecuerde que para calcular el factorial de número, por ejemplo 5, es 5! = 5 * 4 * 3 * 2 * 1 = 120","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias*/\n\n\n    /* Solicitar el numero entero */\n    \n\n    /* Calcular el factorial del numero ingresado */\n    \n    \n    /* Imprimir el resultado de la forma \"NUMERO! = RESULTADO\" */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese un numero entero: 5\n> 5! = 120"},{"statement":"Complete el siguiente programa para imprimir un mes como en un calendario. El usuario ingresa la cantidad de días del mes y el día de la semana en el cual empieza dicho mes.\n\nTip: \n- El programa no es tan difícil como parece. La parte más importante es un ciclo for con la variable i que vaya desde 1 hasta la cantidad de días del mes, imprimiendo cada valor de i. Dentro del ciclo, habrá una sentencia if que evalúe si i es el último día de la semana, de ser así se imprime un salto de línea \\n.\n- Al igual que salto de línea (\\n) existe la opción de imprimir con la función printf una tabulación (\\t)","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar las variables necesarias para controlar las iteraciones del ciclo, \n        guardar la cantidad de dias que tiene el mes y el primer dia de la semana de ese mes */\n\n\n    /* Solicitar la cantidad de dias del mes y el primer dia (1=Lun, 7=Dom) */\n    \n\n    /* Mostrar la inicial de los días de la semana:\n        Nota: Observe el uso de \\t para imprimir un espacio (tabulacion) entre cada inicial, \n                con este \\t todas las letras quedan separadas por el mismo espacio.\n    */\n    printf(\"\\nL\\tM\\tX\\tJ\\tV\\tS\\tD\\n\");\n    \n    /* Imprimir la cantidad de espacios en blanco segun el primer dia de la semana que ha \n        indicado el usuario */\n    \n\n    /* Imprimir los dias de la semana \n        Nota: Recuerde imprimir un salto de linea (\\n) al final de la semana, es decir, cada\n                7 dias \n    */\n   \n    \n    return 0;\n}","expectedOutput":"> Ingrese el numero de dias del mes: 31\n> Ingrese el primer dia de la semana (1=Lun, 7=Dom): 6\n>\n> L   M   X   J   V   S   D\n                    1   2   \n> 3   4   5   6   7   8   9   \n> 10  11  12  13  14  15  16  \n> 17  18  19  20  21  22  23  \n> 24  25  26  27  28  29  30  \n> 31"}]}]}
{"_id":4,"title":"Unidad VI. Contadores, acumuladores, vectores y strings","lessons":[{"_id":1,"title":"Contadores y Acumuladores","content":"Aumentar o disminuir valores progresivamente dentro de los ciclos. Acumular valores y guardarlos en una variable. Operadores abreviados para incrementar, disminuir y acumular valores.","explanation":"Muchas veces, en el cuerpo de los ciclos necesitemos aumentar o disminuir progresivamente algún valor (**contador**) o tal vez sumar valores en alguna variable y mostrar el total al final (**acumulador**), para estos casos existen operadores que nos ayudan a simplificar expresiones. Si tenemos:\n```c\nint i=0;\n```\n - `i++;`    → se usa el valor viejo (0) en la instrucción actual y al finalizar, el operador ++ incrementa en 1 el valor guardado en i:\n  - `printf(\"%d\\n\", i++);` → imprime 0\n - `++i;`     → se incrementa en 1 el valor guardado en i ANTES de ser usado en la instrucción actual:\n  - `printf(\"%d\\n\", ++i);` → imprime 1\n - `i--;`    → se usa el valor viejo (0) en la instrucción actual y al finalizar, el operador -- decrementa en 1 el valor guardado en i\n - `--i;`     → se decrementa en 1 el valor guardado en i ANTES de ser usado en la instrucción actual\n - `i+=6;`     → el operador += equivale a tomar el valor que hay en i, sumarle 6 y guardar el resultado nuevamente en i. Con esto podemos crear acumuladores de la forma: `acumulador += nuevoValor;` donde se toma el valor que hay en *acumulador*, se suma el *nuevoValor* y se guarda el resultado nuevamente en la variable *acumulador*.\n - El operador `+=` se aplica de la misma manera con los demás operadores matemáticos `-=`, `*=`, `/=`, `%=`","example":{"statement":"La empresa de envíos Rapidash decide que el precio de un paquete se calcule de acuerdo a su categoría (pequeño, mediano, grande) y al tiempo de entrega elegido por el cliente (1, 2 o 3 días) como se muestra a continuación:\n- Paquete grande: 2196.43\n- Paquete mediano: 1523.86\n- Paquete pequeño: 1018.73\n\n- Tiempo de entrega 1 día: 1250\n- Tiempo de entrega 2 días: 1000\n- Tiempo de entrega 3 días: 300\n\nAsí pues, enviar un paquete mediano en 2 días tendrá un costo de 1523.86 + 1000 = 2523.86. La empresa desea visualizar el costo del envío de cada paquete registrado. También se requiere contar y mostrar la cantidad de paquetes enviados en un día, sumar y mostrar el costo de todos los paquetes enviados.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declaracion de las variables necesarias para las dimensiones del paquete, guardar el\n        calculo del costo del paquete actual y del costo total por el envio de los paquetes del dia\n    */\n    float alto, largo, ancho, volumen, peso_volumetrico, \n          costo_paquete_actual,\n          costo_total_todos_paquetes = 0.0f; \n\n    /* Declaracion de variables enteras \n        - Una para guardar el tiempo de entrega que escoja el cliente\n        - Una para guardar la respuesta a la pregunta ¿Otro paquetes? (1:Si, 0:No)\n        - Una para contar la cantidad de paquetes registrados en el dia\n    */\n    int tiempo_entrega_dias, respuesta, cantidad_paquetes = 0;\n\n    /* Registro de paquetes hasta que la respuesta sea 0 (No mas paquetes)\n        - Contar cada paquete registrado\n        - Sumar cada costo de un paquete y guardar el resultado en costo_total_todos_paquetes\n    */\n    do{\n        /* Solicitud de cada dimension */\n        printf(\"\\nIngrese las dimensiones del paquete\\n\");\n        printf(\"Alto:\");\n        scanf(\"%f\",&alto);\n        printf(\"Largo:\");\n        scanf(\"%f\",&largo);\n        printf(\"Ancho:\");\n        scanf(\"%f\",&ancho);\n\n        /* Calculo del volumen  y peso volumetrico*/\n        volumen = alto*largo*ancho;\n        peso_volumetrico = alto*largo*ancho/5000;\n\n        /* Imprimir en pantalla el volumen y peso volumetrico del paquete */\n        printf(\"Volumen del paquete: %f\\n\", volumen);\n        printf(\"Peso volumetrico del paquete: %f\\n\", peso_volumetrico);\n\n        /* Clasificacion del paquete segun su peso volumetrico con IF-ELSE \n           Calculo del precio del paquete actual segun su categoria\n        */\n        if ( peso_volumetrico >= 10.0f )\n        {\n            printf(\"El paquete es grande\\n\");\n            costo_paquete_actual=2196.43f;\n        }\n        else{\n            if ( (peso_volumetrico > 5)&&(peso_volumetrico < 10.0f) )\n            {\n                printf(\"El paquete es mediano\\n\");\n                costo_paquete_actual=1523.86f;\n            }\n            else{\n                printf(\"El paquete es pequeño\\n\");\n                costo_paquete_actual=1018.73f;\n            }  \n        }\n\n        /* Solicitud del tiempo de entrega */\n        printf(\"Ingrese el tiempo de entrega en dias (1, 2 o 3):\\n\");\n        scanf(\"%d\",&tiempo_entrega_dias);\n\n        /* Evaluar, informar la tarifa correspondiente al tiempo de entrega\n            elegido por el usuario y sumar el costo al costo_paquete_actual\n         */\n        switch(tiempo_entrega_dias){\n            case 1:\n                printf(\"La tarifa es 1250\\n\");\n                costo_paquete_actual+=1250.0f;\n                break;\n            case 2:\n                printf(\"La tarifa es 1000\\n\");\n                costo_paquete_actual+=1000.0f;\n                break;\n            case 3:\n                printf(\"La tarifa es 300\\n\");\n                costo_paquete_actual+=300.0f;\n                break;\n        }\n\n        /* Actualizar el contador de paquetes */\n        cantidad_paquetes++;\n\n        /* Actualizar la suma (acumulador) del costo de todos los paquetes registrados */\n        costo_total_todos_paquetes+=costo_paquete_actual;\n\n        /* Mostrar el costo del paquete acutal */\n        printf(\"El envio del paquete #%d es %.2f\\n\", cantidad_paquetes, costo_paquete_actual);\n\n        /* Preguntar si hay otro paquete*/\n        printf(\"\\n¿Hay otro paquete por registrar (1:Si, 0:No)? \\n\");\n        scanf(\"%d\",&respuesta);\n    }while(respuesta == 1);\n\n    /* Imprimir la cantidad de paquetes registrados en el dia y costo total por el \n        envio de los mismos */\n    printf(\"\\nHoy se registraron %d paquetes con un costo total de %.2f\\n\",cantidad_paquetes, costo_total_todos_paquetes);\n    \n    return 0;\n}","solutionSteps":["Empezamos por definir el ciclo que manejará las iteraciones del programa, en este caso un ciclo do-while se adapta a los requerimientos.","Declaramos una variable para guardar el costo del envío del paquete que se esté registrando (línea 9), al clasificar el paquete según su peso volumétrico asignamos el costo correspondiente. Luego al definir el tiempo de entrega sumamos el monto al costo del paquete actual.","Declaramos una variable para contar la cantidad de paquetes registrados en un día (línea 17) e incrementamos su valor dentro del ciclo do-while (línea 84).","Declaramos e inicializamos una variable para sumar el costo total de todos los envíos del día (línea 10) y vamos acumulando el costo de cada paquete (línea 87).","Se imprime el costo del paquete actual en cada iteración (línea 90).","Para repetir el proceso de registro de un paquete, preguntamos si hay otro paquete pendiente, guardamos la respuesta (1:Si, 0:No) en una variable entera (declarada en la línea 17) y evaluamos en la condición while: sí la respuesta es igual a 1, entonces se repite el ciclo do-while.","Al finalizar el ciclo do-while (cuando no hay más paquetes) se imprime la cantidad de paquetes registrados en el día y el costo total del envío de los mismo."]},"exercises":[{"statement":"Una ONG se encarga de realizar jornadas de vacunación en las escuelas primarias. Cada día empiezan con 1000 vacunas. Necesitan un programa que controle las entregas realizadas en cada escuela y avise si el inventario baja a menos de 200 unidades para regresar al centro principal y tomar más vacunas. Cuando el inventario se está agotando (menos de 200 vacunas) se debe mostrar cuántas escuelas fueron visitadas y la cantidad de vacunas restantes.\n\nNota: Las escuelas visitadas no van a tener más de 200 alumnos.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n    \n\n    /* Hacer:\n        - Visitar escuelas mientras hayan mas de 200 vacunas el inventario\n        - Contar cada escuela visitada\n        - Actualizar la cantidad de vacunas (disminuir)\n    */\n    \n\n    /* Imprimir la cantidad de vacunas restantes cuando el inventario está bajo */\n    \n\n    /* Imprimir la cantidad de de escuelas visitadas */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese la cantidad de alumnos en la escuela: 200\n> Ingrese la cantidad de alumnos en la escuela: 134\n> Ingrese la cantidad de alumnos en la escuela: 168\n> Ingrese la cantidad de alumnos en la escuela: 200\n> Ingrese la cantidad de alumnos en la escuela: 198\n> Inventario bajo, quedan 100 vacunas\n> En total se visitaron 5 escuelas"},{"statement":"Escriba un programa que permita contar los números pares existentes dentro de un rango ingresado por el usuario. El flujo del programa sería: solicitar al usuario los números enteros (a y b) que delimitan el rango, codificar un ciclo que vaya desde a hasta b, contar y sumar los números pares. Por último mostrar la cantidad de números pares encontrados y la suma de ellos.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n\n\n    /* Solicitar los numeros enteros que delimitan el rango */\n\n    /* Contruir un ciclo que vaya desde a hasta b \n       Contar la cantidad de numeros pares que se encuentran dentro del rango\n       Sumar los numeros pares que se encuentran dentro del rango\n    */\n\n\n    /* Imprimir la cantidad de numeros pares dentro del rango y la suma de ellos */\n    \n\n    return 0;\n}","expectedOutput":"> Ingrese los numeros enteros que delimitan el rango\n> a: 1\n> b: 10\n> Existen 4 numeros pares dentro del rango y su suma es 20"},{"statement":"Se requiere un programa en C capaz de registrar temperaturas en ºF. Se necesita transformar cada temperatura a ºC, contar la cantidad de temperaturas positivas y negativas, calcular y mostrar el promedio de las temperaturas positivas y negativas. El programa le permitirá al usuario ingresar tantas temperaturas como sea necesario.\n\nNota: Para transformar una temperatura de ºF a ºC se utiliza la fórmula: °C = (°F  -  32)*5/9.","code":"#include <stdio.h> \n\nint main()\n{\n    /* Declarar de las variables necesarias */\n\n\n    /* Hacer:\n        - Solicitar cada temperatura en ºF\n        - Transformar la temperatura a ºC\n        - Contar y sumar cada temperatura positiva y negativa por separado\n        - Preguntar si hay otra temperatura por registrar (1:Si, 0:No)\n    */\n    \n\n    /* Imprimir la cantidad de temperaturas positivas y el promedio de ellas en ºC */\n    \n\n    /* Imprimir la cantidad de temperaturas negativas y el promedio de ellas en ºC */\n    \n    \n    return 0;\n}","expectedOutput":"> Ingrese la temperatura (ºF): 12.4\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 43.5\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 5.67\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 432.1\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 1\n> Ingrese la temperatura (ºF): 67.45\n> ¿Hay otra temperatura por registrar (1:Si, 0:No)? 0\n> Existen 3 temperaturas positivas y su promedio es 82.79ºC\n> Existen 2 temperaturas positivas y su promedio es -12.76ºC"}]},{"_id":2,"title":"Arreglos: vectores","content":"Definición de arreglos. Declaración de un vector. Condiciones en los arreglos. Acceso a los elementos de un vector. Asignación de valores en un vector.","explanation":"Un arreglo es una estructura que contiene un número X de valores, siendo todos los valores del mismo tipo, estos valores son conocidos como elementos. La forma más simple de un arreglo tiene solo una dimensión, se denomina arreglo unidimensional o vector.\nPara declarar un vector debemos especificar el tipo de dato de los elementos que vamos a guardar y la cantidad de elementos, por ejemplo:\n```c\nint vector[10];\n```\n####  Imagen\nDe aquí podemos observar:\n\n - Para acceder a un elemento en particular, escribimos el nombre de nuestro vector e indicamos el **índice** al que necesitamos acceder\n - Los índices para acceder a cada elemento *siempre empiezan* por **0**, en este vector de 10 elementos, el primer elemento se accede con el índice 0, el segundo con el índice 1, … y el elemento 10 se accede con el índice 9\nEn general si un vector es declarado de tipo `int` entonces cada elemento será tratado como si fuera una variable de tipo `int`, por lo tanto, podemos ejecutar las mismas operaciones que ya hemos aplicado a las variables tipo `int`:\n```c\nint vector[10];\n\n/*Asigna el valor en la quinta \n    posicion (indice 4) de vector */\nvector[4] = 0; \n\n/*Guarda un valor entero en la tercera \n    posicion (indice 2) de vector */\nscanf(\"%d\",&vector[2]);\n\nfor (i = 0; i < 10; i++)\n{\n    /*Imprime en pantalla todos los elementos\n        de vector usando la variable i como\n        indice */\n    printf(\"%d\\n\",vector[i]);\n}\n```","example":{"statement":"11 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestiae magni, facere dolores iusto dolore aspernatur quisquam! Ratione rerum architecto totam ab in, assumenda sint similique qui inventore aperiam fugit adipisci enim obcaecati blanditiis maxime ullam, et consequatur nam maiores quia ad aspernatur error nulla? Vero sit nostrum quidem officiis aliquam, praesentium, iusto ullam obcaecati placeat rem saepe illo temporibus libero in dicta fuga, labore reiciendis voluptates doloremque iure sunt fugit ducimus itaque dolorum. Voluptates aliquam, ratione corporis eaque sed. Tempore!","code":"#include <stdio.h> \nint main(){ \n    return 11; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"11.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Recusandae explicabo esse, voluptates! Nulla fugiat beatae, facere sed dolor ut deleniti qui at rem nisi repellendus maxime architecto est minus explicabo quisquam aperiam possimus eos. Quae obcaecati laboriosam ex error possimus a! Omnis fugiat quibusdam tempore neque doloribus ut eligendi repellendus, soluta corporis dolores consectetur beatae, repellat excepturi, accusantium molestiae sequi quo accusamus molestias modi cupiditate animi ipsam. Numquam ex tempora excepturi nostrum ad doloribus architecto adipisci veniam ipsam fugiat harum, labore, saepe officiis. Doloremque alias, numquam quaerat deserunt nesciunt, itaque nemo, cupiditate incidunt nulla harum iure! Voluptatum aliquid repudiandae, vero.","code":"#include <stdio.h> \nint main(){ \n    return 11.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"11.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dignissimos quae dolores quia est, aspernatur vel, debitis magni, aliquam delectus doloremque animi quis facilis magnam reprehenderit nihil ad. Voluptates corporis quaerat officia temporibus, illo quae, libero provident neque esse similique, fugiat nihil adipisci molestiae aliquid ex fugit aspernatur architecto. Vero obcaecati eius unde, quis praesentium cum officia quaerat itaque, voluptate fugiat, molestias, minima quo. Ducimus minima accusamus veniam non est harum explicabo vero, numquam porro distinctio illum nesciunt iusto esse quia, animi quam. Temporibus dolorum laborum perferendis quasi quisquam quod porro, magni aperiam nesciunt animi aut dicta commodi quo, debitis tempore.","code":"#include <stdio.h> \nint main(){ \n    return 11.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"11.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error, fuga placeat accusantium enim recusandae reiciendis quibusdam nobis cupiditate eum praesentium! Sit consequuntur reiciendis amet quaerat nihil maxime soluta, impedit, quia dolor esse deserunt veritatis ratione in nobis. Ea eaque optio ipsa voluptas velit laudantium! Consectetur dolor illo itaque praesentium officia error. Quasi rerum exercitationem nulla quisquam hic corrupti dolore, reiciendis sit enim laborum similique molestiae necessitatibus magni, perferendis numquam aliquid. Perspiciatis modi doloremque nisi magni perferendis nobis, dolorem, quo, non obcaecati eius minima ipsum ad blanditiis omnis veritatis reiciendis adipisci inventore? Numquam illum, maxime, perferendis voluptatibus exercitationem magni sit maiores!","code":"#include <stdio.h> \nint main(){ \n    return 11.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]},{"_id":3,"title":"Strings","content":"Declaración de strings. Asignación de valores en un string. Imprimir en la consola strings con printf y puts. Leer y guardar valores en un string con scanf y gets.","explanation":"Para crear y utilizar una cadena de caracteres (*string*) en lenguaje C, usamos dos características que ya vimos: tipo de dato `char` (caracter) y un vector (arreglo unidimensional). Digamos que necesitamos un variable capaz de almacenar un máximo(puede ser menos) de 10 caracteres:\n```c\nchar mes[11];\n```\nLenguaje C agrega caracteres null (representado por `\\0`) para marcar el final de la cadena, es por esto que creamos la variable mes con un espacio adicional a los 10 que se requieren. \nPodemos inicializar nuestro *string* en la misma instrucción de declaración:\n```c\nchar mes[11]=\"Octubre\";\n```\n####  Imagen\nTambién es posible declarar un string sin precisar su tamaño, en este caso el compilador se encarga de calcularlo:\n```c\nchar mes[]=\"Septiembre\";\n```\nPara imprimir en pantalla un *string* con la función `prinft`, usamos `%s` para marcar dónde queremos que vaya el contenido de la variable:\n```c\nprintf(\"Mes: %s\\n\",mes);\n```\nPara leer y guardar una cadena de caracteres en nuestra variable string, podemos usar la función `scanf`:\n```c\nscanf(\"%s\",mes);\n```\nLa función `scanf` omite los espacios en blanco, es decir, lee y guarda cada caracter hasta que encuentra un espacio en blanco (también se omiten los espacios en blanco que pueda haber antes de los caracteres)\n\nExisten otras dos funciones para imprimir y leer strings:\n```c\ngets(mes);\nputs(mes);\n```\nCuya principal diferencia es que `gets` no omite los espacios en blanco al leer una cadena de caracteres y `puts` solo imprime strings (cadena de caracteres) y siempre agrega el caracter de nueva linea `\\n` al final de la impresión. \n\nComo un string es un vector de caracteres, podemos acceder a cada caracter, es decir, a cada elemento a través de un índice de la siguiente manera:\n```c\nchar c = mes[3];\nprintf(\"Deletreo: \\n\");\nfor (int i = 0; i < 11; ++i)\n{\n    printf(\"- %c\\n\", mes[i]);\n}\n```","example":{"statement":"12 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repellat odit, ipsam aliquam tempora officiis adipisci dignissimos harum suscipit ut vero, maxime explicabo beatae laborum accusamus hic dicta inventore id voluptas. Sit veniam ex, doloribus sint sequi ullam. Impedit dignissimos molestias deserunt voluptatibus odit quaerat voluptatum laborum labore, magnam amet, quo nostrum, dolorum, iure. Alias est in distinctio unde tempore eaque magnam? In rem dicta perspiciatis reprehenderit praesentium voluptate explicabo, aliquam impedit cum vitae, quo, ex neque quasi, quaerat vero. Deleniti.","code":"#include <stdio.h> \nint main(){ \n    return 12; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"12.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo sit delectus repellat vero, libero, debitis eveniet minima molestias adipisci qui. Architecto veritatis maiores temporibus possimus at, ea neque cumque ullam laborum. Unde beatae hic laboriosam minima, aliquid corrupti deserunt nam aliquam eligendi fuga minus atque fugit, itaque impedit, magnam culpa in? Nisi minima dolorem, qui eos, obcaecati temporibus quasi mollitia soluta vel inventore in, ipsa aperiam quidem et odit rerum dolor eveniet tempore impedit! Dolore illum id obcaecati sunt soluta pariatur veritatis, maxime accusantium minima, itaque provident fuga, quisquam unde amet nesciunt ratione minus reprehenderit sapiente qui optio? Labore, qui!","code":"#include <stdio.h> \nint main(){ \n    return 12.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"12.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Provident tempora modi, voluptas sint quas delectus repudiandae beatae ab quaerat atque quasi iusto autem? Consequatur, sapiente iure, ad dignissimos vitae id veritatis veniam sit accusamus assumenda voluptatem at porro obcaecati numquam nemo repudiandae quos enim ea dolores recusandae rerum totam soluta, architecto consequuntur. Fuga blanditiis, similique commodi laboriosam sequi voluptas odio, atque in aliquid iure minima ipsum enim labore recusandae assumenda aperiam nesciunt ea totam quo earum eaque repudiandae suscipit dolores ut. Architecto nostrum quasi, voluptates nulla, deleniti maxime ab consequatur cupiditate maiores impedit quia iusto a quae, eveniet perferendis vero.","code":"#include <stdio.h> \nint main(){ \n    return 12.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"12.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta laudantium ex accusantium, libero iste, id assumenda incidunt reprehenderit consequatur repudiandae, molestiae. Dicta minima, eius nihil earum necessitatibus, ratione consequatur nemo aliquid delectus rem quibusdam vero inventore, natus harum maiores aliquam vel maxime, iure odio animi quisquam? Explicabo impedit maiores neque harum aliquam, natus blanditiis fugiat consequatur beatae dolorem quis, voluptates at labore, provident quae magni voluptate repellat sapiente nulla, porro? Ipsum beatae repellat suscipit, expedita repudiandae aspernatur praesentium temporibus molestiae repellendus! Accusantium quidem assumenda delectus nesciunt ut rem quis laborum et voluptates tenetur error natus molestiae commodi, aliquid sunt eius.","code":"#include <stdio.h> \nint main(){ \n    return 12.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]}]}
{"_id":5,"title":"Unidad V. Funciones, matrices y operaciones con strings","lessons":[{"_id":1,"title":"Funciones","content":"Definición y uso de una función. Estructura de una función en lenguaje C. Llamado de una función.","explanation":"Una función es una serie de instrucciones agrupadas por los signos `{ }`, con un nombre y pueden o no, retornar un valor. Las funciones nos permiten dividir nuestro programa en piezas pequeñas más fácil de modificar y reutilizar bloques de código, es decir, escribimos la función una vez y la usamos las veces necesarias.\n\nSi en nuestro programa debemos calcular en varias oportunidades el promedio de dos números, podemos escribir una función para calcular y retornar el promedio:\n```c\nint promedio(int valor1, int valor2)\n{    \n    int promedio;\n    promedio = (valor1+valor2)/2;\n    return promedio;\n}\n```\n - Se define el tipo de dato que retorna la función, en este caso es `int`. Puede ser cualquier tipo de dato (`float`, `char`, etc) y en caso de no retornar ningún valor, será de tipo `void` (vacío).\n - Se escoge el nombre de la función (*promedio*)\n - Las funciones pueden recibir *parámetros o argumentos*, ubicados dentro de los `( )` y separados por coma `,`. Debemos especificar el tipo de datos de cada parámetro. En este caso los valores recibidos serán guardados en las variables *valor1* y *valor2* respectivamente, con ellas podemos realizar las operaciones que hemos aplicados a variables de tipo `int`.\n - Se escriben las instrucciones que queremos que se ejecuten al llamar a esta función. En este caso se declara la variable *promedio* y se le asigna el valor resultante de la expresión `(valor1+valor2)/2`\n - Se retorna el valor de la variable promedio, notemos que esta variable es del mismo tipo que especificamos al declarar la función, es decir, int.\n\nPara llamar la función escribimos el nombre de la función seguido de los parámetros que requiere la misma:\n```c\nint x = 3, y = 5;\nint resultado = promedio(3,5);\n```\nObservemos que:\n\n - No es necesario que las variables enviadas por parámetro se llamen valor1 y valor2. \n - Como la función promedio retorna un valor de tipo entero, podemos asignar ese valor a una variable del mismo tipo, en este caso resultado.","example":{"statement":"13 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid quas fugit modi consequuntur labore! Sunt incidunt quidem voluptatem cumque ad, tempore eveniet voluptate, amet. Dicta error vero soluta animi enim? Totam esse sapiente cupiditate adipisci qui dolor consequuntur quis, omnis eum exercitationem unde iure repellat doloribus et perferendis, libero architecto facere provident voluptate, aperiam, inventore facilis tempora. Beatae amet harum veniam non placeat voluptas ipsam autem dolorem impedit. Eligendi ea eum dolorem tempore, sapiente. Maiores assumenda quidem molestias a aspernatur.","code":"#include <stdio.h> \nint main(){ \n    return 13; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"13.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nihil corporis beatae libero molestiae incidunt ipsa quibusdam, quod et iste quos eligendi ab minima sunt. Quia eum expedita ea tempora sequi iure nobis sed, nulla exercitationem! Consequuntur eaque dolorem delectus cum minus, laudantium maxime temporibus explicabo eius consectetur ducimus quis fugiat numquam animi, debitis perferendis illo repudiandae asperiores autem culpa rem ipsa molestiae. Qui repellat veritatis, corporis tempore numquam eaque ipsa reprehenderit, odit, dicta veniam unde neque. Velit ut, quos. Quis minima perspiciatis eligendi animi repellendus libero officiis tempora provident hic, voluptates quos obcaecati inventore consequuntur minus in repellat quidem beatae!","code":"#include <stdio.h> \nint main(){ \n    return 13.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"13.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestias hic aut, quisquam explicabo repellendus voluptates voluptas tempora ab dignissimos quis officiis ipsa dolorum consequuntur vel. Dignissimos tempore eveniet laborum quo consectetur fugiat animi, totam omnis sed possimus corrupti, velit delectus aspernatur provident libero reiciendis fuga. Eos reiciendis ratione, neque velit perspiciatis possimus fuga obcaecati. Cum eligendi aliquid dolorem adipisci mollitia, nulla laudantium hic reprehenderit tempora, nesciunt veniam animi ullam necessitatibus voluptatibus nisi optio modi accusantium est. Cupiditate temporibus, suscipit ut. Assumenda, enim? Natus magnam nisi quis officia consequuntur quod neque ullam explicabo veritatis dolorem. Vero praesentium ducimus nihil veritatis, nulla.","code":"#include <stdio.h> \nint main(){ \n    return 13.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"13.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam, corrupti distinctio laudantium, aliquam ex sed, eos pariatur impedit eum ea deleniti! Vel cumque doloremque atque excepturi est hic similique a inventore et provident quidem animi obcaecati, vero deleniti, repellat nihil itaque! Nihil maiores at accusantium ab architecto, possimus officiis? Iste possimus nemo a, corporis nihil ut veritatis quae architecto fuga modi maxime recusandae. Nam, cupiditate molestiae odit eligendi rem sint quibusdam beatae non, nulla adipisci neque accusamus ipsa sapiente. Ea ipsa minus cumque obcaecati hic necessitatibus enim, praesentium consequatur atque blanditiis iure itaque commodi quae, esse autem ipsum in ex.","code":"#include <stdio.h> \nint main(){ \n    return 13.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]},{"_id":2,"title":"Arreglos: matrices","content":"Declaración e inicialización de una matriz. Acceso a los elementos de una matriz. Recorrer cada elementos de una matriz utilizando el ciclo for.","explanation":"Veamos cómo declarar un arreglo bidimensional o matriz::\n```c\nfloat matriz[5][9];\n```\n Aquí tenemos una matriz de tipo `float`, tiene 5 filas y 9 columnas. Recordemos que los índices de los arreglos comienzan por 0, por lo tanto nuestra matriz luce:\n####  Imagen\nPara acceder a un elemento debemos especificar las coordenadas de la forma `matriz[fila][columna]`, es decir, si queremos acceder al elemento ubicado en la fila 3, columna 6, escribimos `matriz[3][6]`\n\nConsideremos por ejemplo, inicializar un arreglo para usar como una matriz identidad\n####  Imagen\nNecesitamos visitar cada elemento, un par de ciclos `for` resulta perfecto, uno para recorrer cada fila y otro para recorrer cada columna:\n```c\nfor (fila = 0; fila < 10; ++fila)\n{\n    for (columna = 0; columna < 10; ++columna)\n    {\n        // Si estamos en la diagonal principal, asignar valor 1.0f\n        if (fila == columna)\n        {\n            matriz[fila][columna]=1.0f;\n        }else{\n            matriz[fila][columna]=0.0f;\n        }\n    }\n}\n```\nPara inicializar una matriz especificamos los elementos de cada fila con la ayuda de `{ }` de la siguiente manera:\n```c\nint matriz[4][6] = {{1,1,0,1,0,1},\n                    {0,0,1,1,0,0},\n                    {0,1,1,0}};\n```\nAl no inicializar algún elemento, este tendrá como valor 0. En este ejemplo las últimas dos columnas de la 3º fila y la 4º fila completa tendrán 0.\n\nTambién podemos *omitir* los `{ }` y escribir todos los elementos separados solo por comas, una vez el compilador encuentre suficientes valores para llenar una fila, empieza con la siguiente:\n```c\nint matriz[4][6] = {1,1,0,1,0,1,\n                    0,0,1,1,0,0,\n                    0,1,1,0};\n```\nDe la misma manera se completan los elementos faltantes con el valor 0.","example":{"statement":"14 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quia quae quasi in beatae, ratione repellendus, unde suscipit dicta expedita accusantium culpa sint odio maxime aperiam dolor aut nostrum praesentium commodi, ad debitis! Animi distinctio, ut cupiditate officia! Reiciendis nobis recusandae incidunt debitis accusamus architecto, eius fuga eveniet neque ducimus totam error sunt itaque nostrum! Sequi reiciendis natus id ipsam, nesciunt, illum magni necessitatibus expedita sunt, voluptatibus error ut quidem. Provident ab at id, unde quaerat quia tempore perspiciatis, iusto aliquam.","code":"#include <stdio.h> \nint main(){ \n    return 14; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"14.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Et provident quaerat optio maiores veritatis dolor eligendi inventore, porro minus cum, error quo ut in, ea consequuntur corporis necessitatibus tempora alias tenetur quisquam ducimus pariatur. Nulla labore amet tempora impedit ducimus ab dolores rem blanditiis optio, iure quos odio error reiciendis temporibus accusamus nihil dicta placeat beatae fuga, possimus corporis itaque ipsa at harum. Minus adipisci aliquid suscipit. Quas, accusamus! Non eaque reiciendis excepturi eligendi laboriosam at ducimus, quam voluptate dolores sunt nesciunt. Cum labore sint distinctio nostrum quos natus fugiat, possimus ex deleniti iusto eligendi perferendis eaque, quasi, harum libero!","code":"#include <stdio.h> \nint main(){ \n    return 14.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"14.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eaque, porro explicabo et. Culpa quam suscipit libero temporibus praesentium, labore officiis optio assumenda veniam! Consequatur, porro. Minus dolorem quasi eius, sint, deserunt necessitatibus nisi fugiat fugit ratione, culpa optio? Aperiam maiores optio beatae at illo, a, porro veniam architecto cupiditate autem esse incidunt reprehenderit in nostrum consectetur ex. Dolor accusamus obcaecati quidem ab laboriosam fugiat, alias harum natus saepe provident quod aperiam facere inventore veniam asperiores iste eaque voluptatem incidunt nostrum neque, ex, non aliquid! Facere deserunt fuga ut a provident delectus voluptatibus enim dignissimos ipsum, neque voluptas repudiandae, sapiente nihil.","code":"#include <stdio.h> \nint main(){ \n    return 14.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"14.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Numquam ullam ut ratione quod enim nam temporibus nihil corrupti eligendi repellendus quis architecto dolor laborum totam saepe explicabo pariatur blanditiis, ipsa autem! Consequatur nam, placeat veniam quis! Iusto nesciunt delectus porro, accusamus. Nobis aspernatur consequuntur provident sint corrupti cumque sit blanditiis deleniti autem doloremque reiciendis unde repellat, tenetur sapiente ad voluptate quidem adipisci, distinctio incidunt nam! Omnis dolor, molestias voluptatibus beatae sunt id libero laborum, corrupti molestiae excepturi fugiat, distinctio dolore repellendus. Necessitatibus reprehenderit sapiente, tempora at laborum labore. Nisi mollitia ipsam deleniti quis quidem ad delectus numquam obcaecati voluptates in.","code":"#include <stdio.h> \nint main(){ \n    return 14.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]},{"_id":3,"title":"Operaciones con strings (strcpy, strlen, strcat y strcmp)","content":"Librería string.h. Copiar strings, calcular la longitud de un string, concatenar strings y comparar strings.","explanation":"Los arreglos tienen algunas restricciones, por ejemplo, no es posible copiar un arreglo en otro con el operador de asignación `=`, ni comparar si dos vectores son iguales con el operador `==` \n### ERROR\n```c\nchar string1[10] = \"cadena 1\";\nchar string2[10];\nstring2 = string1;\n```\n### ERROR\n```c\nif(string1 == string2)...\n```\nAfortunadamente, en C tenemos la librería `string.h` que nos proporciona funciones para conseguir lo que necesitamos:\n\n- strcpy → `strcpy(string2, string1);` \n  - **Copia** el contenido de la variable *string1* en la variable *string2*\n    \n    ```c\n    char string1[10] = \"prueba\",\n        string2[10];\n    strcpy(string2,string1);\n    // string2 = \"prueba\"\n    ```\n- strlen → `strlen(string);` \n  - Calcula y devuelve la **longitud** (`int`) de la variable *string*\n    \n    ```c\n    char cadena[10] = \"prueba\";\n        int longitud = strlen(cadena);\n    // longitud = 6\n    ```\n- strcat → `strcat(string1, string2);` \n  - **Añade** el contenido de la variable *string2* al final del contenido en la variable *string1*\n    \n    ```c\n    char cadena1[20] = \"¡Hola \",\n        cadena2[10] = \"mundo!\";\n        strcat(cadena1, cadena2);\n        // cadena1 = \"¡Hola mundo!\"\n    ```\n- strcmp → `strcmp(string1, string2);` \n  - **Compara** las cadenas de caracteres *string1* y *string2*, devuelve un valor menor que, igual que o mayor que 0 si string1 es menor que, igual que o mayor que string2\n    \n    ```c\n    if (strcmp(cadena1,cadena2) == 0)\n        // cadena1 es igual que cadena2 ??\n    \n        if (strcmp(cadena1,cadena2) < 0)\n        // cadena1 es menor que cadena2 ??\n    \n        if (strcmp(cadena1,cadena2) > 0)\n        // cadena1 es mayor que cadena2 ??\n    ```","example":{"statement":"15 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Molestias voluptatibus tempora neque nam iusto, velit, fugiat reprehenderit, at vero officiis adipisci ab nemo officia dignissimos rem asperiores, id cum. Numquam magnam commodi itaque debitis doloremque. Velit quae explicabo eum vel ipsa odit esse praesentium quas earum sapiente et eos culpa inventore laboriosam nobis consequatur perspiciatis, illum minima mollitia dolorem! Quod non, earum quam. Consequatur magnam placeat alias vero. Rem eos commodi temporibus, at quis nemo suscipit. Perspiciatis dignissimos quas ratione.","code":"#include <stdio.h> \nint main(){ \n    return 15; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"15.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Numquam velit aliquid quis adipisci, ipsum veritatis doloribus eligendi repellat ex officiis assumenda suscipit beatae minima in sit non exercitationem qui dolorem consequatur nostrum! Maxime deleniti aspernatur, sapiente ratione velit doloremque praesentium illo officiis nostrum, reprehenderit itaque. Eos ratione maxime labore rerum! Non sed ipsum, unde beatae quibusdam? Sunt, delectus nesciunt ipsam tempore fugiat veritatis doloribus quam placeat obcaecati, nam, ratione assumenda nisi error recusandae! Quo, libero soluta consequuntur rem, modi accusamus praesentium voluptatum culpa, alias accusantium obcaecati quam. Optio impedit asperiores quod, nisi, blanditiis cumque veniam, reprehenderit at voluptatibus accusantium excepturi!","code":"#include <stdio.h> \nint main(){ \n    return 15.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"15.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsum quibusdam in maxime? Pariatur maxime porro ea, soluta, sunt nostrum dolorem qui perspiciatis maiores incidunt repellendus cupiditate commodi iusto voluptatibus voluptate, atque harum sint! Dolorum porro nostrum excepturi delectus voluptas aspernatur quasi, fugit maxime amet nulla similique pariatur? Perspiciatis quaerat dolores commodi nisi dolorum repellendus, corporis vitae, delectus ullam, nemo recusandae, iusto ut cupiditate. Ipsam nobis, optio suscipit doloremque, eveniet incidunt iusto porro placeat beatae error inventore cupiditate quos maiores blanditiis cum similique quo at? Quasi nihil suscipit earum distinctio, beatae fuga ad provident recusandae consequuntur vitae quia ut, ipsam fugit.","code":"#include <stdio.h> \nint main(){ \n    return 15.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"15.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Asperiores blanditiis sequi eveniet non iure, vero, sunt minus explicabo fugiat distinctio cumque iusto itaque laborum ullam expedita doloremque nesciunt repudiandae impedit enim repellat facere a. Eum, distinctio temporibus voluptas expedita, repudiandae aliquam cum quos odit qui voluptatem dicta cupiditate rerum quisquam culpa amet iste accusamus ad veritatis nihil explicabo et laboriosam aperiam neque. Ipsum quidem officia, quod pariatur! Quam, minima officiis dicta sapiente. Placeat officiis quos voluptatem, maiores deserunt in voluptas sed exercitationem ratione beatae tenetur ducimus, laudantium enim aperiam eveniet aspernatur corporis aut doloribus? Quia libero corporis vel alias, assumenda.","code":"#include <stdio.h> \nint main(){ \n    return 15.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]}]}
{"_id":6,"title":"Unidad VI. Estructuras y Punteros","lessons":[{"_id":1,"title":"Estructuras","content":"Definición y uso de las estructuras en lenguaje C. Creación e inicialización de una variable usando una estructura. Acceso a los miembros de una estructura.","explanation":"Las estructuras son la elección adecuada cuando necesitamos guardar una serie de datos relacionados entre sí de alguna manera, por ejemplo, supongamos que deseamos llevar el registro de un producto dentro de un almacén, este producto posee un código (número entero), nombre (cadena de caracteres), un precio (número decimal) y una cantidad (número entero).  \n```c\ntypedef struct\n{\n    int codigo;\n    char nombre[31];\n    float precio;\n    int cantidad;\n}producto;\n```\nUsamos `typedef` para crear un nuevo tipo de dato llamado *producto*, el cual tiene *4 miembros* (codigo, nombre, precio y cantidad), los miembros de una estructura pueden ser de tipos de datos diferentes (`int`, `float`, `char`, etc). \nLa instrucción para crear una nueva variable de tipo producto es:\n```c\nproducto prod;\n```\nPodemos **inicializar** una variable del tipo creado en la misma instrucción de declaración, la única restricción es que los valores deben aparecer en el mismo orden que han sido declarados o especificar cada miembro con el operador `.` (punto) seguido del nombre:\n```c\nproducto prod = {123, \"la la\", 23.23f, 2}; \n```\n```c  \nproducto prod = { .nombre=\"la la\", .codigo=123, .cantidad=2, .precio=23.23f};\n```\n### Imagen\nPara **acceder** a cada miembro usamos el operador `.` (punto), por ejemplo, si queremos imprimir todos los valores de un producto:\n```c  \nprintf(\"Codigo: %d\\n\",prod.codigo);\nprintf(\"Nombre: %s\\n\",prod.nombre);\nprintf(\"Precio: %.2f\\n\",prod.precio);\nprintf(\"Precio: %d\\n\",prod.cantidad);\n```\nPodemos aplicar todas las operaciones que conocemos hasta ahora a los diferentes miembros de una estructura dependiendo del tipo de dato del miembro, por ejemplo, podemos decrementar la cantidad del producto o leer un valor y guardarlo en el miembro llamado precio:\n```c  \nprod.cantidad--;\nscanf(\"%f\",&prod.precio);\n```\nAl ser un nuevo tipo de elemento podemos pasarlo como parámetro en una función: \n```c  \nvoid imprimir_producto(producto p)\n{\n    printf(\"Codigo: %d\\n\",p.codigo);\n    printf(\"Nombre: %s\\n\",p.nombre);\n    printf(\"Precio: %.2f\\n\",p.precio);\n    printf(\"Precio: %d\\n\",p.cantidad);\n}\n```\nO retornarlo en una función: \n```c  \nproducto generar_producto()\n{\n    producto p = { .nombre=\"la la\", \n                   .codigo=123, \n                   .cantidad=2, \n                   .precio=23.23f };\n    return p;\n}\n```","example":{"statement":"16 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Maxime, natus harum repellendus quidem eius cum quas dolor, et, nesciunt voluptatum ratione suscipit. Alias fugiat ab, eum voluptate distinctio, aliquid itaque. Sit modi provident dolore tempore quisquam sed aperiam dignissimos iure debitis, praesentium necessitatibus veritatis consectetur eos, beatae quos? Ducimus rerum maxime, ipsum minus! Architecto reiciendis eveniet consectetur velit vitae sed reprehenderit culpa delectus nobis, quas obcaecati qui sint? Porro quas rem iure modi mollitia explicabo deserunt, praesentium tempora architecto eius!","code":"#include <stdio.h> \nint main(){ \n    return 16; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"16.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quidem explicabo, officia, voluptatibus provident tempora expedita beatae consequuntur ipsam! Libero voluptas quibusdam amet id, veniam asperiores. Fugiat libero corporis consequatur facere officiis recusandae aut atque distinctio consectetur? Id asperiores, illo veniam dignissimos? Ea expedita adipisci, est perferendis, iusto ullam facere eos quasi consequatur minima. Dolor iusto fuga, nostrum animi, eius voluptates voluptas, ad molestiae totam veniam quam temporibus nesciunt voluptatibus magnam ducimus praesentium aperiam? Iure consectetur, nihil dolores. Ipsum nemo fugiat quo vitae quia veniam nostrum, nobis voluptatem incidunt. Quod, quibusdam, cum. Dolores nisi ut facilis nihil neque vero rerum doloribus.","code":"#include <stdio.h> \nint main(){ \n    return 16.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"16.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quisquam et quo rerum ut debitis sapiente dolorum voluptatem ab placeat, doloremque laboriosam asperiores aperiam velit culpa vitae excepturi nostrum reprehenderit! Ducimus sapiente, fugit suscipit! Corrupti quaerat nesciunt tempore id quo hic aspernatur ratione, autem nobis! Reiciendis amet, numquam eius, nemo ad culpa quod incidunt fugiat dignissimos ratione iure, tenetur sapiente vitae ullam tempore maxime. Hic sint pariatur nemo vero, commodi nulla ea ipsam. Suscipit incidunt deleniti quo qui hic dolore rem asperiores assumenda dolores natus inventore est, aut, nihil odio ea, porro sint sapiente quasi expedita ratione facilis? Amet, expedita, delectus.","code":"#include <stdio.h> \nint main(){ \n    return 16.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"16.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Facere accusamus et cumque reiciendis. Cupiditate laudantium neque dicta corrupti facilis tenetur at possimus odit explicabo omnis. Officiis veritatis qui voluptate molestiae incidunt obcaecati ducimus odio commodi fuga rerum alias vel voluptatum eaque, dolore praesentium quis! Ipsam dignissimos corporis eius doloremque laboriosam officiis modi aliquam reiciendis eos architecto totam sequi magnam, soluta porro dolorem delectus quis odio ea et incidunt cupiditate aliquid distinctio. Iusto quo temporibus eos nemo sunt modi quisquam quod sapiente fugiat sit, aliquid labore consectetur, saepe fuga recusandae voluptate magni. Quisquam veritatis distinctio, nobis molestias, assumenda eligendi iste provident.","code":"#include <stdio.h> \nint main(){ \n    return 16.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]},{"_id":2,"title":"Vectores de estructuras, estructura dentro de estructura (Carga y recorrido)","content":"Combinación de vectores y estructuras. Manejo de estructuras con vectores. Manejo de vectores de estructuras.","explanation":"Estructura y arreglos pueden ser combinados sin ninguna restricción, lo que implica que los arreglos pueden tener estructuras como elementos y las estructuras pueden tener arreglos y otras estructuras como miembros.\n\nTener una estructura dentro de otra es útil en casos como: Se desea llevar el registro de estudiantes inscritos en la materia XXXXX, para esto se requiere guardar el nombre completo del estudiante, la cédula de identidad y las notas de los 3 parciales:  \n```c\ntypedef struct\n{\n    char primer_nombre[31];\n    char primer_apellido[31];\n}nombre_completo;\n```\n```c\ntypedef struct\n{\n    nombre_completo nombre;\n    int cedula;\n    float notas_parciales[3];\n}estudiante;\n```\nVemos que primero hemos creado la estructura `nombre\\_completo`, compuesta por *primer\\_nombre* y *primer\\_apellido* (strings). Luego creamos la estructura `estudiante`, la cual contiene un nombre (de tipo `nombre\\_completo`), la cédula y un vector de 3 elementos para guardar las notas de cada parcial. \n\nPara crear y utilizar una variable de tipo estudiante:\n```c\nestudiante est1;\n\nprintf(\"Ingrese el nombre del estudiante\\n\");\nscanf(\"%s\",est1.nombre.primer_nombre);\n\nprintf(\"Ingrese el apellido del estudiante\\n\");\nscanf(\"%s\",est1.nombre.primer_apellido);\n\nprintf(\"Ingrese la cedula del estudiante\\n\");\nscanf(\"%d\",&est1.cedula);\n\nprintf(\"Ingrese las notas parciales:\\n\");\n\nfor (int i = 0; i < 3; ++i)\n{\n    printf(\"Parcial %d: \\n\",i+1);\n    scanf(\"%f\",&est1.notas_parciales[i]);\n}\n```\nAl crear una estructura estamos declarando un nuevo tipo de dato, con el cual es posible crear arreglos como ya hemos estudiado. Si tenemos que llevar el registro de 20 estudiantes (en lugar de 1):\n```c\nint cantidad_estudiantes = 20;\nestudiante estudiantes[cantidad_estudiantes];\n```\nDe esta manera la variable estudiantes contendrá la información de 20 estudiantes.\n\nPara acceder a cada estudiante y su información, usamos la combinación de dos notaciones ya conocidas: `[indice]` para acceder a un elemento (estudiante) y `.` (punto) para acceder a sus miembros (*nombre*, *cedula* y *notas_parciales*):\n```c\nint i;\n// Ciclo para guardar información de cada estudiante\nfor (i = 0; i < cantidad_estudiantes; ++i)\n{\n    printf(\"Ingrese el nombre del estudiante\\n\");\n    scanf(\"%s\",estudiantes[i].nombre.primer_nombre);\n\n    printf(\"Ingrese el apellido del estudiante\\n\");\n    scanf(\"%s\",estudiantes[i].nombre.primer_apellido);\n\n    printf(\"Ingrese la cedula del estudiante\\n\");\n    scanf(\"%d\",&estudiantes[i].nombre.cedula);\n\n    printf(\"Ingrese las notas parciales:\\n\");\n    \n    /*Ciclo para guardar la nota de cada parcial \n        de un estudiante */\n    for (int j = 0; j < 3; ++j)\n    {\n        printf(\"Parcial %d: \\n\",j+1);\n        scanf(\"%f\",&estudiantes[i].nombre.notas_parciales[j]);\n    }\n}\n```","example":{"statement":"17 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Earum, iusto placeat obcaecati praesentium quod aliquam facilis minima necessitatibus similique, nulla molestiae quis voluptatum repellendus mollitia laboriosam ea! Reprehenderit tenetur eius vel perferendis sit omnis error nobis autem. Doloribus facere, unde, omnis eius libero cumque. Nihil officiis optio repellendus eius maxime quae nostrum placeat iure at. Commodi, magni temporibus non, repellendus eligendi numquam necessitatibus nulla repudiandae. Voluptas suscipit dicta tempora, saepe illo magnam, modi dolorum cumque explicabo nihil dignissimos doloribus. Libero.","code":"#include <stdio.h> \nint main(){ \n    return 17; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"17.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vitae error exercitationem, voluptates itaque quo, odio alias recusandae sit nulla, quaerat quos corporis? Impedit, eaque, tempore. Dicta quia ea laboriosam blanditiis nemo totam nam, quibusdam, excepturi ratione nesciunt placeat quas rem illum earum architecto. Recusandae, itaque, provident? Quod provident tenetur et, possimus asperiores quaerat deserunt quibusdam, dolorem libero commodi perspiciatis facere beatae sequi eligendi vitae, odit debitis repellat quasi itaque accusantium accusamus dolorum animi inventore excepturi quia! Ipsam odio recusandae id placeat aliquam ipsum sapiente repellendus veniam, magnam molestias maxime voluptates, laboriosam vero similique iure magni reprehenderit, voluptas dignissimos ipsa laborum!","code":"#include <stdio.h> \nint main(){ \n    return 17.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"17.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Unde possimus provident hic dicta corporis reiciendis voluptatibus porro esse ea deleniti pariatur repudiandae laboriosam dignissimos similique, quaerat alias earum tempora vel, distinctio recusandae laudantium perferendis voluptate in eligendi repellendus. Est, asperiores autem ut dolorum sed tenetur, cupiditate quidem, inventore reiciendis rem veniam dolore unde, quos. Non, dolor minima magni distinctio similique maiores voluptates consequatur corporis perferendis corrupti iusto expedita autem reprehenderit deserunt ratione quidem quo, optio impedit asperiores voluptatem inventore alias dolores. Totam eveniet aperiam tempora et saepe cupiditate, porro quisquam soluta dignissimos, animi ex quidem quam ea, molestiae. Placeat, officiis!","code":"#include <stdio.h> \nint main(){ \n    return 17.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"17.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. At earum, aliquam quas. Iure quis magnam consectetur nihil est accusantium, fugiat id exercitationem consequatur unde alias qui deserunt dolorum ab temporibus hic quod dolore voluptatum officia! Doloremque, dolores sapiente delectus rerum eligendi temporibus! Quibusdam culpa ex corporis officia impedit quasi nihil odit accusamus minus autem, saepe fugiat vero voluptatibus facilis, repellat itaque adipisci dolorum. Tempore ipsa eum aspernatur nam magni. Dolorem in officiis illum laborum. Voluptatem impedit ipsa fuga accusamus, voluptate deserunt. Fugit consequuntur nemo, eos quod consequatur fugiat odio unde minus sequi. Cum adipisci, perferendis dolores officia officiis quam laudantium.","code":"#include <stdio.h> \nint main(){ \n    return 17.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]},{"_id":3,"title":"Punteros","content":"18 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Itaque ullam dicta, dolorem atque, aut earum minima quas!","explanation":"# Falto yo :'( ","example":{"statement":"18 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Rerum quisquam molestias, cumque illo nisi, natus quidem libero earum optio reiciendis magni a, placeat possimus atque accusamus maiores consectetur voluptas ipsa adipisci veniam. Magnam autem quasi dolorum fugiat officiis provident quibusdam atque eaque dolores! Nesciunt delectus sunt, totam, quidem vel perferendis eligendi reprehenderit quam? Adipisci accusamus beatae libero nesciunt voluptas, perspiciatis magnam eos! Architecto cupiditate laudantium laboriosam optio minima error, recusandae officia necessitatibus inventore accusantium qui in nisi blanditiis soluta voluptates!","code":"#include <stdio.h> \nint main(){ \n    return 18; \n}","solutionSteps":["Primer paso","Segundo paso","Tercer paso"]},"exercises":[{"statement":"18.1 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Hic id quae, debitis accusamus officia aspernatur sed fugit modi quia accusantium illo, dolore labore ducimus soluta temporibus perferendis expedita pariatur reprehenderit ut incidunt quidem. Dolorem, architecto, quod. Totam nobis aliquam veritatis dolores cumque dolorem tempora earum nisi deserunt eveniet vero impedit veniam pariatur rerum, ad, sit, distinctio corrupti velit dicta. Dolorem similique vel hic est harum dignissimos, ullam quia vitae laboriosam sapiente sed, quod reiciendis! Quasi earum non quisquam optio repellat voluptatum aliquid, nostrum, temporibus quis labore aspernatur provident ullam accusamus, distinctio. Blanditiis nesciunt ipsa numquam, deserunt, odio nemo asperiores error!","code":"#include <stdio.h> \nint main(){ \n    return 18.1 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"18.2 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Labore laborum molestias, amet cumque facere optio dolores obcaecati provident adipisci corrupti quis fuga dolorum ad nobis. Ratione ex provident, adipisci totam maiores, culpa tenetur blanditiis, inventore nam ea sapiente quae optio nisi. Ea quia dicta quos voluptatum incidunt consequatur vero, libero quidem omnis eligendi, ullam minima, aliquid quis dolor minus eius. Possimus atque aut voluptates, non laboriosam ut reprehenderit sint dolorum debitis facilis fugiat impedit, unde libero quae praesentium esse obcaecati! Iste unde distinctio voluptatum tenetur facere consequuntur. Perspiciatis vel laudantium inventore architecto, fugiat doloribus velit laborum expedita nihil sequi. Earum?","code":"#include <stdio.h> \nint main(){ \n    return 18.2 ; \n}","expectedOutput":" > !Hola Mundo!\n "},{"statement":"18.3 Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error, velit voluptatem libero qui soluta nulla tenetur quas provident officiis, quibusdam impedit, quidem unde obcaecati quo. Tempore itaque, modi dolor expedita quis. Praesentium est sequi harum nemo commodi nulla ad molestiae, deserunt sunt accusamus vel quo enim minus accusantium atque adipisci similique optio nisi ducimus mollitia, voluptatem maiores fuga odio ut! Accusantium rem neque eaque, incidunt! Officia, minus numquam architecto inventore adipisci, maiores nihil quos consequatur quod quibusdam nam veniam nobis! Esse nam quo nihil ullam, quae ea corrupti modi velit delectus aliquam tempora amet consequuntur, quam, quia corporis repellat. Quos.","code":"#include <stdio.h> \nint main(){ \n    return 18.3 ; \n}","expectedOutput":" > !Hola Mundo!\n "}]}]}
